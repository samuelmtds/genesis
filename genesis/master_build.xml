<?xml version="1.0" encoding="UTF-8"?>
<project name="genesis-based-project" default="all" basedir="." 
         xmlns:genesis="https://genesis.dev.java.net/nonav/ns/master_build.xml">
   <target name="-pre-init">
      <!-- Override to define any properties that shouldn't be redefined by 
         the whole build process -->
   </target>

   <target name="-do-init">
      <property name="sources.dir" value="src" />
      <property name="build.dir" value="target" />
      <property name="classes.dir" value="${build.dir}/classes" />
      <property name="annotated.dir" value="${build.dir}/annotated" />
      <property name="timestamp.file" value=".timestamp" />
      <property name="verbose" value="true" />

      <property name="keep.debug.information" value="true" />
      <property name="java.source.level" value="1.4" />

      <property name="local.mode" value="false" />
      <property name="remote.mode" value="true" />

      <condition property="local.mode.only">
         <and>
            <istrue value="${local.mode}" />
            <isfalse value="${remote.mode}" />
         </and>
      </condition>

      <condition property="remote.mode.only">
         <and>
            <istrue value="${remote.mode}" />
            <isfalse value="${local.mode}" />
         </and>
      </condition>

      <condition property="local.and.remote">
         <and>
            <istrue value="${local.mode}" />
            <istrue value="${remote.mode}" />
         </and>
      </condition>
   </target>

   <target name="-post-init">
      <!-- Override to do custom initialization -->
   </target>

   <target name="init" depends="-pre-init,-do-init,-post-init" />

   <target name="-pre-init-paths">
      <!-- Override to do custom initialization -->
   </target>

   <target name="-do-init-paths">
      <property name="genesis.version" value="2.3-RC2-dev" />
      <property name="genesis.home" location="../../genesis" />
      <property name="genesis.dist" location="${genesis.home}/dist" />
      <property name="annotation.properties" 
                location="${genesis.dist}/annotation.properties" />

      <property name="aspectwerkz.dist" location="${genesis.home}/lib/aspectwerkz" />
      <property name="commons.dist" location="${genesis.home}/lib/commons" />
      <property name="hibernate.dist" location="${genesis.home}/lib/hibernate" />
      <property name="j2ee.dist" location="${genesis.home}/lib/j2ee" />
      <property name="thinlet.dist" location="${genesis.home}/lib/thinlet" />
      <property name="xdoclet.dist" location="../../xdoclet/dist" />

      <path id="aspectwerkz.path">
         <fileset dir="${aspectwerkz.dist}">
            <include name="aspectwerkz-*.jar" />
            <include name="ant*.jar" />
            <exclude name="asm*.jar" />
            <include name="concurrent*.jar" />
            <include name="dom4j*.jar" />
            <include name="javassist*.jar" />
            <include name="jrexx*.jar" />
            <include name="junit*.jar" />
            <include name="managementapi*.jar" />
            <include name="piccolo*.jar" />
            <include name="qdox*.jar" />
            <include name="trove*.jar" />
         </fileset>
      </path>

      <path id="j2ee.path">
         <fileset dir="${j2ee.dist}" includes="*.jar" />
      </path>

      <path id="xdoclet.path">
         <fileset dir="${xdoclet.dist}" includes="*.jar" />
      </path>
   </target>

   <target name="-post-init-paths">
      <!-- Override to do custom initialization -->
   </target>

   <target name="init-paths" 
           depends="init,-pre-init-paths,-do-init-paths,-post-init-paths" />

   <target name="define-aw-macros" depends="init-paths">
      <macrodef name="annotationc"
                uri="https://genesis.dev.java.net/nonav/ns/master_build.xml">
         <attribute name="srcdir" />
         <attribute name="destdir" />
         <attribute name="classpath" />
         <attribute name="touchfile" />
         <sequential>
            <taskdef name="annotationc" 
                     classname="org.codehaus.aspectwerkz.annotation.AnnotationCTask" 
                     classpathref="aspectwerkz.path" />

            <mkdir dir="@{destdir}" />
            <annotationc verbose="${verbose}"
                  srcdir="@{srcdir}"
                  destdir="@{destdir}"
                  classpath="@{classpath}"
                  properties="${annotation.properties}" />
            <touch file="@{touchfile}" />
         </sequential>
      </macrodef>

      <macrodef name="awc"
                uri="https://genesis.dev.java.net/nonav/ns/master_build.xml">
         <attribute name="classpath" />
         <attribute name="targetpath" />
         <attribute name="touchfile" />
         <sequential>
            <taskdef name="awc" 
                     classname="org.codehaus.aspectwerkz.compiler.AspectWerkzCTask" 
                     classpathref="aspectwerkz.path" />

            <awc classpathref="@{classpath}">
               <targetpath location="@{targetpath}"/>
            </awc>
            <touch file="@{touchfile}"/>
         </sequential>
      </macrodef>
   </target>

   <target name="define-hibernate-tasks" if="shared.hibernate.tasks.needed" 
           depends="init-paths">
      <taskdef name="hibernatedoclet" 
               classname="xdoclet.modules.hibernate.HibernateDocletTask" 
               classpathref="xdoclet.path" />
   </target>

   <target name="shared:pre-init">
      <!-- Override to define any properties that shouldn't be redefined by 
         the -shared:init target -->
   </target>

   <target name="shared:init" depends="init-paths,shared:pre-init">
      <property name="has.shared.sources" value="true" />

      <property name="shared.dir" value="modules/shared" />
      <property name="shared.sources.dir" value="${shared.dir}/${sources.dir}" />
      <property name="shared.classes.dir" value="${shared.dir}/${classes.dir}" />
      <property name="shared.annotated.dir" value="${shared.dir}/${annotated.dir}" />
      <property name="shared.annotated.timestamp.file" 
                location="${shared.annotated.dir}/${timestamp.file}" />
      <property name="shared.hibernate.dir" value="${shared.dir}/${build.dir}/hibernate" />
      <property name="shared.hibernate.timestamp.file" 
                location="${shared.hibernate.dir}/${timestamp.file}" />

      <property name="hibernate.generate.files" value="true" />
      <property name="hibernate.session.factory.jndi.name" 
                value="jboss:/hibernate/SessionFactory" />
      <property name="hibernate.jboss.service.name" 
                value="HibernateFactory,name=HibernateFactory" />
      <property name="hibernate.dialect" 
                value="net.sf.hibernate.dialect.HSQLDialect"/>
      <property name="hibernate.show.sql" value="true" />
      <property name="hibernate.version" value="2.1.8" />

      <property name="jdbc.driver" value="${jboss.app}/lib/hsqldb.jar" />
      <property name="jdbc.driver.class" value="org.hsqldb.jdbcDriver" />
      <property name="jdbc.username" value="sa" />
      <property name="jdbc.password" value="" />
      <property name="jdbc.connection.url" 
                value="jdbc:hsqldb:genesis/useradmin" />

      <property name="jboss.datasource.jndi.name" value="java:/DefaultDS" />

      <path id="shared.standard.javac.classpath">
         <fileset dir="${genesis.dist}" 
               includes="genesis-shared-${genesis.version}.jar" />
         <fileset dir="${hibernate.dist}" includes="hibernate*.jar" />
         <fileset dir="${commons.dist}">
            <include name="commons-beanutils*.jar" />
            <include name="commons-logging*.jar" />
            <include name="reusable-components*.jar" />
         </fileset>
      </path>
   </target>

   <target name="shared:define-conditions" depends="shared:init">
      <condition property="shared.compile">
         <istrue value="${has.shared.sources}" />
      </condition>
      <condition property="shared.clean">
         <istrue value="${clean.build}" />
      </condition>
   </target>

   <target name="shared:clean" if="shared.clean" 
           depends="shared:define-conditions">
      <delete dir="${shared.classes.dir}" />
      <delete dir="${shared.annotated.dir}" />
      <delete file="${shared.annotated.timestamp.file}" />
      <delete dir="${shared.hibernate.dir}" />
      <delete file="${shared.hibernate.timestamp.file}" />
   </target>

   <target name="shared:pre-define-classpath">
      <!-- Override to define shared.javac.overriden.classpath or 
         shared.additional.javac.classpath-->
   </target>

   <target name="shared:check-classpath-conditions" depends="shared:init">
      <condition property="shared.set.custom.javac.classpath">
         <isreference refid="shared.javac.overriden.classpath" type="path" />
      </condition>
      <condition property="shared.set.additional.javac.classpath">
         <and>
            <not>
               <isset property="shared.set.custom.javac.classpath" />
            </not>
            <isreference refid="shared.additional.javac.classpath" />
         </and>
      </condition>
      <condition property="shared.set.standard.javac.classpath">
         <and>
            <not>
               <isset property="shared.set.additional.javac.classpath" />
            </not>
            <not>
               <isset property="shared.set.custom.javac.classpath" />
            </not>
         </and>
      </condition>
   </target>

   <target name="shared:define-overriden-classpath"
           depends="shared:init" if="shared.set.custom.javac.classpath">
      <path id="shared.javac.classpath">
         <path refid="shared.javac.overriden.classpath" />
      </path>
   </target>

   <target name="shared:define-classpath-with-extensions" 
           depends="shared:init" if="shared.set.additional.javac.classpath">
      <path id="shared.javac.classpath">
         <path refid="shared.standard.javac.classpath" />
         <path refid="shared.additional.javac.classpath" />
      </path>
   </target>

   <target name="shared:define-standard-classpath"
           depends="shared:init" if="shared.set.standard.javac.classpath">
      <path id="shared.javac.classpath">
         <path refid="shared.standard.javac.classpath" />
      </path>
   </target>

   <target name="shared:define-classpath" 
           depends="shared:init,shared:pre-define-classpath,
                    shared:check-classpath-conditions,
                    shared:define-overriden-classpath,
                    shared:define-classpath-with-extensions,
                    shared:define-standard-classpath"/>

   <target name="shared:javac" if="shared.compile" 
           depends="shared:clean,shared:define-classpath">
      <mkdir dir="${shared.classes.dir}" />
      <javac destdir="${shared.classes.dir}"
            debug="${keep.debug.information}"
            source="${java.source.level}"
            classpathref="shared.javac.classpath">
         <src path="${shared.sources.dir}" />
      </javac>
   </target>

   <target name="shared:check-annotations-needed" depends="shared:init">
      <condition property="shared.classes.changed">
         <and>
            <istrue value="${has.shared.sources}" />
            <or>
               <not>
                  <available file="${shared.annotated.dir}" />
               </not>
               <not>
                  <uptodate>
                     <srcfiles dir="${shared.classes.dir}" />
                     <mapper type="merge" to="${shared.annotated.timestamp.file}" />
                  </uptodate>
               </not>
            </or>
         </and>
      </condition>

      <condition property="aw.tasks.needed">
         <istrue value="${shared.classes.changed}" />
      </condition>
   </target>

   <target name="shared:annotations" if="shared.classes.changed"
           depends="shared:check-annotations-needed,define-aw-macros">
      <genesis:annotationc srcdir="${shared.sources.dir}" 
                           destdir="${shared.annotated.dir}"
                           classpath="${shared.classes.dir}"
                           touchfile="${shared.annotated.timestamp.file}" />
   </target>

   <target name="shared:check-hibernate-conditions" depends="shared:init">
      <condition property="shared.hibernate.needed">
         <and>
            <istrue value="${has.shared.sources}" />
            <istrue value="${hibernate.generate.files}" />
            <or>
               <istrue value="${hibernate.force.generation}" />
               <not>
                  <available file="${shared.hibernate.dir}" />
               </not>
               <not>
                  <uptodate>
                     <srcfiles dir="${shared.sources.dir}" includes="**/*.java" />
                     <mapper type="merge" to="${shared.hibernate.timestamp.file}" />
                  </uptodate>
               </not>
            </or>
         </and>
      </condition>

      <condition property="shared.hibernate.local.needed">
         <and>
            <istrue value="${shared.hibernate.needed}" />
            <istrue value="${local.mode.only}" />
         </and>
      </condition>

      <condition property="shared.hibernate.remote.needed">
         <and>
            <istrue value="${shared.hibernate.needed}" />
            <istrue value="${remote.mode.only}" />
         </and>
      </condition>

      <condition property="shared.hibernate.both.needed">
         <and>
            <istrue value="${shared.hibernate.needed}" />
            <istrue value="${local.and.remote}" />
         </and>
      </condition>

      <condition property="shared.hibernate.tasks.needed">
         <istrue value="${shared.hibernate.needed}" />
      </condition>
  </target>

   <target name="hibernate-macrodefs" 
           if="shared.hibernate.tasks.needed"
           depends="define-hibernate-tasks">
      <macrodef name="hibernatedoclet" 
                uri="https://genesis.dev.java.net/nonav/ns/master_build.xml">
         <element name="subtasks" optional="true" />
         <sequential>
            <mkdir dir="${shared.hibernate.dir}" />
            <hibernatedoclet destdir="${shared.hibernate.dir}" 
                             verbose="${verbose}">
               <fileset dir="${shared.sources.dir}">
                  <include name="**/*.java" />
               </fileset>
               <hibernate version="2.0"
                          xmlencoding="ISO-8859-1"
                          validateXML="false" />
               <subtasks />
            </hibernatedoclet>
            <touch file="${shared.hibernate.timestamp.file}" />
         </sequential>
      </macrodef>

      <macrodef name="hibernatedoclet-remote"
                uri="https://genesis.dev.java.net/nonav/ns/master_build.xml">
         <element name="customize" optional="true" />
         <sequential>
            <basename property="jboss.ds.name" 
                      file="${jboss.datasource.jndi.name}"/>
            <genesis:hibernatedoclet>
               <subtasks>
                  <jbossservice jndiName="${hibernate.session.factory.jndi.name}"
                                serviceName="${hibernate.jboss.service.name}"
                                dialect="${hibernate.dialect}"
                                dataSource="${jboss.datasource.jndi.name}"
                                transactionManagerStrategy="net.sf.hibernate.transaction.JBossTransactionManagerLookup"
                                transactionStrategy="net.sf.hibernate.transaction.JTATransactionFactory"
                                userTransactionName="UserTransaction"
                                showSql="${hibernate.show.sql}"
                                depends="jboss.jca:service=LocalTxCM,name=${jboss.ds.name}"
                                version="${hibernate.version}" />
                  <customize />
               </subtasks>
            </genesis:hibernatedoclet>
         </sequential>
      </macrodef>

      <macrodef name="hibernatedoclet-local"
                uri="https://genesis.dev.java.net/nonav/ns/master_build.xml">
         <sequential>
            <genesis:hibernatedoclet>
               <subtasks>
                  <hibernatecfg dialect="${hibernate.dialect}"
                                userName="${jdbc.username}"
                                password="${jdbc.password}"
                                driver="${jdbc.driver.class}"
                                jdbcUrl="${jdbc.connection.url}"
                                transactionManagerStrategy="net.sf.hibernate.transaction.JDBCTransactionFactory"
                                showSql="${hibernate.show.sql}" />
               </subtasks>
            </genesis:hibernatedoclet>
         </sequential>
      </macrodef>

      <macrodef name="hibernatedoclet-both"
                uri="https://genesis.dev.java.net/nonav/ns/master_build.xml">
         <sequential>
            <genesis:hibernatedoclet-remote>
               <customize>
                  <hibernatecfg dialect="${hibernate.dialect}"
                                userName="${jdbc.username}"
                                password="${jdbc.password}"
                                driver="${jdbc.driver.class}"
                                jdbcUrl="${jdbc.connection.url}"
                                transactionManagerStrategy="net.sf.hibernate.transaction.JDBCTransactionFactory"
                                showSql="${hibernate.show.sql}" />
               </customize>
            </genesis:hibernatedoclet-remote>
         </sequential>
      </macrodef>
   </target>

   <target name="shared:hibernate-doclet-local" 
           if="shared.hibernate.local.needed"
           depends="shared:check-hibernate-conditions,hibernate-macrodefs">
      <genesis:hibernatedoclet-local />
   </target>

   <target name="shared:hibernate-doclet-remote" 
           if="shared.hibernate.remote.needed"
           depends="shared:check-hibernate-conditions,hibernate-macrodefs">
      <genesis:hibernatedoclet-remote />
   </target>

   <target name="shared:hibernate-doclet-both" 
           if="shared.hibernate.both.needed"
           depends="shared:check-hibernate-conditions,hibernate-macrodefs">
      <genesis:hibernatedoclet-both />
   </target>

   <target name="shared:hibernate-doclet" 
           depends="shared:hibernate-doclet-local,
                    shared:hibernate-doclet-remote,
                    shared:hibernate-doclet-both" />

   <target name="shared:compile" 
           depends="shared:javac,shared:annotations,shared:hibernate-doclet" />

   <target name="client:pre-init">
      <!-- Override to define any properties that shouldn't be redefined by 
         the client:init target -->
   </target>

   <target name="client:init" depends="init-paths,client:pre-init">
      <property name="has.client.sources" value="true" />

      <property name="client.dir" value="modules/client" />
      <property name="client.sources.dir" value="${client.dir}/${sources.dir}" />
      <property name="client.classes.dir" value="${client.dir}/${classes.dir}" />
      <property name="client.annotated.dir" value="${client.dir}/${annotated.dir}" />
      <property name="client.annotated.timestamp.file" 
                location="${client.annotated.dir}/${timestamp.file}" />
      <property name="client.validation.dir" 
                value="${client.dir}/${build.dir}/validation" />
      <property name="client.validation.timestamp.file" 
                location="${client.validation.dir}/${timestamp.file}" />

      <property name="validation.generate.files" value="true" />

      <path id="client.standard.javac.classpath">
         <path location="${shared.classes.dir}" />
         <path refid="aspectwerkz.path" />
         <fileset dir="${genesis.dist}">
            <include name="genesis-shared-${genesis.version}.jar" />
            <include name="genesis-client-${genesis.version}.jar" />
         </fileset>
         <fileset dir="${commons.dist}">
            <include name="commons-beanutils*.jar" />
            <include name="commons-digester*.jar" />
            <include name="commons-jxpath*.jar" />
            <include name="commons-logging*.jar" />
            <include name="commons-validator*.jar" />
            <include name="jakarta-oro-*.jar" />
            <include name="reusable-components*.jar" />
         </fileset>
         <fileset dir="${thinlet.dist}" includes="thinlet*.jar" />
         <fileset dir="${hibernate.dist}" includes="hibernate2.jar" />
      </path>
   </target>

   <target name="client:define-conditions" depends="client:init">
      <condition property="client.compile">
         <istrue value="${has.client.sources}" />
      </condition>
      <condition property="client.clean">
         <istrue value="${clean.build}" />
      </condition>
   </target>

   <target name="client:clean" if="client.clean" 
           depends="client:define-conditions">
      <delete dir="${client.classes.dir}" />
      <delete dir="${client.annotated.dir}" />
      <delete file="${client.annotated.timestamp.file}" />
      <delete dir="${client.hibernate.dir}" />
      <delete file="${client.hibernate.timestamp.file}" />
   </target>

   <target name="client:pre-define-classpath">
      <!-- Override to define client.javac.overriden.classpath or 
         client.additional.javac.classpath-->
   </target>

   <target name="client:check-classpath-conditions" depends="client:init">
      <condition property="client.set.custom.javac.classpath">
         <isreference refid="client.javac.overriden.classpath" type="path" />
      </condition>
      <condition property="client.set.additional.javac.classpath">
         <and>
            <not>
               <isset property="client.set.custom.javac.classpath" />
            </not>
            <isreference refid="client.additional.javac.classpath" />
         </and>
      </condition>
      <condition property="client.set.standard.javac.classpath">
         <and>
            <not>
               <isset property="client.set.additional.javac.classpath" />
            </not>
            <not>
               <isset property="client.set.custom.javac.classpath" />
            </not>
         </and>
      </condition>
   </target>

   <target name="client:define-overriden-classpath"
           depends="client:init" if="client.set.custom.javac.classpath">
      <path id="client.javac.classpath">
         <path refid="client.javac.overriden.classpath" />
      </path>
   </target>

   <target name="client:define-classpath-with-extensions" 
           depends="client:init" if="client.set.additional.javac.classpath">
      <path id="client.javac.classpath">
         <path refid="client.standard.javac.classpath" />
         <path refid="client.additional.javac.classpath" />
      </path>
   </target>

   <target name="client:define-standard-classpath"
           depends="client:init" if="client.set.standard.javac.classpath">
      <path id="client.javac.classpath">
         <path refid="client.standard.javac.classpath" />
      </path>
   </target>

   <target name="client:define-classpath" 
           depends="client:init,client:pre-define-classpath,
                    client:check-classpath-conditions,
                    client:define-overriden-classpath,
                    client:define-classpath-with-extensions,
                    client:define-standard-classpath"/>

   <target name="client:javac" if="client.compile" 
           depends="client:clean,client:define-classpath">
      <mkdir dir="${client.classes.dir}" />
      <javac destdir="${client.classes.dir}"
            debug="${keep.debug.information}"
            source="${java.source.level}"
            classpathref="client.javac.classpath">
         <src path="${client.sources.dir}" />
      </javac>
   </target>

   <target name="client:check-annotations-needed" depends="client:init">
      <condition property="client.classes.changed">
         <and>
            <istrue value="${has.client.sources}" />
            <or>
               <not>
                  <available file="${client.annotated.dir}" />
               </not>
               <not>
                  <uptodate>
                     <srcfiles dir="${client.classes.dir}" />
                     <mapper type="merge" to="${client.annotated.timestamp.file}" />
                  </uptodate>
               </not>
            </or>
         </and>
      </condition>

      <condition property="aw.tasks.needed">
         <istrue value="${client.classes.changed}" />
      </condition>
   </target>

   <target name="client:annotations" if="client.classes.changed"
           depends="client:check-annotations-needed,define-aw-macros">
      <genesis:annotationc srcdir="${client.sources.dir}" 
                           destdir="${client.annotated.dir}"
                           classpath="${client.classes.dir}"
                           touchfile="${client.annotated.timestamp.file}" />
   </target>

   <target name="client:check-validation-conditions" depends="client:init">
      <condition property="client.validation.needed">
         <and>
            <istrue value="${has.client.sources}" />
            <istrue value="${validation.generate.files}" />
            <or>
               <istrue value="${validation.force.generation}" />
               <not>
                  <available file="${client.validation.dir}" />
               </not>
               <not>
                  <uptodate>
                     <srcfiles dir="${client.sources.dir}" includes="**/*.java" />
                     <mapper type="merge" to="${client.validation.timestamp.file}" />
                  </uptodate>
               </not>
            </or>
         </and>
      </condition>
   </target>

   <target name="client:validation" if="client.validation.needed" 
           depends="client:check-validation-conditions">
      <taskdef name="genesisdoclet" 
               classname="xdoclet.modules.genesis.GenesisDocletTask" 
               classpathref="xdoclet.path" />

      <genesisdoclet destdir="${client.validation.dir}" verbose="${verbose}">
         <fileset dir="${client.sources.dir}" includes="**/*.java" />
         <genesisvalidationxml xmlencoding="ISO-8859-1" />
      </genesisdoclet>
      <touch file="${client.validation.timestamp.file}" />
   </target>

   <target name="client:compile" 
           depends="client:javac,client:annotations,client:validation" />

   <target name="weaving:pre-init">
      <!-- Override to define any properties that shouldn't be redefined by 
         the weaving:init target -->
   </target>

   <target name="weaving:init" depends="init-paths,weaving:pre-init,
                                        client:define-classpath,
                                        shared:define-classpath">
      <property name="needs.weaving" value="true" />

      <property name="weaving.dir" value="${build.dir}/weaving" />
      <property name="weaving.local.dir" value="${weaving.dir}/local" />
      <property name="weaving.local.timestamp.file" 
                location="${weaving.local.dir}/${timestamp.file}" />
      <property name="weaving.remote.dir" value="${weaving.dir}/remote" />
      <property name="weaving.remote.timestamp.file" 
                location="${weaving.remote.dir}/${timestamp.file}" />

      <property name="weaving.xml.definition.dir" 
                location="${client.sources.dir}/META-INF" />

      <condition property="weaving.local.xml" 
                 value="${weaving.xml.definition.dir}/aop.xml">
         <istrue value="${local.mode.only}" />
      </condition>
      <condition property="weaving.local.xml" 
                 value="${weaving.xml.definition.dir}/local-aop.xml">
         <istrue value="${local.and.remote}" />
      </condition>

      <condition property="weaving.remote.xml" 
                 value="${weaving.xml.definition.dir}/aop.xml">
         <istrue value="${remote.mode.only}" />
      </condition>
      <condition property="weaving.remote.xml" 
                 value="${weaving.xml.definition.dir}/remote-aop.xml">
         <istrue value="${local.and.remote}" />
      </condition>

      <path id="weaving.standard.local.classpath">
         <path path="${genesis.dist}/genesis-aspect-annotated-${genesis.version}.jar" />
         <path refid="client.javac.classpath" />
         <path refid="shared.javac.classpath" />
         <path refid="j2ee.path" />
      </path>

      <path id="weaving.standard.remote.classpath">
         <path path="${genesis.dist}/genesis-aspect-annotated-${genesis.version}.jar" />
         <path refid="client.javac.classpath" />
         <path refid="shared.javac.classpath" />
         <path refid="j2ee.path" />
      </path>

      <!--
      <fileset id="weaving.standard.additional.remote.fileset">
         <fileset dir="${thinlet.dist}" includes="thinlet*.jar" />
         <fileset dir="${genesis.dist}"
                  includes="genesis-shared-annotated-${genesis.version}.jar" />
      </fileset-->
   </target>

   <target name="weaving:define-conditions" depends="weaving:init">
      <condition property="weaving.clean">
         <istrue value="${clean.build}" />
      </condition>
   </target>

   <target name="weaving:clean" if="weaving.clean" 
           depends="weaving:define-conditions">
      <delete dir="${weaving.local.dir}" />
      <delete dir="${weaving.local.timestamp.file}" />
      <delete dir="${weaving.remote.dir}" />
      <delete dir="${weaving.remote.timestamp.file}" />
   </target>

   <target name="weaving:pre-define-local-classpath">
      <!-- Override to define weaving.local.overriden.classpath or 
         weaving.additional.local.classpath-->
   </target>

   <target name="weaving:check-local-classpath-conditions" depends="weaving:init">
      <condition property="weaving.set.custom.local.classpath">
         <and>
            <istrue value="${local.mode}" />
            <isreference refid="weaving.local.overriden.classpath" type="path" />
         </and>
      </condition>
      <condition property="weaving.set.additional.local.classpath">
         <and>
            <istrue value="${local.mode}" />
            <not>
               <isset property="weaving.set.custom.local.classpath" />
            </not>
            <isreference refid="weaving.additional.local.classpath" />
         </and>
      </condition>
      <condition property="weaving.set.standard.local.classpath">
         <and>
            <istrue value="${local.mode}" />
            <not>
               <isset property="weaving.set.additional.local.classpath" />
            </not>
            <not>
               <isset property="weaving.set.custom.local.classpath" />
            </not>
         </and>
      </condition>
   </target>

   <target name="weaving:define-overriden-local-classpath"
           depends="weaving:init" if="weaving.set.custom.local.classpath">
      <path id="weaving.local.classpath">
         <path refid="weaving.local.overriden.classpath" />
      </path>
   </target>

   <target name="weaving:define-local-classpath-with-extensions" 
           depends="weaving:init" if="weaving.set.additional.local.classpath">
      <path id="weaving.local.classpath">
         <path refid="weaving.standard.local.classpath" />
         <path refid="weaving.additional.local.classpath" />
      </path>
   </target>

   <target name="weaving:define-standard-local-classpath"
           depends="weaving:init" if="weaving.set.standard.local.classpath">
      <path id="weaving.local.classpath">
         <path refid="weaving.standard.local.classpath" />
      </path>
   </target>

   <target name="weaving:define-local-classpath" 
           depends="weaving:init,weaving:pre-define-local-classpath,
                    weaving:check-local-classpath-conditions,
                    weaving:define-overriden-local-classpath,
                    weaving:define-local-classpath-with-extensions,
                    weaving:define-standard-local-classpath"/>

   <target name="weaving:pre-define-remote-classpath">
      <!-- Override to define weaving.remote.overriden.classpath or 
         weaving.additional.remote.classpath-->
   </target>

   <target name="weaving:check-remote-classpath-conditions" depends="weaving:init">
      <condition property="weaving.set.custom.remote.classpath">
         <and>
            <istrue value="${remote.mode}" />
            <isreference refid="weaving.remote.overriden.classpath" type="path" />
         </and>
      </condition>
      <condition property="weaving.set.additional.remote.classpath">
         <and>
            <istrue value="${remote.mode}" />
            <not>
               <isset property="weaving.set.custom.remote.classpath" />
            </not>
            <isreference refid="weaving.additional.remote.classpath" />
         </and>
      </condition>
      <condition property="weaving.set.standard.remote.classpath">
         <and>
            <istrue value="${remote.mode}" />
            <not>
               <isset property="weaving.set.additional.remote.classpath" />
            </not>
            <not>
               <isset property="weaving.set.custom.remote.classpath" />
            </not>
         </and>
      </condition>
   </target>

   <target name="weaving:define-overriden-remote-classpath"
           depends="weaving:init" if="weaving.set.custom.remote.classpath">
      <path id="weaving.remote.classpath">
         <path refid="weaving.remote.overriden.classpath" />
      </path>
   </target>

   <target name="weaving:define-remote-classpath-with-extensions" 
           depends="weaving:init" if="weaving.set.additional.remote.classpath">
      <path id="weaving.remote.classpath">
         <path refid="weaving.standard.remote.classpath" />
         <path refid="weaving.additional.remote.classpath" />
      </path>
   </target>

   <target name="weaving:define-standard-remote-classpath"
           depends="weaving:init" if="weaving.set.standard.remote.classpath">
      <path id="weaving.remote.classpath">
         <path refid="weaving.standard.remote.classpath" />
      </path>
   </target>

   <target name="weaving:define-remote-classpath" 
           depends="weaving:init,weaving:pre-define-remote-classpath,
                    weaving:check-remote-classpath-conditions,
                    weaving:define-overriden-remote-classpath,
                    weaving:define-remote-classpath-with-extensions,
                    weaving:define-standard-remote-classpath"/>

   <target name="weaving:check-conditions" depends="weaving:init">
      <condition property="weaving.local.needed">
         <and>
            <istrue value="${needs.weaving}" />
            <istrue value="${local.mode}" />
            <or>
               <not>
                  <available file="${weaving.local.dir}" />
               </not>
               <not>
                  <uptodate>
                     <srcfiles dir="${client.annotated.dir}" 
                               includes="**/*.class" />
                     <srcfiles dir="${shared.annotated.dir}" 
                               includes="**/*.class" />
                     <mapper type="merge" to="${weaving.local.timestamp.file}" />
                  </uptodate>
               </not>
            </or>
         </and>
      </condition>

      <condition property="weaving.remote.needed">
         <and>
            <istrue value="${needs.weaving}" />
            <istrue value="${remote.mode}" />
            <or>
               <not>
                  <available file="${weaving.remote.dir}" />
               </not>
               <not>
                  <uptodate>
                     <srcfiles dir="${client.annotated.dir}" 
                               includes="**/*.class" />
                     <srcfiles dir="${shared.annotated.dir}" 
                               includes="**/*.class" />
                     <mapper type="merge" to="${weaving.remote.timestamp.file}" />
                  </uptodate>
               </not>
            </or>
         </and>
      </condition>
   </target>

   <target name="weaving:macrodefs">
      <macrodef name="weaving-copy-macro"
                uri="https://genesis.dev.java.net/nonav/ns/master_build.xml">
         <attribute name="targetdir" />
         <attribute name="xml" />
         <element name="copy-fileset" optional="false" />
         <element name="unjar-fileset" optional="false" />
         <sequential>
            <delete dir="@{targetdir}" />
            <mkdir dir="@{targetdir}" />

            <copy todir="@{targetdir}">
               <copy-fileset />
            </copy>
            <unjar dest="@{targetdir}">
               <unjar-fileset />
            </unjar>
            <copy file="@{xml}" 
                  tofile="@{targetdir}/META-INF/aop.xml" />
         </sequential>
      </macrodef>
      <presetdef name="weaving-copy"
                 uri="https://genesis.dev.java.net/nonav/ns/master_build.xml">
         <genesis:weaving-copy-macro>
            <copy-fileset>
               <fileset dir="${client.annotated.dir}" includes="**/*.class" />
               <fileset dir="${shared.annotated.dir}" includes="**/*.class" />
            </copy-fileset>
            <unjar-fileset>
               <fileset dir="${thinlet.dist}" includes="thinlet*.jar" />
               <fileset dir="${genesis.dist}"
                        includes="genesis-shared-annotated-${genesis.version}.jar" />
            </unjar-fileset>
         </genesis:weaving-copy-macro>
      </presetdef>
   </target>

   <target name="weaving:copy-local-files" 
           depends="weaving:check-conditions,weaving:macrodefs" 
           if="weaving.local.needed">
      <genesis:weaving-copy targetdir="${weaving.local.dir}" 
                            xml="${weaving.local.xml}" />
   </target>

   <target name="weaving:local" 
           depends="weaving:define-local-classpath,weaving:copy-local-files,
                    define-aw-macros"
           if="weaving.local.needed">
      <genesis:awc classpath="weaving.local.classpath" 
                   targetpath="${weaving.local.dir}"
                   touchfile="${weaving.local.timestamp.file}" />
   </target>

   <target name="weaving:copy-remote-files" depends="weaving:check-conditions" 
           if="weaving.remote.needed">
      <genesis:weaving-copy targetdir="${weaving.remote.dir}" 
                            xml="${weaving.remote.xml}" />
   </target>

   <target name="weaving:remote" 
           depends="weaving:define-remote-classpath,weaving:copy-remote-files,
                    define-aw-macros"
           if="weaving.remote.needed">
      <genesis:awc classpath="weaving.remote.classpath" 
                   targetpath="${weaving.remote.dir}"
                   touchfile="${weaving.remote.timestamp.file}" />
   </target>

   <target name="weaving" depends="weaving:local,weaving:remote" />

   <target name="compile" depends="shared:compile,client:compile,weaving" 
           description="Compiles all artifacts"/>

   <target name="all" depends="compile" 
           description="Builds the whole project"/>

   <target name="pre-clean">
      <property name="clean.build" value="true" />
   </target>

   <target name="clean" 
           depends="pre-clean,shared:clean,client:clean,weaving:clean" 
           description="Deletes build artifacts" />

   <target name="clean-build" depends="clean,all" 
           description="Deletes build artifacts before building the project"/>
</project>