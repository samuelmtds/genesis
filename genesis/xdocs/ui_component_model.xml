<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Modelo de componentes de interface gráfica</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Modelo de componentes de interface gráfica">
      <p><b>TODO: configurar todos os exemplos em um sample e atualizar
      documento com instruções de execução.</b></p>
      <p>O modelo de componentes de interface gráfica do genesis é bastante
      expressivo embora simples e baseia-se em grande parte no uso de <b>
      anotações</b>. Estas anotações não são ainda interpretadas como metadados
      do Java 5.0, definidos pela JSR-175, mas são utilizados de maneira similar
      a tags do XDoclet. Os exemplos abaixo tornarão o uso claro.</p>
      <p>Os seguintes conceitos e/ou características são abordados abaixo:
      <ul>
        <li><a href="#Tipos de componentes de interface gráfica">Tipos de
        componentes de interface gráfica</a></li>
        <li><a href="#Entendendo as views">Entendendo as views</a></li>
      </ul>
      </p>
    </section>
    <section name="Tipos de componentes de interface gráfica">
      <p>A fim de atingir as metas de simplicidade e testabilidade, dois tipos
      de componente são combinados para formar a interface gráfica: uma
      <b>View</b> e um <b>Form</b>. Uma view é uma classe que realiza as
      operações específicas da API gráfica utilizada, enquanto o form é um
      simples JavaBean que contém a lógica de interface, é desacoplado da API
      gráfica e pode ser até mesmo reutilizado com outra API.</p>
      <p>É importante salientar que o fato de o form estar desacoplado da API
      gráfica e ser apenas um JavaBean têm diversas conseqüências úteis para o
      desenvolvedor, como por exemplo:
        <ul>
          <li>Pode-se escrever testes unitários para a lógica de negócios.</li>
          <li>O form pode estender qualquer classe e a herança pode ser
          utilizada para compartilhar características comuns.</li>
          <li>A separação de código motiva o desenvolvedor a programar de forma
          mais clara e inteligível.</li>
          <li>Será possível utilizar o mesmo form, sem modificações, numa
          interface Swing, por exemplo, tão logo o genesis suporte essa API</li>
        </ul>
      </p>
      <p>Essa arquitetura proposta, conforme mencionado no último item, permite
      que o mesmo modelo de form possa ser utilizado em diversas views.
      Atualmente o genesis suporta apenas Thinlet como modelo de implementação
      de views, mas versões futuras proverão suporte a Swing e até mesmo Thinlet
      em PDAs compatíveis com PersonalJava.</p>
    </section>
    <section name="Entendendo as views">
      <p>As views são fortemente acopladas com a API gráfica utilizada. O
      suporte a Thinlet hoje é implementado no genesis basicamente por duas
      classes em <code>net.java.dev.genesis.ui.thinlet</code>: <code>BaseThinlet
      </code> e sua subclasse <code>BaseDialogThinlet</code>.</p>
      <p><code>BaseThinlet</code> estende <code>Thinlet</code> das seguintes
      formas:
        <ul>
          <li>Expõe constantes para os nomes dos widgets (componentes gráficos)
          do Thinlet que são utilizados por toda API do Thinlet e também
          internamente</li>
          <li>Provê diversos métodos
          <code>set&lt;Propriedade&gt;(Object,&lt;tipo&gt;)</code> e
          <code>&lt;tipo&gt; get&lt;Propriedade&gt;(Object)</code> para que as
          propriedades dos widgets possam ser manipuladas de modo fortemente
          tipado.</li>
          <li>Implementa alguns métodos <code>create&lt;Widget&gt;(..)</code>
          que facilitam a geração dinâmica de componentes gráficos.</li>
          <li>Possui métodos para exibir um bean na tela (<code>displayBean(..)
          </code> e <code>populateFrom..(..)</code>) bem como para capturar os
          valores exibidos em um bean (<code>populate(Object)</code>).</li>
          <li>Possibilita o tratamento de erros através de <code>
          handleException(Throwable)</code> e métodos especializados como <code>
          handleUIException(UIException), handleCustomException(Throwable),
          </code> e <code>handleUnknownException(Throwable)</code>.</li>
          <li>Integra a validação e implementa o tratamento específico de erros
          para ela.</li>
          <li>Implementa o binding (algo como junção) da view com o form através
          dos métodos <code>bind(..)</code> e <code>invokeFormAction(..)</code>.
          </li>
        </ul>
      </p>
      <p>Quando o modelo explicado neste documento é utilizado, i.e., o binding
      de view e form, somente as três últimas características são de interesse
      pelo código cliente. Por isso, somente estas serão exploradas neste
      documento.</p>
      <p><code>BaseDialogThinlet</code> é uma especialização de
      <code>BaseThinlet</code> que facilita a criação de janelas de diálogo.
      Logo todas as explicações referentes a <code>BaseThinlet</code> aplicam-se
      a ela também.</p>
      <subsection name="Configurando e exibindo uma janela">
        <p>A criação da janela em que a view será exibida é de responsabilidade
        do programador. Uma maneira de criar a janela principal é utilizando a
        própria classe <code>FrameLauncher</code> que vem com o Thinlet. Abaixo,
        um exemplo de uso dessa técnica:</p>
<source>
public class ExemploCriacaoFrame extends BaseThinlet {
   public ExemploCriacaoFrame() throws Exception {
      add(parse("exemplo_criacao_frame.xml"));
   }

   public static void main(String[] args) throws Exception {
      new FrameLauncher("Exemplo de criação de frame",
            new ExemploCriacaoFrame(), 800, 600);
   }
}
</source>
        <p>Este exemplo trivial pode ser suficiente para diversas situações, mas
        em algumas outras é necessário alterar as propriedades do frame antes de
        exibi-lo. Em casos em que seja necessário fazer as mesmas alterações
        para todos os frames na aplicação ou mesmo alterar configurações do
        Thinlet, recomenda-se a criação de uma superclasse intermediária. Esta
        técnica é utilizada nos exemplos providos com o genesis. A seguinte
        classe foi extraída do exemplo useradmin:</p>
<source>
public abstract class BaseView extends BaseThinlet {
   public BaseView(String title, String xmlFile, int width, int height,
         boolean resizable) throws Exception {
      Frame f = new Frame();
      f.add(this);
      Insets is = f.getInsets();
      width += is.left + is.right;
      height += is.top + is.bottom;
      Dimension ss = getToolkit().getScreenSize();
      width = Math.min(width, ss.width);
      height = Math.min(height, ss.height);
      f.setBounds((ss.width - width) / 2, (ss.height - height) / 2, width,
            height);
      f.setResizable(resizable);
      f.setTitle(UIUtils.getInstance().getBundle().getString(title));
      f.addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent e) {
            System.exit(0);
         }
      });
      setAllI18n(true);
      setResourceBundle(UIUtils.getInstance().getBundle());
      add(parse(xmlFile));
   }
}</source>
        <p>A classe mostrada acima cria seu próprio frame de modo a centralizá-
        lo, torná-lo redimensionável ou não, define o título através do
        <code>ResourceBundle</code>, o que permite internacionalização,
        configura a janela para encerrar a execução quando esta for fechada e
        configura a internacionalização da interface gráfica antes de adicionar
        o xml.</p>
        <p>A classe <code>BaseDialogThinlet</code> possui construtores capazes
        de criar a <code>Dialog</code> e outros que recebem uma instância criada
        externamente.</p>
      </subsection>
    </section>
  </body>
</document>




