<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Introdução</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Introdução">
      <p>O genesis é um framework que tem por objetivo simplificar o 
      desenvolvimento de aplicações, provendo um ambiente produtivo sem 
      sacrificar a escalabilidade e performance da aplicação.</p>
      <p>Suas principais funcionalidades são:</p>
      <ul>
         <li><b>Remotabilidade transparente:</b> Permite implementar chamadas
         remotas métodos de classes que não implementam nem estendem nenhuma 
         classe/interface (POJOs) com o simples uso da anotação 
         <code>@Remotable</code>. No lado cliente, seus objetos podem ser 
         instanciados com <code>new</code> e usados normalmente.</li>
         <li><b>Suporte a transações:</b> De modo similar à remotabilidade 
         transparente, o uso da anotação <code>@Transactional</code> permite 
         realizar chamadas de métodos em contexto transacional, com suporte
         automático a rollback caso uma exceção seja lançada.</li>
         <li><b>Integração com Hibernate:</b> Simplifica o uso do Hibernate, não 
         exigindo nenhuma configuração adicional e integrado as funcionalidades 
         de remotabilidade transparente e suporte a transações.</li>
         <li><b>Binding Swing e Thinlet:</b> Através do binding do genesis, é 
         possível exibir e manter JavaBeans sincronizados com o estado da tela
         sem a necessidade de listeners, APIs de eventos ou interfaces 
         especiais. Além disso, pode-se ligar métodos a botões apenas com uma
         anotação.</li>
         <li><b>Suporte a  controle condicional da interface gráfica:</b> Com o
         uso das anotações <code>@EnabledWhen</code> e 
         <code>@VisibleWhen</code> é possível habilitar/desabilitar componentes 
         e exibí-los/ocultá-los na interface de forma declarativa, usando 
         condições: o genesis detecta quando a condição muda e a interface 
         gráfica é atualizada automaticamente. Também é possível limpar campos
         com <code>@ClearOn</code> e invocar métodos condicionalmente com 
         <code>@CallWhen</code>.</li>
         <li><b>Modelo simples para popular combos, listas e tabelas:</b> Basta
         escrever um método que retorne uma <code>java.util.List</code> ou uma
         array para popular combos, listas e tabelas, sem o uso de nenhuma 
         interface.</li>
         <li><b>Validação</b>: As regras de validação são declaradas no próprio 
         JavaBean que retém os dados da interface gráfica e são executadas e
         tratadas pelo framework antes de invocar uma ação anotada com 
         <code>@ValidateBefore</code>.</li>
         <li><b>Paginação:</b> Provê diversas classes de suporte para paginação,
         tornando simples o seu uso tanto no lado cliente como nas classes de 
         negócio. Possui implementações para uso com o Hibernate e para 
         paginação de listas em memória.</li>
         <li><b>Pesquisas dinâmicas:</b> O genesis possui APIs que eliminam a 
         complexidade necessária para implementar pesquisas dinâmicas, i.e., 
         aquelas em que o usuário pode preencher algum de muitos campos de 
         pesquisa.</li>
      </ul>
      <p>Esta documentação tem como objetivo apresentar as principais 
      características e conceitos do genesis com o intuito de que estes possam 
      ser aplicados ao desenvolvimento. Exemplos de cada funcionalidade 
      encontram-se na explicação de cada uma delas.</p>
      <p>É importante salientar que, embora os exemplos do framework estejam
      configurados para pronta execução com o JBoss e que a documentação às
      vezes se refira a este servidor de aplicações, todas as funcionalidades do
      framework não são dependentes de nenhum produto específico e são
      compatíveis com o padrão J2EE.</p>
    </section>
  </body>
</document>