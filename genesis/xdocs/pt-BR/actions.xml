<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Implementando ações mistas</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Implementando ações mistas">
      <p>Embora o genesis possibilite que seja feito o binding de ações do form
      com controles na tela, nada impede o uso do recursos específicos da API 
      gráfica utilizada, como invocar métodos configurando-os no xml da tela 
      para o Thinlet ou usar listeners com Swing. Desta forma, uma
      questão recorrente na mente dos desenvolvedores é quando usar
      <code>@Action</code> e quando utilizar os recursos "nativos" diretamente 
      na classe da view. Alguns princípios básicos podem ser usados para se 
      tomar esta decisão.</p>
      <p>Se uma ação modifica o form ou não está ligada a API gráfica, esta deve
      ser implementada no form com o uso de <code>@Action</code>. Se a resposta
      a determinado controle é simplesmente exibir uma nova tela, janela de
      diálogo ou alguma tarefa específica da API gráfica sendo utilizada, deve-se
      implementá-la na view e acioná-la com o recurso específico da API 
      gráfica. Porém, existem situações não tão simples e outras nas quais a 
      manipulação do form e da view se misturam. Estes casos são considerados 
      abaixo.</p>
      <subsection name="Usando @BeforeAction">
        <p>Consideremos o seguinte exemplo: deve-se implementar a exclusão de um
        dado. Mas antes de excluí-lo o usuário deve confirmar a operação. Essa
        confirmação poderia ser implementada exibindo uma
        <code>OptionDialog</code> (Thinlet) ou um <code>JOptionPane</code> 
        (Swing) para o usuário e prosseguindo com a operação somente se ele 
        concordasse. A operação de exclusão não é específica da API gráfica e, 
        portanto, deve ser implementada no form. Como implementar isso?</p>
        <p>A fim de se executar um método na interface gráfica antes de invocar
        um método no form - e até mesmo impedir a execução do mesmo - utiliza-se
        a anotação <code>@BeforeAction</code>. Esta anotação deve ser colocada
        no método da view que se deseja executar antes do método do form e pode
        tanto retornar <code>boolean</code> como <code>void</code>. Quando o
        método retorna <code>false</code> o método no form não é invocado.</p>
        <p>Se o nome do método na view tive o mesmo nome do método no form não é
        necessário utilizar nenhum parâmetro adicional para a anotação. Em
        certos casos, porém, o nome do método na view pode não ser o mesmo
        utilizado no form. Para indicar a execução de qual método do form deve
        ser precedida da execução do método na view, coloca-se ao lado da
        anotação o nome do método no form. Um exemplo completo de uso encontra-
        se abaixo. Primeiro, a view Thinlet:</p>
<source>
public class ExemploBeforeActionViewThinlet extends BaseThinlet {
   public ExemploBeforeActionViewThinlet() {
      // lógica de inicializacao
      bind(new ExemploBeforeActionForm());
   }

   @BeforeAction("excluir")
   public boolean confirmaExclusao() {
      return OptionDialog.displayYesNo(this, "Excluindo registro...",
            "Deseja realmente excluir o registro?") == Option.YES;
   }

   // ...
}
</source>
        <p>O código equivalente usando-se o Swing:</p>
<source>
@ViewHandler
public class ExemploBeforeActionViewSwing extends JFrame {
   public ExemploBeforeActionViewSwing() {
      // lógica de inicializacao
      new SwingBinder(this, new ExemploBeforeActionForm()).bind();
   }

   @BeforeAction("excluir")
   public boolean confirmaExclusao() {
      return JOptionPane.showConfirmDialog(this, "Deseja realmente excluir o " +
            "registro?", "Excluindo registro...", JOptionPane.YES_NO_OPTION) == 
             JOptionPane.YES_OPTION;
   }

   // ...
}
</source>
        <p>Abaixo temos o form:</p>
<source>
@Form
public class ExemploBeforeActionForm {
   @Action
   public void excluir() {
      // implementa aqui a lógica de exclusão.
   }

   // ...
}
</source>
        <p>Quando o botão com o nome <code>excluir</code> é acionado, o genesis
        invoca o método <code>confirmaExclusao()</code> em
        <code>ExemploBeforeActionViewThinlet</code> e/ou 
        <code>ExemploBeforeActionViewSwing</code> visto que este está 
        configurado com a anotação <code>@BeforeAction("excluir")</code>. Caso o 
        nome do método na view fosse <code>excluir</code> não seria necessário 
        passar o nome do método como parâmetro para a anotação.</p>
        <p>Visto que <code>confirmaExclusao()</code> possui como retorno um
        <code>boolean</code>, o método no form só será invocado quando o retorno
        for <code>true</code>. No exemplo específico, isso só acontecerá quando
        o usuário escolher a opção "Sim" na janela que será exibida. Quando a
        confirmação ocorre, o método <code>excluir()</code> é invocado pelo
        framework e o tratamento do acionamento do botão é encerrado.</p>
        <p>Note o uso da anotação <code>@ViewHandler</code> na classe 
        <code>ExemploBeforeActionViewSwing</code>. Isso é necessário para todas
        as classes que são responsáveis pelo tratamento de eventos específicos 
        da API de interface gráfica, exceto pelas classes que herdam de 
        <code>BaseThinlet</code>. Podemos simplificar a regra do seu uso da 
        seguinte forma: quando se usa Swing, deve-se utilizá-la na 
        classe do componente gráfico ou do objeto utilizado como handler no 
        construtor do <code>SwingBinder</code>; quando se usa Thinlet, só é 
        necessário utilizar essa anotação se o objeto que trata os eventos for
        um POJO.</p>
      </subsection>
      <subsection name="Usando @AfterAction">
        <p>Após a execução de um método do form pode ser necessário utilizar
        algum recurso da API gráfica, como, por exemplo, fechar a janela sendo
        exibida. A fim de possibilitar isso, o genesis suporta a anotação
        <code>@AfterAction</code>, que deve ser colocada no método da view a ser
        invocado. Sua sintaxe é muito similar a da anotação
        <code>@BeforeAction</code>, exceto que o método que possui a anotação
        deve
        retornar <code>void</code>. Abaixo há um exemplo do uso. Primeiro temos
        a definição da view Thinlet:</p>
<source>
public class ExemploAfterActionViewThinlet extends BaseDialogThinlet {
   public ExemploAfterActionViewThinlet() {
      // lógica de inicializacao
      bind(new ExemploAfterActionForm());
   }

   @AfterAction("salvar")
   public void fechaJanela() {
      getDialog().dispose();
   }

   // ...
}
</source>
        <p>A view equivalente em Swing:</p> 
<source>
@ViewHandler
public class ExemploAfterActionViewSwing extends JDialog {
   public ExemploAfterActionView() {
      // lógica de inicializacao
      new SwingBinder(this, new ExemploAfterActionForm()).bind();
   }

   @AfterAction("salvar")
   public void fechaJanela() {
      dispose();
   }

   // ...
}
</source>
        <p>Por fim, temos o form:</p> 
<source>
@Form
public class ExemploAfterActionForm {
   @Action
   public void salvar() {
      // implementa aqui a lógica para salvar
   }

   // ...
}
</source>
        <p>No exemplo acima, quando o botão com o nome <code>salvar</code> é
        chamado, o método <code>salvar()</code> é invocado no form. Após a
        execução, o método <code>fechaJanela()</code> na view, que está anotado
        como <code>@AfterAction("salvar")</code> é executado. Assim como no caso 
        de <code>@BeforeAction</code>, caso o nome do método na view também 
        fosse <code>salvar()</code> não seria necessário passá-lo na 
        anotação.</p>
      </subsection>
      <subsection name="Atualizando a tela programaticamente">
        <p>Algumas vezes os valores de um form podem ser atualizados
        externamente ou diretamente pela view - para coordenar a iteração de
        diversos forms, por exemplo. Contudo, visto que estas alterações não
        foram gerenciadas pelo genesis, tanto o cache interno do framework como
        as informações exibidas ficam fora de sincronia, causando uma série de
        problemas. Há opções na API do genesis permitem contornar esse
        cenário.</p>
        <p>A classe <code>ActionInvoker</code> possui métodos que podem ser 
        usados independente da API gráfica. O método estático 
        <code>refresh(form)</code> atualiza todas as interfaces gráficas ligadas
        ao form com as informações mais recentes contidas no mesmo.</p>
        <p>Para uso específico com Thinlet, existem os métodos 
        <code>refreshView()</code>, <code>refreshView(Object)</code> e
        <code>refreshViewFromForm(Object)</code> declarados em 
        <code>BaseThinlet</code>.</p>
        <p>O primeiro método, <code>refreshView()</code>, deve ser utilizado
        quando somente um form está associado a view.
        <code>refreshView(Object)</code> recebe como parâmetro o widget ao
        qual um ou vários forms estão ligados e processa quaisquer atualizações
        encontradas neles. <code>refreshViewFromForm(Object)</code> atualiza o
        widget ligado ao form passado como parâmetro. Um exemplo de tais métodos 
        pode ser visto abaixo:</p>
<source>
public class ExemploRefreshViewView extends BaseThinlet {
   private ExemploRefreshViewForm form;

   public ExemploRefreshViewView() {
      // lógica de inicializacao
      bind(form = new ExemploRefreshViewForm());
   }

   public void selecionaEntidadeRelacionada() {
      // exibe uma tela auxiliar de selecao de entidade e retorna
      Entidade entidade = new ConsultaEntidadeView().getEntidade();

      if (entidade != null) {
         form.setEntidade(entidade);

         /* Todas as chamadas abaixo são equivalentes quando somente um form 
         esta ligado a view. Somente uma delas é necessaria */
         ActionInvoker.refresh(form);
         refreshView();
         refreshView(getDesktop());
         refreshViewFromForm(form);
      }
   }

   // ...
}
</source>
        <p>Para uso específico de outro binder como Swing, existe o método
        <code>refresh()</code> declarado em <code>AbstractBinder</code>.</p>
<source>
public class ExemploRefreshViewView extends JFrame {
   private ExemploRefreshViewForm form;
   private SwingBinder binder;

   public ExemploRefreshViewView() {
      // lógica de inicializacao
      binder = new SwingBinder(this, form = new ExemploRefreshViewForm());
      binder.bind();
   }

   public void selecionaEntidadeRelacionada() {
      // exibe uma tela auxiliar de selecao de entidade e retorna
      Entidade entidade = new ConsultaEntidadeView().getEntidade();

      if (entidade != null) {
         form.setEntidade(entidade);

         /* Todas as chamadas abaixo são equivalentes.
            Somente uma delas é necessaria */
         ActionInvoker.refresh(form);
         binder.refresh();
      }
   }

   // ...
}
</source>
<source>
@Form
public class ExemploRefreshViewForm {
   private Entidade entidade;
   // ...

   public Entidade getEntidade() {
      return entidade;
   }

   public void setEntidade(Entidade entidade) {
      this.entidade = entidade;
   }

   // ...
}
</source>
      </subsection>
      <subsection name="Invocando ações do form diretamente">
        <p>Em algumas ocasiões pode ser necessário invocar uma ou mais ações do
        form de dentro de um método da view sob determinadas condições
        específicas e o uso de <code>@BeforeAction</code> e
        <code>@AfterAction</code> não é possível. Embora a execução direta de um
        método do form seja possível, ela ocorrerá sem que o framework seja
        notificado disso, o que terá diversas conseqüências como a não
        atualização da interface gráfica, por exemplo.</p>
        <p>Para chamar um método do form e manter o sincronismo automático deve-
        se utilizar o método 
        <code>ActionInvoker.invoke(form, nomeDeAcao)</code>. O segundo parâmetro
        é o nome do método do form a ser invocado. Para o uso com Thinlet é 
        possível também utilizar os métodos 
        <code>invokeFormAction(String)</code> ou 
        <code>invokeFormAction(Object,String)</code> de 
        <code>BaseThinlet</code>.
        Para uso com Swing é possível utilizar o método
        <code>invokeAction(String)</code>.
        As ações também incluem 
        <code>@DataProvider</code>, que será explicado numa seção futura. Um 
        exemplo de uso da API genérica pode ser visto abaixo:</p>
<source>
public class ExemploInvokeFormActionView extends JFrame {
   private ExemploInvokeFormActionForm form;
   private SwingBinder binder;

   public ExemploInvokeFormActionView() {
      // lógica de inicializacao
      binder = new SwingBinder(this, form = new ExemploInvokeFormActionForm());
      binder.bind();
   }

   public void selecionaIndicesFinanceiros() throws Exception {
      BigDecimal indice = //... obtem o indice a partir do input de outra
                          // janela, por exemplo
      form.setIndice(indice);
      ActionInvoker.invoke(form, "recalculaTotais");
      // Ou, da mesma forma:
      // binder.invokeAction("recalculaTotais");
   }

   // ...
}
</source>
<source>
@Form
public class ExemploInvokeFormActionForm {
   private BigDecimal indice;
   // ...

   public BigDecimal getIndice() {
      return indice;
   }

   public void setIndice(BigDecimal indice) {
      this.indice = indice;
   }

   @Action
   public void recalculaTotais() {
      // logica de recálculo
   }
}
</source>
      </subsection>
    </section>
  </body>
</document>