<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Aplicações exemplo - useradmin</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="Instalação do exemplo useradmin">
      <p>A instalação do exemplo <code>useradmin</code> é relativamente simples.
      A distribuição do exemplo <code>useradmin</code> se encontra nos pacotes
      de distribuição do useradmin ou distribuição completa do genesis que podem
      ser encontrados <a href="download.html">aqui</a>.
      A distribuição de todos exemplos do genesis já vem preparadas para rodar
      como aplicação independente (modo standalone/local) ou sobre o servidor
      de aplicações <a href="http://www.jboss.org/">JBoss</a>, que é um
      servidor gratuito e open-source. Isso não significa que o genesis só
      rode nesse servidor; o genesis foi desenvolvido totalmente compatível
      com as especificações J2EE.</p>
      <p>Para executar o useradmin é necessário utilizar a ferramenta 
      <a href="http://ant.apache.org/">Ant</a>. Para executar o exemplo em modo
      remoto, é necessário também o servidor de aplicações 
      <a href="http://www.jboss.org/">JBoss</a></p>
      <p>Aprenda <a href="#Execução em modo local">aqui</a> como executar o
      exemplo em modo local, ou seja, sem a necessidade de um servidor de
      aplicações.</p>
      <p>Aprenda <a href="#Execução em modo remoto">aqui</a> como executar o
      exemplo em modo remoto, ou seja, utilizando o servidor de aplicações.</p>
      <p>Para usar a parte SWT do exemplo, leia as instruções <a 
      href="configuring_swt.html">aqui</a>.</p>
    </section>
    <section name="Propósito do exemplo useradmin">
      <p>O exemplo useradmin tem como propósito mostrar ao usuário a maioria das
      funcionalidades que o projeto genesis oferece, e também demonstra a
      remotabilidade transparente, pois com o mesmo código-fonte é possível
      executar o exemplo utilizando tanto chamadas remotas como locais.</p>
      <p> O exemplo possui dois diretórios de código fonte: o diretório
      <code>&lt;DISTRIBUIÇÃO_DO_GENESIS&gt;/samples/useradmin/modules/client/src
      </code> e o diretório
      <code>&lt;DISTRIBUIÇÃO_DO_GENESIS&gt;/samples/useradmin/modules/shared/src
      </code> que correspondem respectivamente ao módulo cliente da aplicação e
      ao módulo comum entre cliente e servidor. </p>
      <p>No diretório de fontes do módulo cliente encontramos classes relativas
      à interface gráfica. Temos três possibilidades de interface gráfica nesse
      exemplo: <a href="http://www.thinlet.com/">Thinlet</a>,
      <a href="http://java.sun.com/products/jfc/">Swing</a> e
      <a href="http://www.eclipse.org/swt/">SWT</a>. Para utilizar SWT, veja as 
      instruções <a href="configuring_swt.html">aqui</a>.</p>
      <p>No pacote <code>net.java.dev.genesis.samples.useradmin.ui</code> 
      encontramos arquivos que definem a lógica da tela, ou seja, seu 
      comportamento (regras para habilitar campos, definição de ações da tela, 
      etc). Chamamos essas classes de <b>forms</b> e <b>são independentes</b>
      de API gráfica. Por exemplo, <code><b>UserListForm.java</b></code> é uma 
      classe Java cujos campos representam os dados da tela e que possui métodos 
      que representam as ações da tela.</p>
      <p>Na parte Thinlet (pacote <code>net.java.dev.genesis.samples.useradmin.ui.thinlet</code>)
      encontramos dois tipos de arquivos fontes que definem o visual de uma tela.
      Para exemplificar, consideremos a tela de pesquisa do useradmin:</p>
      <ul>
        <li><code><b>user-list.xml</b></code>: arquivo XML de acordo com o
        padrão Thinlet que descreve como os componentes gráficos estão dispostos
        na tela. Os nomes dos componentes correspondem aos nomes de campos e
        métodos do formulário da tela (form). </li>
        <li><code><b>UserListView.java</b></code>: classe Java responsável pela
        tela, onde é definido o tamanho da tela, qual é o arquivo xml da tela,
        além de fazer o <code>binding</code> de um form a tela, ou seja, indica
        qual form será utilizado para tratar os dados e eventos dessa tela.
        Outros métodos auxiliares podem existir nessa classe para possibilitar
        que essa tela possa abrir outras telas ou programaticamente executar
        ações dessa tela.</li>
      </ul>
      <p>Na parte Swing (pacote <code>net.java.dev.genesis.samples.useradmin.ui.swing</code>
      e sub-pacotes) temos o esqueto da tela codificado em Swing. Para exemplificar, 
      consideremos a tela de pesquisa do useradmin:</p>
      <ul>
         <li><code><b>UserListView.java</b></code>: classe Java responsável pela
         tela e codificada utilizando Swing. Nela definimos a aparência da tela,
         como tamanho, componentes gráficos. Nela também fazemos o <code>binding</code>
         da tela para um determinado form, ou seja, qual será o form utilizado
         para tratar os eventos da tela. Outros métodos auxiliares podem existir 
         nessa classe para possibilitar que essa tela possa abrir outras telas 
         ou programaticamente executar ações dessa tela.</li>
      </ul>
      <p>Na parte SWT (pacote <code>net.java.dev.genesis.samples.useradmin.ui.swt</code>
      e sub-pacotes) temos o esqueto da tela codificado em SWT. Para exemplificar, 
      consideremos a tela de pesquisa do useradmin:</p>
      <ul>
         <li><code><b>UserListView.java</b></code>: classe Java responsável pela
         tela e codificada utilizando SWT. Nela definimos a aparência da tela,
         como tamanho, componentes gráficos. Nela também fazemos o <code>binding</code>
         da tela para um determinado form, ou seja, qual será o form utilizado
         para tratar os eventos da tela. Outros métodos auxiliares podem existir 
         nessa classe para possibilitar que essa tela possa abrir outras telas 
         ou programaticamente executar ações dessa tela.</li>
      </ul>
      <p>No diretório de fontes do módulo shared encontramos os arquivos fontes
      relativos a lógica de negócio (command) e os arquivos fontes relativos a
      entidades mapeadas em tabelas no banco de dados (databeans). Um exemplo de
      arquivo command é o arquivo
      <code>net.java.dev.genesis.samples.useradmin.business.UserCreateCommand
      </code>:</p>
<source>
public class UserCreateCommand extends AbstractHibernateCommand {

   @Transactional
   public Serializable createUser(final User user) throws Exception {
      return getSession().save(user);
   }

}
</source>
      <p>Veja como os commands podem ser bem simples e objetivos. Esse command
      mostrado possui apenas um método transacional que salva um usuário no
      banco de dados. O commit e/ou rollback da transação é tratada
      automaticamente pelo genesis. </p>
      <p>Como exemplo de um databean temos o
      <code>net.java.dev.genesis.samples.useradmin.databeans.User</code> que
      representa uma entidade Usuário que é mapeada para uma tabela utilizando
      tags do XDoclet:</p>
<source>
/**
 * @hibernate.class
 *
 * @hibernate.query name="User.findByRole"
 *          query="from User u where u.role.code = :roleCode"
 */
public class User implements Serializable {
   private Long id;
   private String name;
   private String login;
   private String password;
   private String email;
   private Date birthday;
   private String address;
   private Role role;
   private Country country;
   private State state;

   /**
    * @hibernate.property
    */
   public Date getBirthday() {
      return birthday;
   }

   public void setBirthday(Date birthday) {
      this.birthday = birthday;
   }

   /**
    * @hibernate.property
    type="net.java.dev.genesis.samples.useradmin.databeans.CountryType"
    */
   public Country getCountry() {
      return country;
   }

   public void setCountry(Country country) {
      this.country = country;
   }

   /**
    * @hibernate.property
    */
   public String getEmail() {
      return email;
   }

   public void setEmail(String email) {
      this.email = email;
   }

   /**
    * @hibernate.property
    */
   public String getAddress() {
      return address;
   }

   public void setAddress(String address) {
      this.address = address;
   }

   /**
    * @hibernate.many-to-one
    */
   public Role getRole() {
      return role;
   }

   public void setRole(Role role) {
      this.role = role;
   }

   /**
    * @hibernate.id generator-class="increment"
    */
   public Long getId() {
      return id;
   }

   public void setId(Long id) {
      this.id = id;
   }

   /**
    * @hibernate.property
    */
   public String getLogin() {
      return login;
   }

   public void setLogin(String login) {
      this.login = login;
   }

   /**
    * @hibernate.property
    */
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }

   /**
    * @hibernate.property
    */
   public String getPassword() {
      return password;
   }

   public void setPassword(String password) {
      this.password = password;
   }

   /**
    * @hibernate.property
    type="net.java.dev.genesis.samples.useradmin.databeans.StateType"
    */
   public State getState() {
      return state;
   }

   public void setState(State state) {
      this.state = state;
   }
}
</source>
      <p>O databean é uma classe com os getters e setters segundo a
      especificação de JavaBeans. Ele não precisa implementar nenhuma interface
      e nem estender nenhuma classe abstrata. Convém implementar
      <code>java.io.Serializable</code> para utilizá-lo como parâmetro e/ou
      retorno de chamadas remotas.</p>
    </section>
    <section name="Execução em modo local">
       <p>Para executar o exemplo em modo local é necessário:</p>
       <ul>
          <li><a href="http://ant.apache.org/">Ant</a>; utilize de 
          preferência a última versão (que no momento é Ant 1.7.0)</li>
       </ul>
       <p>Siga os passos abaixo:</p>
       <ul>
        <li>Faça uma cópia do arquivo <code>buid.properties.sample</code> e
        modifique o nome da cópia para <code>build.properties</code></li>
        <li>Faça a edição do novo arquivo <code>build.properties</code>
        modificando ou comentado os valores das propriedades de acordo com o
        ambiente de execução. Veja um possível exemplo abaixo:</li>
<source>
## Build properties sample ##

# Indicamos aqui que o exemplo não deve rodar em modo remoto
remote.mode=false
   
# Como estamos rodando somente em modo local, é necessário utilizar um banco
# de dados, que no caso é o HSQLDB
jdbc.driver=target/hsqldb.jar
</source>
        <li>Na linha de comando, execute o script ant com o seguinte comando:
<source>
c:\genesis\samples\useradmin>ant install
</source>
        Esse comando irá iniciar o processo de instalação. Nesse caso, irá 
        apenas copiar as bibliotecas necessárias para o diretório onde se 
        encontra o jar principal de sua aplicação.</li>
        <li>Para executar o exemplo, use a task do ant:</li>
<source>
c:\genesis\samples\useradmin>ant run:local
</source>
        <li>Também é possível executar com a linha de comando:</li>
<source>
c:\genesis\samples\useradmin\target>java -jar useradmin-local-weaved.jar
</source>
        <li>Ou utilizar o duplo clique no arquivo <code>useradmin-local-weaved.jar</code></li>
      </ul>
    </section>
    <section name="Execução em modo remoto">
      <p>Para executar o exemplo em modo remoto é necessário:</p>
       <ul>
          <li><a href="http://ant.apache.org/">Ant</a>; utilize de 
          preferência a última versão (que no momento é Ant 1.7.0)</li>
          <li>Servidor de aplicações <a href="http://www.jboss.org/">JBoss</a>,
          utilize de preferência as últimas versões das séries 3.2.x, 4.0.x ou 4.2.x</li>
       </ul>
      <p>Para rodar o exemplo em modo remoto, siga os seguintes passos:</p>
      <ul>
        <li>Faça uma cópia do arquivo <code>buid.properties.sample</code> e
        modifique o nome da cópia para <code>build.properties</code></li>
        <li>Faça a edição do novo arquivo <code>build.properties</code>
        modificando ou comentado os valores das propriedades de acordo com o
        ambiente de execução. Veja um possível exemplo abaixo:</li>
<source>
## Build properties sample ##

# Indicamos aqui que não queremos utilizar o modo local, mas se preferir utilizar
# basta omitir ou comentar essa linha
local.mode=false
   
# Indicamos aqui onde está instalado o servidor JBoss
jboss.home=/opt/jboss-4.2.0.GA
</source>
        <li>Na linha de comando, execute o script ant com o seguinte comando:
<source>
c:\genesis\samples\useradmin>ant install
</source>
        Esse comando irá iniciar o
        processo de instalação do exemplo no servidor, criando um diretório chamado
        "useradmin" na pasta <code>server</code> do JBoss contendo a aplicação
        do exemplo e todas as suas dependências e configurações.</li>
        <li>Uma vez finalizado o processo de instalação, o JBoss poderá ser
        iniciado através do comando:</li>
<source>
&lt;DIRETÓRIO_DO_JBOSS&gt;\bin>run -c useradmin
</source>
        <li>Após a completa inicialização do JBoss, o exemplo poderá ser
        executado através da URL <a href="http://localhost:8080/useradmin/">
        http://localhost:8080/useradmin/</a>. Através desta URL, o link
        "<a href="http://localhost:8080/useradmin/application/remote.jnlp">
        Run remote User Admin</a>" fará com que a aplicação
        exemplo seja baixada, instalada e executada no computador do
        usuário, utilizando-se tecnologia Java Web start</li>
        <li>Outra opção de execução do exemplo é através de uma task do ant que
        irá iniciar o exemplo com a utilização de chamadas remotas ao JBoss</li>
<source>
c:\genesis\samples\useradmin>ant run:remote
</source>
        <li>Se você deixou habilitado o modo local, também é possível executar o
        exemplo via Java Web Start utilizando o link 
        "<a href="http://localhost:8080/useradmin/application/local.jnlp">Run local User Admin</a>"
        da URL <a href="http://localhost:8080/useradmin/">http://localhost:8080/useradmin/</a>.</li>
       </ul>
    </section>
    <section name="Considerações">
      <p>Através desse exemplo, mostramos como um projeto é estruturado e como
      usar as funcionalidades do genesis. É recomendado utilizar o <a href=
      "empty_project.html">projeto vazio</a> para iniciar um projeto baseado no
      genesis e usar esse exemplo como uma referência.</p>
    </section>
  </body>
</document>