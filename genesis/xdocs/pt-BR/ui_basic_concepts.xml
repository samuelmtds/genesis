<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Modelo de componentes de interface gráfica</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Conceitos básicos de componentes de interface gráfica">
      <p>O modelo de componentes de interface gráfica do genesis é bastante
      expressivo embora simples e baseia-se em grande parte no uso de <b>
      anotações</b>. Estas anotações não são ainda interpretadas como metadados
      do Java 5.0, definidos pela JSR-175, mas são utilizados de maneira similar
      a tags do XDoclet. Os exemplos abaixo tornarão o uso claro.</p>
      <p>Os seguintes conceitos e/ou características são abordados abaixo:
      <ul>
        <li><a href="#Tipos de componentes de interface gráfica">Tipos de
        componentes de interface gráfica</a></li>
        <li><a href="#Implementando ações no form e na view">Implementando ações
        no form e na view</a></li>
      </ul>
      </p>
    </section>
    <section name="Tipos de componentes de interface gráfica">
      <p>A fim de atingir as metas de simplicidade e testabilidade, dois tipos
      de componente são combinados para formar a interface gráfica: uma
      <b>View</b> e um <b>Form</b>. Uma view é uma classe que realiza as
      operações específicas da API gráfica utilizada, enquanto o form é um
      simples JavaBean que contém a lógica de interface, é desacoplado da API
      gráfica e pode ser até mesmo reutilizado com outra API.</p>
      <p>É importante salientar que o fato de o form estar desacoplado da API
      gráfica e ser apenas um JavaBean têm diversas conseqüências úteis para o
      desenvolvedor, como por exemplo:
        <ul>
          <li>Pode-se escrever testes unitários para a lógica de negócios.</li>
          <li>O form pode estender qualquer classe e a herança pode ser
          utilizada para compartilhar características comuns.</li>
          <li>A separação de código motiva o desenvolvedor a programar de forma
          mais clara e inteligível.</li>
          <li>Será possível utilizar o mesmo form, sem modificações, numa
          interface Swing, por exemplo, tão logo o genesis suporte essa API</li>
        </ul>
      </p>
      <p>Essa arquitetura proposta, conforme mencionado no último item, permite
      que o mesmo modelo de form possa ser utilizado em diversas views.
      Atualmente o genesis suporta apenas Thinlet como modelo de implementação
      de views, mas versões futuras proverão suporte a Swing e até mesmo Thinlet
      em PDAs compatíveis com PersonalJava.</p>
    </section>
    <section name="Implementando ações no form e na view">
      <p>Embora o genesis possibilite que seja feito o binding de ações do form
      com controles na tela, nada impede o uso do recurso já presente no Thinlet
      de se invocar métodos configurando-os no xml da tela. Desta forma, uma
      questão recorrente na mente dos desenvolvedores é quando usar
      <code>@Action</code> e quando utilizar <code>action="metodo()"</code>
      diretamente na classe da view. Alguns princípios básicos podem ser usados
      para se tomar esta decisão.</p>
      <p>Se uma ação modifica o form ou não está ligada a API gráfica, esta deve
      ser implementada no form com o uso de <code>@Action</code>. Se a resposta
      a determinado controle é simplesmente exibir uma nova tela, janela de
      diálogo ou alguma tarefa específica da API gráfica sendo utilizada, deve-
      se implementá-la na view e acioná-la com <code>action="metodo()"</code>.
      Porém, existem situações não tão simples e outras nas quais a manipulação
      do form e da view se misturam. Estes casos são considerados abaixo.</p>
      <subsection name="Usando @BeforeAction">
        <p>Consideremos o seguinte exemplo: deve-se implementar a exclusão de um
        dado. Mas antes de exclui-lo o usuário deve confirmar a operação. Essa
        confirmação poderia ser implementada exibindo uma
        <code>OptionDialog</code> para o usuário e prosseguindo com a operação
        somente se ele concordasse. A operação de exclusão não é específica da
        API gráfica e, por tanto, deve ser implementada no form. Como
        implementar isso?</p>
        <p>A fim de se executar um método na interface gráfica antes de invocar
        um método no form - e até mesmo impedir a execução do mesmo - utiliza-se
        a anotação <code>@BeforeAction</code>. Esta anotação deve ser colocada
        no
        método da view que se deseja executar antes do método do form e pode
        tanto retornar <code>boolean</code> como <code>void</code>. Quando o
        método retorna <code>false</code> o método no form não é invocado.</p>
        <p>Se o nome do método na view for o mesmo do método no form não é
        necessário utilizar nenhum parâmetro adicional para a anotação. Em
        certos casos, porém, o nome do método na view não pode ser o mesmo
        utilizado no form. Para indicar a execução de qual método do form deve
        ser precedida da execução do método na view, coloca-se ao lado da
        anotação o nome do método no form. Um exemplo completo de uso encontra-
        se abaixo. Primeiro, a view:</p>
<source>
public class ExemploBeforeActionView extends BaseThinlet {
   public ExemploBeforeActionView() {
      // lógica de inicializacao
      bind(new ExemploBeforeActionForm());
   }

   /**
    * @BeforeAction excluir
    */
   public boolean confirmaExclusao() {
      return OptionDialog.displayYesNo(this, "Excluindo registro...",
            "Deseja realmente excluir o registro?") == Option.YES;
   }

   // ...
}
</source>
        <p>Abaixo temos o form:</p>
<source>
/**
 * @Form
 */
public class ExemploBeforeActionForm {
   /**
    * @Action
    */
   public void excluir() {
      // implementa aqui a lógica de exclusão.
   }

   // ...
}
</source>
        <p>Quando o botão com <code>name="excluir"</code> é acionado, o genesis
        invoca o método <code>confirmaExclusao()</code> em
        <code>ExemploBeforeActionView</code> visto que este está configurado com
        a
        anotação <code>@BeforeAction excluir</code>. Caso o nome do método na
        view
        fosse <code>excluir</code> não seria necessário passar o nome do método
        como parâmetro para a anotação.</p>
        <p>Visto que <code>confirmaExclusao()</code> possui como retorno um
        <code>boolean</code>, o método no form só será invocado quando o retorno
        for <code>true</code>. No exemplo específico, isso só acontecerá quando
        o usuário escolher a opção "Sim" na janela que será exibida. Quando a
        confirmação ocorre, o método <code>excluir()</code> é invocado pelo
        framework e o tratamento do acionamento do botão, encerrado.</p>
      </subsection>
      <subsection name="Usando @AfterAction">
        <p>Após a execução de um método do form pode ser necessário utilizar
        algum recurso da API gráfica, como, por exemplo, fechar a janela sendo
        exibida. A fim de possibilitar isso o genesis suporta a anotação
        <code>@AfterAction</code>, que deve ser colocada no método da view a ser
        invocado. Sua sintaxe é muito similar a da anotação
        <code>@BeforeAction</code>, exceto que o método que possui a anotação
        deve
        retornar <code>void</code>. Abaixo há um exemplo do uso:</p>
<source>
public class ExemploAfterActionView extends BaseDialogThinlet {
   public ExemploAfterActionView() {
      // lógica de inicializacao
      bind(new ExemploAfterActionForm());
   }

   /**
    * @AfterAction salvar
    */
   public void fechaJanela() {
      getDialog().dispose();
   }

   // ...
}
</source>
<source>
/**
 * @Form
 */
public class ExemploAfterActionForm {
   /**
    * @Action
    */
   public void salvar() {
      // implementa aqui a lógica para salvar
   }

   // ...
}
</source>
        <p>No exemplo acima, quando o botão com <code>name="salvar"</code> é
        chamado, o método <code>salvar()</code> é invocado no form. Após a
        execução, o método <code>fechaJanela()</code> na view, que está anotado
        como <code>@AfterAction salvar</code> é executado. Assim como no caso de
        <code>@BeforeAction</code>, caso o nome do método na view também fosse
        <code>salvar()</code> não seria necessário passá-lo na anotação.</p>
      </subsection>
      <subsection name="Usando refreshView(..) e refreshViewFromForm(Object)">
        <p>Algumas vezes os valores de um form podem ser atualizados
        externamente ou diretamente pela view - para coordenar a iteração de
        diversos forms, por exemplo. Contudo, visto que estas alterações não
        foram gerenciadas pelo genesis, tanto o cache interno do framework como
        as informações exibidas ficam fora de sincronia, causando uma série de
        problemas. Os métodos <code>refreshView()</code>,
        <code>refreshView(Object)</code> e
        <code>refreshViewFromForm(Object)</code> podem ser utilizados nestes
        cenários.</p>
        <p>O primeiro método, <code>refreshView()</code>, deve ser utilizado
        quando somente um form está associado a view.
        <code>refreshView(Object)</code> recebe como parâmetro o widget ao
        qual um ou vários forms estão ligados e processa quaisquer atualizações
        encontradas neles. <code>refreshViewFromForm(Object)</code> atualiza o
        widget ligado ao form passado como parâmetro. Um exemplo de uso do
        primeiro método pode ser visto abaixo:</p>
<source>
public class ExemploRefreshViewView extends BaseThinlet {
   private ExemploRefreshViewForm form;

   public ExemploRefreshViewView() {
      // lógica de inicializacao
      bind(form = new ExemploRefreshViewForm());
   }

   public void selecionaEntidadeRelacionada() {
      // exibe uma tela auxiliar de selecao de entidade e retorna
      Entidade entidade = new ConsultaEntidadeView().getEntidade();

      if (entidade != null) {
         form.setEntidade(entidade);
         refreshView();
      }
   }

   // ...
}
</source>
<source>
/**
 * @Form
 */
public class ExemploRefreshViewForm {
   private Entidade entidade;
   // ...

   public Entidade getEntidade() {
      return entidade;
   }

   public void setEntidade(Entidade entidade) {
      this.entidade = entidade;
   }

   // ...
}
</source>
      </subsection>
      <subsection name="Usando invokeFormAction(..)">
        <p>Em algumas ocasiões pode ser necessário invocar uma ou mais ações do
        form de dentro de um método da view sob determinadas condições
        específicas e o uso de <code>@BeforeAction</code> e
        <code>@AfterAction</code> não é possível. Embora a execução direta de um
        método do form seja possível, ela ocorrerá sem que o framework seja
        notificado disso, o que terá diversas conseqüências como a não
        atualização da interface gráfica, por exemplo.</p>
        <p>Para chamar um método do form e manter o sincronismo automático deve-
        se utilizar os métodos <code>invokeFormAction(String)</code> ou
        <code>invokeFormAction(Object,String)</code>. O parâmetro
        <code>String</code> que ambos recebem é o nome do método do form a ser
        invocado. A segunda versão do método aceita a instância do form em que o
        método deve ser invocado e é útil quando vários forms estão ligados a
        view. Um exemplo de uso da primeira versão do método encontra-se abaixo:
        </p>
<source>
public class ExemploInvokeFormActionView extends BaseThinlet {
   private ExemploInvokeFormActionForm form;

   public ExemploInvokeFormActionView() {
      // lógica de inicializacao
      bind(form = new ExemploInvokeFormActionForm());
   }

   public void selecionaIndicesFinanceiros() {
      BigDecimal indice = //... obtem o indice a partir do input de outra
                          // janela, por exemplo
      form.setIndice(indice);
      invokeFormAction("recalculaTotais");
   }

   // ...
}
</source>
<source>
/**
 * @Form
 */
public class ExemploInvokeFormActionForm {
   private BigDecimal indice;
   // ...

   public BigDecimal getIndice() {
      return indice;
   }

   public void setIndice(BigDecimal indice) {
      this.indice = indice;
   }

   /**
    * @DataProvider objectField=totais
    */
   public List recalculaTotais() {
      // logica de recálculo
   }
}
</source>
      </subsection>
    </section>
  </body>
</document>