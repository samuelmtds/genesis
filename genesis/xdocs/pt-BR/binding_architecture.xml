<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Arquitetura do binding</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Arquitetura do binding">
      <p align="justify">Esta seção descreve como a arquitetura do binding, uma
      das partes mais inovadoras e interessantes do genesis, funciona
      internamente. Os detalhes explicados aqui podem ser usados para se
      escrever testes unitários dos forms, obter notificação de eventos ou para
      customizar a forma com que certo componente é ligado a view, por exemplo.
      </p>
      <p align="justify">Conforme salientado na <a
      href="advanced_introduction.html">introdução do guia avançado</a>, toda a
      API e semântica aqui documentados podem ser alterados de forma
      incompatível em futuras versões do genesis e é aconselhável notificar os
      desenvolvedores caso algum recurso seja usado.</p>
      <ul>
         <li><a href="#Principais elementos do binding">Principais elementos do
         binding</a></li>
         <li><a href="#Modelo de metadados do form">Modelo de metadados do form
         </a></li>
      </ul>
    </section>
    <section name="Principais elementos do binding">
      <p>Classes em quatro pacotes do genesis estão envolvidas no processo de
      binding. Os pacotes são:</p>
      <ul>
        <li><b><code>net.java.dev.genesis.ui.metadata</code></b>: contém um
        modelo que representa os metadados do form do genesis</li>
        <li><b><code>net.java.dev.genesis.ui.controller</code></b>: contém as
        interfaces responsáveis pelo controle e notificação de mudanças do
        estado do form</li>
        <li><b><code>net.java.dev.genesis.ui.thinlet.metadata</code></b>:
        contém um modelo que representa os metadados da view em
        <code>Thinlet</code></li>
        <li><b><code>net.java.dev.genesis.ui.thinlet</code></b>: contém as
        classes responsáveis pelo binding <code>Thinlet</code></li>
      </ul>
      <p>Cada um dos pacotes acima será detalhado nas seções subseqüentes.</p>
    </section>
    <section name="Modelo de metadados do form">
      <p>Conforme explicado na documentação dos aspectos, todo o modelo de
      metadados de um form é  construído através de uma instância de
      <code>net.java.dev.genesis.ui.metadata.FormMetadataFactory</code>, cuja
      interface é:</p>
<source>
public interface FormMetadataFactory {
    public FormMetadata getFormMetadata(Class formClass);
}
</source>
      <p>Para mais detalhes de como utilizar uma implementação customizada desta
      interface, basta consultar a subseção da <a
      href="aspects.html#Instanciando_os_metadados">documentação dos
      aspectos</a> do genesis que a descreve.</p>
      <p><code>net.java.dev.genesis.ui.metadata.FormMetadata</code> é o ponto
      inicial da árvore de metadados, contendo:</p>
      <ul>
        <li>a classe que representa, obtida através de
        <code>getFormClass()</code> e definida através do construtor
        <code>FormMetadata(Class)</code></li>
        <li>condições JXPath nomeadas, obtidas através de
        <code>getNamedConditions()</code> e
        <code>getNamedCondition(String conditionName)</code> e adicionadas
        através do método <code>addNamedCondition(String key,
        org.apache.commons.jxpath.CompiledExpression value)</code></li>
        <li>metadados das propriedades, obtidos através de
        <code>getFieldMetadatas()</code> e
        <code>getFieldMetadata(String fieldName)</code> e adicionadas
        através do método <code>addFieldMetadata(String fieldName,
        net.java.dev.genesis.ui.metadata.FieldMetadata fieldMetadata)</code>
        </li>
        <li>metadados dos métodos, obtidos através de
        <code>getMethodMetadatas()</code>,
        <code>getMethodMetadata(String methodName)</code> e
        <code>getMethodMetadata(net.java.dev.genesis.reflection.MethodEntry
        methodEntry)</code>
        e adicionados através do método <code>addMethodMetadata(String
        methodName,
        net.java.dev.genesis.ui.metadata.MethodMetadata methodMetadata)</code>
        </li>
        <li>métodos utilitários para obter metadados das ações e provedores de
        dados, <code>getActionMetadatas()</code> e
        <code>getMethodMetadatas()</code>, que utilizam informações contidas
        nos metadados dos métodos para gerar os valores de retorno</li>
      </ul>
      <p>Tanto <code>FieldMetadata</code> quanto <code>ActionMetadata</code>
      estendem a classe abstrata <code>MemberMetadata</code>, que contém as
      seguintes propriedades:</p>
      <ul>
        <li>nome, retornado pelo método abstrato <code>getName()</code></li>
        <li>condição de habilitação, obtido através de
        <code>getEnabledCondition()</code> e definido por
        <code>setEnabledCondition(org.apache.commons.jxpath.CompiledExpression
        enabledCondition)</code></li>
        <li>condição de visibilidade, obtido através de
        <code>getVisibleCondition()</code> e definido por
        <code>setVisibleCondition(org.apache.commons.jxpath.CompiledExpression
        visibleCondition)</code></li>
      </ul>
      <p>Além dos métodos herdados de <code>MemberMetadata</code>,
      <code>FieldMetadata</code> também contém as seguintes propriedades:</p>
      <ul>
        <li>condição de limpeza do valor do campo (
        <code>getClearOnCondition()</code> e
        <code>setClearOnCondition(org.apache.commons.jxpath.CompiledExpression
        clearOnCondition)</code>)</li>
        <li>conversor do valor do campo (<code>getConverter()</code> e
        <code>setConverter(org.apache.commons.beanutils.Converter
        converter)</code></li>
        <li>a implementação de
        <code>net.java.dev.genesis.resolvers.EmptyResolver</code> a ser usada
        para este campo (<code>getEmptyResolver()</code> e
        <code>setEmptyResolver(EmptyResolver emptyResolver)</code>)</li>
        <li>o valor considerado vazio para este campo (
        <code>getEmptyValue()</code> e <code>setEmptyValue(Object value)</code>)
        </li>
        <li>a implementação de
        <code>net.java.dev.genesis.equality.EqualityComparator</code> a ser
        usada para este campo (<code>getEqualityComparator()</code> e
        <code>setEqualityComparator(EqualityComparator equalityComparator)</code
        >)</li>
        <li>nome do campo, classe do campo e <code>boolean</code> indicando se
        este campo pode ser alterado, definidos no construtor e obtidos através
        dos métodos <code>getFieldName()</code>, <code>getFieldClass()</code> e
        <code>isWriteable()</code></li>
      </ul>
      <p><code>MethodMetadata</code> é utilizado para representar os métodos que
      sejam ações ou provedores de dados e contém as seguintes propriedades e
      métodos:</p>
      <ul>
        <li>a instância de
        <code>net.java.dev.genesis.reflection.MethodEntry</code> para o método
        que este metadado representa, inicializada a partir da instância de
        <code>java.lang.reflect.Method</code> passada no construtor e que pode
        ser obtida através do método <code>getMethodEntry()</code></li>
        <li>o nome do método, obtido através de <code>getName()</code></li>
        <li>um método <code>invoke(Object target)</code>, que invoca o método
        representado por esse metadado em <code>target</code></li>
        <li>a condição JXPath de chamada "automática" do método pelo framework,
        obtida através de <code>getCallCondition()</code> e definida pelo método
        <code>setCallCondition(org.apache.commons.jxpath.CompiledExpression
        callWhen)</code></li>
        <li>a instância de <code>ActionMetadata</code> e/ou de
        <code>DataProviderMetadata</code>, que são instanciadas dependendo dos
        valores booleanos passados ao construtor e que podem ser obtidas pelos
        métodos <code>getActionMetadata()</code> e
        <code>getDataProviderMetadata()</code></li>
      </ul>
      <p><code>ActionMetadata</code> possui, além das propriedades herdadas de
      <code>MemberMetadata</code>, apenas uma propriedade adicional:
      <code>validateBefore</code>, uma propriedade booleana que é manipulada
      através de um par de métodos get/set.</p>
      <p><code>DataProviderMetadata</code> contém diversas propriedades e
      métodos, sendo:</p>
      <ul>
        <li>nome do método provedor de dados, extraído a partir da instância de
        <code>Method</code> passada no construtor e obtida através de
        <code>getName()</code></li>
        <li>condição de "reset" dos dados, obtida através de <code>
        getClearOnCondition()</code> e definida através de
        <code>setClearOnCondition(org.apache.commons.jxpath.CompiledExpression
        clearOnCondition)</code></li>
        <li>nome do widget, obtido através de <code>getWidgetName()</code> e
        definido através de <code>setWidgetName(String widgetName)</code></li>
        <li>instância de <code>net.java.dev.genesis.reflection.FieldEntry</code>
        que representa o <code>objectField</code>, obtida através de
        <code>getObjectField()</code> e definida através do método
        <code>setObjectField(FieldEntry objectField)</code></li>
        <li>instância de <code>FieldEntry</code> que representa o
        <code>indexField</code>, obtida através de
        <code>getIndexField()</code> e definida através do método
        <code>setIndexField(FieldEntry indexField)</code></li>
        <li>propriedade booleana que indica se o provedor deverá ser invocado no
        momento do binding, obtido através de <code>isCallOnInit()</code> e
        definido através do método <code>setCallOnInit(boolean callOnInit)</code
        ></li>
        <li>o método <code>getSelectedFields(Object indexes)</code> converte o
        parâmetro recebido - que pode ser uma array de inteiros, uma array de
        <code>Integer</code>, um <code>int</code> ou um <code>Integer</code>
        para uma array de <code>int</code>.</li>
        <li>o método <code>populateSelectedFields(java.lang.Object target,
        java.util.List objectList, int[] selectedIndexes)</code> seta o
        <code>objectField</code> e o <code>indexField</code> do objeto
        <code>target</code>, se existirem, para os valores selecionados de
        acordo com os índices selecionados (<code>selectedIndexes</code>) da
        lista de objetos retornados pelo provedor (<code>objectList</code>).</li
        >
        <li><code>resetSelectedFields(Object target)</code> "limpa" o conteúdo
        do <code>objectField</code> e/ou do <code>indexField</code> em <code>
        target</code>, se existirem</li>
      </ul>
      <p>Visto que é possível customizar a criação da instância de
      <code>FormMetadata</code> e que toda a hierarquia descrita aqui está
      referenciada por ela, é possível também customizar qualquer metadado para
      qualquer classe, criando-os com base em uma configuração xml ou estendendo
      uma das classes de metadados para implementar comportamento adicional.</p>
    </section>
  </body>
</document>