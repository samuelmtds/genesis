<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Estrutura de um projeto vazio</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="Configurando seu projeto no Eclipse">
      <p>Aprenda a configurar o seu projeto no Eclipse <a href="ide_eclipse_empty_project.html">aqui</a></p>
    </section>
    <section name="Como começar?">
      <p>O genesis foi criado com o intuito de sempre facilitar e agilizar o
      processo de desenvolvimento. Para que você possa utilizá-lo da forma mais
      rápida e fácil, disponibilizamos uma estrutura inteira de um projeto
      vazio, assim você só precisa codificar suas classes. Todo processo de
      compilação e instalação já estão configurados nesse projeto vazio.</p>
      <p>É de extrema importância que você já tenha lido a documentação do
      genesis e compreenda seus conceitos e funcionalidades. Antes de começar a
      codificar, leia o <a href="documentation_intro.html">Manual do Usuário</a>
      e <a href="jars_explained.html">entenda os jars da distribuição do genesis
      </a>.</p>
      <p>À estrutura de um projeto vazio chamamos de <code>empty-project</code>
      e este está presente na distribuição empty-project ou na distribuição completa do genesis.
      A estrutura se encontra no diretório
      <code><b>&lt;DISTRIBUICAO_DO_GENESIS&gt;/samples/empty-project/</b></code>.</p>

<p>Veja exemplos de configuração para diferentes cenários <a href="#Cenários">aqui</a></p>
    </section>
    <section name="O que é necessário?">
      <p>Além do genesis, é necessário ter instalado:</p>
      <ul>
        <li>Distribuição do genesis juntamente com as suas bibliotecas de
        dependências.</li>
        <li>Servidor <a href="http://www.jboss.org/">JBoss</a>. Recomendamos
        alguma das versões 3.2.x. ou 4.0.x</li>
        <li>Para compilar e instalar a aplicação recomendamos <a href=
        "http://ant.apache.org/">Apache Ant</a>. Prefira sempre a última
        versão disponível (no momento, Ant 1.6.5)</li>
      </ul>
    </section>
    <section name="Configurando um novo projeto">
      <p>Você pode copiar toda estrutura do <b>empty-project</b> para um
      diretório de desenvolvimento de sua escolha. O primeiro passo para
      configurar um novo projeto é copiar o arquivo
      <code>build.properties.sample</code> para outro arquivo com nome <code>
      build.properties</code>. O arquivo <code>build.properties</code> define
      certas propriedades que são específicas do projeto ou do desenvolvedor. O
      conteúdo inicial do arquivo <code>build.properties.sample</code> segue
      abaixo:</p>
<source>
## Build properties sample ##

#################################################################################
## The following property must be defined in build.properties with an appropriate
## value for the local environment
genesisBasedApplication.name=empty-project
genesisBasedApplication.mainClass=net.java.dev.genesis.emptyproject.MyGenesisApp
genesisBasedApplication.prettyName=Empty Project


#################################################################################
## Use these properties for running the sample in LOCAL or REMOTE MODE          
jboss.home=/opt/jboss-3.2.7


#################################################################################
## Use these properties for running the sample in LOCAL MODE ONLY               
#remote.mode=false
#jdbc.driver=target/hsqldb.jar


#################################################################################
## Use these properties for running the sample in REMOTE MODE ONLY              
#local.mode=false
#jboss.home=/opt/jboss-3.2.7


#################################################################################
## If you want to turn off validation generation, uncomment the following 
## property:
#validation.generate.files=false


#################################################################################
##	If you want to turn off hibernate files generation, such as hibernate.cfg.xml,
## jboss-service.xml, and *.hbm.xml, uncomment the following property:
#hibernate.generate.files=false


#################################################################################
## These properties already have a default value defined in build.xml and only  
## need to be defined in build.properties if their values are different in your 
## local setup                                                                  
#genesis.home=../../genesis
#jboss.provider.url=jnp://localhost
#jboss.datasource.jndi.name=java:/DefaultDS
#jboss.datasource.config.xml=${jboss.home}/server/default/deploy/hsqldb-ds.xml
#webstart.server=localhost
#webstart.port=8080
#build.dir=dist/useradmin.war/application
#jdbc.driver=dist/useradmin.war/application/hsqldb.jar
#jdbc.connection.url=jdbc:hsqldb:genesis/useradmin
#jdbc.driver.class=org.hsqldb.jdbcDriver
#jdbc.username=sa
#jdbc.password=
#hibernate.dialect=net.sf.hibernate.dialect.HSQLDialect
#hibernate.version=2.1.8
#hibernate.show.sql=true
#hibernate.session.factory.jndi.name=jboss:/hibernate/SessionFactory
#hibernate.jboss.service.name=HibernateFactory,name=HibernateFactory
</source>
      <p>Pelo menos quatro propriedades necessitam ser definidas:</p>
      <ul>
        <li><code><b>jboss.home</b></code>: Indica o diretório de instalação do
        servidor JBoss. Só é necessário definir essa propriedade se sua aplicação
        será executada dentro do servidor de aplicação JBoss. Para rodar em modo
        local apenas, essa propriedade é descartada</li>
        <li><code><b>genesisBasedApplication.name</b></code>: Escolha um nome
        para seu projeto, de preferência sem espaços.</li>
        <li><code><b>genesisBasedApplication.mainClass</b></code>: Define o nome
        qualificado completo da classe principal do projeto (a classe que possui
        o método <code>main</code> para execução).</li>
        <li><code><b>genesisBasedApplication.prettyName</b></code>: Define um
        nome descritivo para o projeto. Esse nome pode conter espaços.</li>
      </ul>
      <p>Existem outras propriedades que não são obrigatórias pois já possuem um
      valor padrão, porém elas podem ser redefinidas. Segue abaixo algumas
      delas:</p>
      <ul>
        <li><code><b>genesis.home</b></code>: Indica o diretório de instalação
        do genesis. Geralmente o diretório será algo do tipo <code><b>&lt;
        ALGUM_DIRETÓRIO&gt;/genesis-&lt;versão&gt;/genesis</b></code></li>
        <li><code><b>jboss.datasource.config.xml</b></code>: Indica o arquivo de configuração
        do pool de conexões do JBoss. Você pode fornecer outro arquivo
        que contenha as configurações personalizadas de seu próprio banco de dados.</li>
        <li><code><b>hibernate.dialect</b></code>: Indica o dialeto que o Hibernate
        deve utilizar para gerar os comandos SQL para o banco. Se você for utilizar outro banco
        que não for o HSQLDB você deve fornecer o dialeto correto. Para informações sobre qual
        dialeto você deve utilizar, consulte a documentação do
        <a href="http://www.hibernate.org/">Hibernate</a>.</li>
      </ul>
      <p>Para facilitar o entendimento, vamos imaginar um cenário para criação
      de um novo projeto utilizando o genesis.</p>
      <ul>
        <li>Possuímos o JBoss 3.2.7 instalado no diretório
        <code>C:\servidores\jboss-3.2.7</code></li>
        <li>Instalamos a distribuição do genesis no diretório
        <code>C:\projetos</code>, onde que criará o diretório
        <code>C:\projetos\genesis-&lt;versão&gt;</code>.</li>
        <li>O projeto se chamará <b>helloworld</b> e seu nome descritivo será <b
        >Hello World</b>.</li>
        <li>A classe principal do projeto será <b>exemplo.HelloWorld</b>.</li>
      </ul>
      <p>O nosso <code><b>build.properties</b></code> poderá ser:</p>
<source>
jboss.home=c:/servidores/jboss-3.2.7
genesisBasedApplication.name=helloworld
genesisBasedApplication.mainClass=exemplo.HelloWorld
genesisBasedApplication.prettyName=Hello World

genesis.home=c:/projetos/genesis-&lt;versão&gt;/genesis
</source>
    </section>
    <section name="Desenvolvendo com o genesis">
      <p>Existem dois diretórios de fontes no projeto:</p>
      <ul>
        <li><b>&lt;DIRETÓRIO_DO_PROJETO&gt;/modules/client/src</b>: Diretório
        que contém todos os arquivos fontes que dizem respeito a parte cliente
        da sua aplicação (formulários de tela, arquivos de tela,
        etc.).</li>
        <li><b>&lt;DIRETÓRIO_DO_PROJETO&gt;/modules/shared/src</b>: Diretório
        que contém os arquivos fontes que são comuns tanto a parte cliente da
        aplicação quanto a parte servidora da aplicação. Geralmente são
        colocados nesse diretório de fontes as classes que representam a lógica
        de negócio e possuem os métodos remotos/transacionais da aplicação
        (<b>Commands</b>). Juntamente com os Commands, temos aquilo que chamamos
        de <b>Databeans</b>, ou seja, os objetos que são mapeados do Hibernate,
        pois estes objetos são passados desde a camada de visualização até a
        camada de persistência.</li>
      </ul>
      <p>No diretório de código fonte da parte cliente da aplicação, alguns
      arquivos fontes já estão disponíveis no projeto vazio para facilitar o
      desenvolvimento. São eles:</p>
      <ul>
        <li><b>message.properties</b>: Possui todos os pares chave/valor da sua
        aplicação e é utilizado para internacionalização. Este arquivo já possui
        um conjunto de valores usados pelo genesis, sendo necessário apenas a
        extensão desse conjunto conforme o desenvolvimento do seu projeto.</li>
        <li><b>validator-rules.xml</b>: Define todos os validadores utilizados
        pelo seu projeto, no mesmo estilo do <code>validator</code> do Struts.
        Não é necessário ser alterado, a não ser que seu projeto necessite de
        novos validadores cuja implementação deve estar nessa mesma pasta de
        fontes.</li>
        <li><b>META-INF/local-aop.xml</b> e <b>META-INF/remote-aop.xml</b>: 
        Arquivos que definem todos os aspectos que são aplicados ao sistema 
        (O primeiro são aspectos para rodar em modo local e o segundo arquivo 
        refere-se aos aspectos em modo remoto). Na prática, não é necessário alterar tal
        arquivo, a não ser para fazer pequenos ajustes em alguns parâmetros dos
        aspectos ou adicionar novos aspectos a aplicação.</li>
        <li><b>net/java/dev/genesis/emptyproject/MyGenesisApp.java</b>: Arquivo
        que não faz nada, além de utilizar o <code>StartupHelper</code> para
        inicialização. Esse é o arquivo principal do projeto e você deve
        implementar seu projeto adicionando seu código nele. Como citado
        anteriormente, você pode alterar qual a classe principal da sua
        aplicação apenas alterando o <code>build.properties</code>. Logo, você
        poderá apagar esse arquivo se quiser usar outro.</li>
      </ul>
      <p>Possuimos alguns projetos exemplos que mostram como é o desenvolvimento
      com o genesis e utilizam a mesma estrutura desse projeto vazio. Analisar
      esses exemplos podem resolver algumas dúvidas e questões, além de guiá-lo
      para as melhores práticas de desenvolvimento com o genesis. O exemplo
      principal é chamado <b>useradmin</b> e mostra como utilizar grande parte
      das funcionalidades do genesis. Sua documentação pode ser encontrada <a
      href="useradmin_sample.html">aqui</a>.</p>
    </section>
    <section name="Compilando e instalando sua aplicação">
      <p>O projeto pode ser compilado e instalado no JBoss utilizando a
      ferramenta <a href="http://ant.apache.org/">Ant</a>.</p>
      <p>Para compilar e instalar a sua aplicação temos as seguintes tarefas
      básicas do Ant:</p>
      <ul>
        <li><b>all</b>: Compila sua aplicação, gera os pacotes jar, sar e war além
        de fazer o deploy da sua aplicação</li>
        <li><b>clean</b>: Apaga todos os arquivos gerados numa compilação.</li>
        <li><b>clean-build</b>: Equivalente a chamar as tarefas <code>clean</code> e 
        <code>all</code> em seqüência</li>
        <li><b>all.with.webstart</b>: Equivalente a tarefa <code>all</code> com a adição
        dos arquivos necessários para utilizar sua aplicação com Java Web Start</li>
        <li><b>clean-webstart</b>: Equivalente a chamar as tarefas <code>clean</code> e 
        <code>all.with.webstart</code> em seqüência</li>
        <li><b>run:local</b>: Inicia sua aplicação em modo local. É necessário
        que sua aplicação esteja compilada (Utilize a tarefa <code>all</code> para compilar).</li>
        <li><b>run:debug-local</b>: Equivalente a tarefa<code>run:local</code>, porém
        sua aplicação abre portas para debug, sendo possível você depurar seu código
        de dentro de sua IDE conectando na porta de debug. A porta padrão de debug
        é definida pela propriedade <code>debug.port</code> e seu valor padrão
        é 10000</li>
        <li><b>run:remote</b>: Inicia sua aplicação em modo remoto. É necessário
        que sua aplicação esteja compilada, empacotada em jars e instalada no JBoss.
        Obviamente, o servidor deve estar iniciado.</li>
        <li><b>run:debug-remote</b>: Equivalente a tarefa<code>run:remote</code>, porém
        sua aplicação abre portas para debug. Mesma explicação de <code>run:debug-local</code>
        serve para essa tarefa. Lembre-se que a aplicação faz chamadas remotas ao
        servidor, logo, método remotos executam no servidor. Não estranhe se algum
        breakpoint não for chamado se este estiver num método remoto. Para tal,
        você deve executar o seu servidor com uma porta para debug aberta e conectar
        nessa porta.
        </li>
      </ul>
      <p>A maneira rápida de colocar seu projeto para rodar:
<source>
ant all
&lt;DIRETÓRIO_DO_JBOSS&gt;/bin/run -c &lt;genesisBasedApplication.name&gt;
ant run:remote
</source>
      </p>
    </section>
    <section name="Cenários">
       <p>Abaixo temos exemplos de configuração do genesis para diferentes cenários</p>
       <subsection name="Aplicação Local usando MySQL e JGoodies">
<p>Arquivo <b>build.properties</b></p>
<source>
### Configurações gerais
genesisBasedApplication.name=minhaaplicacao
genesisBasedApplication.mainClass=meupacote.MinhaClassePrincipal
genesisBasedApplication.prettyName=Minha Aplicação
local.mode=true
remote.mode=false
  
### Indique a pasta onde se encontra a distribuição do genesis
genesis.home=D:/opensource/genesis-3.0/genesis

### Indique o local onde o jar do driver do MySQL se encontra
jdbc.driver=lib/mysql/mysqlconnector.jar
  
## Configurações de seu Banco de Dados
jdbc.connection.url=jdbc:mysql://localhost:3306/meudatabase
jdbc.driver.class=com.mysql.jdbc.Driver
jdbc.username=meuusuario
jdbc.password=minhasenha
hibernate.dialect=net.sf.hibernate.dialect.MySQLDialect
</source>
<p>Arquivo <b>build.xml</b></p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project name="meuprojeto" default="all" basedir="." xmlns:genesis="https://genesis.dev.java.net/nonav/ns/master_build.xml">
  <import file="desktop_build.xml" />

  <target name="-pre-init">
    <property file="build.properties" />

    <!-- Criamos uma propriedade com o diretório das bibliotecas do JGoodies -->
    <property name="jgoodies.lib" location="lib/jgoodies" />
  </target>

  <target name="client:pre-init">

    <!-- Adicionamos as bibliotecas do JGoodies no classpath de compilação da parte client -->
    <path id="client.additional.javac.classpath">
      <fileset dir="${jgoodies.lib}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

  <!-- Adicionamos as bibliotecas do JGoodies no classpath de execução da aplicação -->
  <target name="run:pre-define-classpath">
    <path id="run.additional.classpath">
      <fileset dir="${jgoodies.lib}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

</project>
]]>
</source>
      <p>Para executar seu projeto:
<source>
ant all
ant run:local
</source>
      </p>
       </subsection>
       <subsection name="Aplicação Remota usando MySQL e JFreeReport">
<p>Arquivo <b>build.properties</b></p>
<source>
### Configurações gerais
genesisBasedApplication.name=minhaaplicacao
genesisBasedApplication.mainClass=meupacote.MinhaClassePrincipal
genesisBasedApplication.prettyName=Minha Aplicação
local.mode=false
remote.mode=true
  
### Indique a pasta onde se encontra a distribuição do genesis
genesis.home=D:/opensource/genesis-3.0/genesis
  
### Indique a pasta de instalação do JBoss
jboss.home=D:/servers/jboss-4.0.4.GA

### Indique o local onde o jar do driver do MySQL se encontra
jdbc.driver=lib/mysql/mysqlconnector.jar
  
## Configurações de seu Banco de Dados
jboss.datasource.jndi.name=java:/MySqlDS
jboss.datasource.config.xml=conf/mysql-ds.xml
hibernate.dialect=net.sf.hibernate.dialect.MySQLDialect
</source>
<p>Arquivo <b>conf/mysql-ds.xml</b></p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!-- $Id: empty_project.xml,v 1.16 2006-08-04 23:40:18 allanjones Exp $ -->
<!--  Datasource config for MySQL using 3.0.9 available from:
http://www.mysql.com/downloads/api-jdbc-stable.html
-->

<datasources>
  <local-tx-datasource>
    <jndi-name>MySqlDS</jndi-name>
    <connection-url>jdbc:mysql://localhost:3306/meudatabase</connection-url>
    <driver-class>com.mysql.jdbc.Driver</driver-class>
    <user-name>meuusuario</user-name>
    <password>minhasenha</password>
    <exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter</exception-sorter-class-name>
    <!-- should only be used on drivers after 3.22.1 with "ping" support
    <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLValidConnectionChecker</valid-connection-checker-class-name>
    -->
    <!-- sql to call when connection is created
    <new-connection-sql>some arbitrary sql</new-connection-sql>
      -->
    <!-- sql to call on an existing pooled connection when it is obtained from pool - MySQLValidConnectionChecker is preferred for newer drivers
    <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>
      -->

    <!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) -->
    <metadata>
       <type-mapping>mySQL</type-mapping>
    </metadata>
  </local-tx-datasource>
</datasources>
]]>
</source>
<p>Arquivo <b>build.xml</b></p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project name="meuprojeto" default="all" basedir="." xmlns:genesis="https://genesis.dev.java.net/nonav/ns/master_build.xml">
  <import file="desktop_build.xml" />

  <target name="-pre-init">
    <property file="build.properties" />

    <!-- Criamos uma propriedade com o diretório das bibliotecas do JFreeReport -->
    <property name="jfreereport.lib" location="lib/jfreereport" />
  </target>

  <target name="client:pre-init">
  
    <!-- Adicionamos as bibliotecas do JFreeReport no classpath de compilação da parte client -->
    <path id="client.additional.javac.classpath">
      <fileset dir="${jfreereport.lib}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

  <!-- Adicionamos as bibliotecas do JFreeReport no classpath de execução da aplicação -->
  <target name="run:pre-define-classpath">
    <path id="run.additional.classpath">
      <fileset dir="${jfreereport.lib}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

  <!-- Adicionamos as bibliotecas do JFreeReport para serem assinadas e distribuídas
  via Java Web Start -->
  <target name="-do-webstart-signjar">
    <genesis:webstart-signjar>
      <customize>
        <fileset dir="${jfreereport.lib}">
          <include name="*.jar" />
        </fileset>
      </customize>
    </genesis:webstart-signjar>
  </target>
</project>
]]>
</source>
      <p>Para executar seu projeto:
<source>
ant all
D:\servers\jboss-4.0.4.GA\bin\run -c minhaaplicacao
ant run:remote
</source>
      </p>
      <p>Para executar seu projeto via Java Web Start:
<source>
ant all.with.webstart
D:\servers\jboss-4.0.4.GA\bin\run -c minhaaplicacao
Entre no endereço <a href="http://localhost:8080/minhaaplicacao">http://localhost:8080/minhaaplicacao</a>
</source>
      </p>
       </subsection>
       <subsection name="Aplicação Local e Remota usando MySQL e JGoodies e Joda">
<p>Arquivo <b>build.properties</b></p>
<source>
### Configurações gerais
genesisBasedApplication.name=minhaaplicacao
genesisBasedApplication.mainClass=meupacote.MinhaClassePrincipal
genesisBasedApplication.prettyName=Minha Aplicação
local.mode=true
remote.mode=true
  
### Indique a pasta onde se encontra a distribuição do genesis
genesis.home=D:/opensource/genesis-3.0/genesis
  
### Indique a pasta de instalação do JBoss
jboss.home=D:/servers/jboss-4.0.4.GA

### Indique o local onde o jar do driver do MySQL se encontra
jdbc.driver=lib/mysql/mysqlconnector.jar
  
## Configurações de seu Banco de Dados
jdbc.connection.url=jdbc:mysql://localhost:3306/meudatabase
jdbc.driver.class=com.mysql.jdbc.Driver
jdbc.username=meuusuario
jdbc.password=minhasenha
jboss.datasource.jndi.name=java:/MySqlDS
jboss.datasource.config.xml=conf/mysql-ds.xml
hibernate.dialect=net.sf.hibernate.dialect.MySQLDialect
</source>
<p>Arquivo <b>conf/mysql-ds.xml</b></p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!-- $Id: empty_project.xml,v 1.16 2006-08-04 23:40:18 allanjones Exp $ -->
<!--  Datasource config for MySQL using 3.0.9 available from:
http://www.mysql.com/downloads/api-jdbc-stable.html
-->

<datasources>
  <local-tx-datasource>
    <jndi-name>MySqlDS</jndi-name>
    <connection-url>jdbc:mysql://localhost:3306/meudatabase</connection-url>
    <driver-class>com.mysql.jdbc.Driver</driver-class>
    <user-name>meuusuario</user-name>
    <password>minhasenha</password>
    <exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter</exception-sorter-class-name>
    <!-- should only be used on drivers after 3.22.1 with "ping" support
    <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLValidConnectionChecker</valid-connection-checker-class-name>
    -->
    <!-- sql to call when connection is created
    <new-connection-sql>some arbitrary sql</new-connection-sql>
      -->
    <!-- sql to call on an existing pooled connection when it is obtained from pool - MySQLValidConnectionChecker is preferred for newer drivers
    <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>
      -->

    <!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) -->
    <metadata>
       <type-mapping>mySQL</type-mapping>
    </metadata>
  </local-tx-datasource>
</datasources>
]]>
</source>
<p>Arquivo <b>build.xml</b></p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project name="meuprojeto" default="all" basedir="." xmlns:genesis="https://genesis.dev.java.net/nonav/ns/master_build.xml">
  <import file="desktop_build.xml" />

  <target name="-pre-init">
    <property file="build.properties" />

    <!-- Criamos uma propriedade com o diretório das bibliotecas do JGoodies -->
    <property name="jgoodies.lib" location="lib/jgoodies" />

    <!-- Criamos uma propriedade com o diretório das bibliotecas do Joda -->
    <property name="joda.lib" location="lib/joda" />
  </target>

  <target name="client:pre-init">
    <path id="client.additional.javac.classpath">
      <!-- Adicionamos as bibliotecas do JGoodies no classpath de compilação da parte client -->
      <fileset dir="${jgoodies.lib}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

  <target name="shared:pre-init">
    <path id="shared.additional.javac.classpath">
      <!-- Adicionamos as bibliotecas do Joda no classpath de compilação da parte shared -->
      <fileset dir="${joda.lib}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

  <!-- Adicionamos as bibliotecas do JGoodies e do Joda no classpath de execução da aplicação -->
  <target name="run:pre-define-classpath">
    <path id="run.additional.classpath">
      <fileset dir="${jgoodies.lib}">
        <include name="*.jar" />
      </fileset>
      <fileset dir="${joda.lib}">
        <include name="*.jar" />
      </fileset>
    </path>
  </target>

  <!-- Adicionamos as bibliotecas do JGoodies e do Joda para serem
  assinadas e distribuídas via Java Web Start -->
  <target name="-do-webstart-signjar">
    <genesis:webstart-signjar>
      <customize>
        <fileset dir="${jgoodies.lib}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${joda.lib}">
          <include name="*.jar" />
        </fileset>
      </customize>
    </genesis:webstart-signjar>
  </target>
</project>
]]>
</source>
      <p>Para executar seu projeto em modo local:
<source>
ant all
ant run:local
</source>
      </p>
      <p>Para executar seu projeto em modo remoto:
<source>
ant all
D:\servers\jboss-4.0.4.GA\bin\run -c minhaaplicacao
ant run:remote
</source>
      </p>
      <p>Para executar seu projeto via Java Web Start:
<source>
ant all.with.webstart
D:\servers\jboss-4.0.4.GA\bin\run -c minhaaplicacao
Entre no endereço <a href="http://localhost:8080/minhaaplicacao">http://localhost:8080/minhaaplicacao</a>
</source>
      </p>
       </subsection>
    </section>
  </body>
</document>