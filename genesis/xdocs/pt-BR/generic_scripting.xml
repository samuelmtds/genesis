<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Suporte a Linguagens de Script</title>
    <author email="lmike@dev.java.net">Liaw Mike Djoesman</author>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="Suporte a linguagens de script">
      <p>Scripts são utilizados no genesis para determinar condições booleanas
      para regras de habilitação, visibilidade de um campo e outras
      funcionalidades. O framework possui suporte genérico a linguagens de
      script para realizar esta tarefa a partir da versão 3.0.</p>
      <p>Embora a linguagem de script padrão definido pelo genesis seja
      <code>Javascript</code>, é possível modificar esse padrão de modo
      que todos os forms de uma aplicação tenham seus scripts expressados
      em uma determinada linguagem.</p>
      <p>
      <ul>
        <li><a href="#Mudando a linguagem de scripts">
        Mudando a linguagem de scripts</a></li>
        <li><a href="#Definindo uma nova linguagem de script">
        Definindo uma nova linguagem de script</a></li>
      </ul>
      </p>

      <subsection name="Mudando a linguagem de scripts">
        <p>O arquivo <code>aop.xml</code> deve ser modificado de modo a
        informar que uma outra linguagem de script deve ser utilizada nos
        forms. O arquivo em questão deve conter a linha
        semelhante à seguir:</p>
<source>
<![CDATA[
<mixin class="FormMetadataFactoryAspect$AspectFormMetadataFactory" />
]]>
</source>
        <p>Este mixin permite a definição de dois parâmetros conforme
        o exemplo abaixo:</p>
<source>
<![CDATA[
<mixin class="FormMetadataFactoryAspect$AspectFormMetadataFactory">
   <param name="scriptFactory" value="net.java.dev.genesis.script.bsf.BSFScriptFactory" />
   <param name="scriptFactoryProperties" value="lang=beanshell" />
</mixin>
]]>
</source>
        <p>O parâmetro <code>scriptFactory</code> define a linguagem
        de script propriamente dita. O genesis já possui pré-definidos
        algumas linguagens de script que podem ser utilizadas imediatamente -
        Para utilizá-las, basta fornecer um dos seguintes valores:
        <ul>
          <li>el</li>
          <li>beanshell</li>
          <li>javascript (valor padrão - assumido mesmo que o parâmetro não
          exista)</li>
          <li>jxpath</li>
        </ul>
        </p>
        <p>O parâmetro <code>scriptFactoryProperties</code> define as
        propriedades que a implementação de <code>ScriptFactory</code>
        necessita. O valor desse paramêtro toma o formato
        <code>nomeDaPropriedade=valorDaPropriedade</code> e em casos onde há
        mais de uma propriedade, estas tuplas devem ser separadas pelo
        caractere "," (vírgula). A classe <code>BSFScriptFactory</code> aceita uma
        propriedade denominada "lang", o que torna as duas definições abaixo
        equivalentes:</p>
<source>
<![CDATA[
<mixin class="FormMetadataFactoryAspect$AspectFormMetadataFactory">
   <param name="scriptFactory" value="net.java.dev.genesis.script.bsf.BSFScriptFactory" />
   <param name="scriptFactoryProperties" value="lang=beanshell" />
</mixin>
]]>
</source>
<source>
<![CDATA[
<mixin class="FormMetadataFactoryAspect$AspectFormMetadataFactory">
   <param name="scriptFactory" value="beanshell" />
</mixin>
]]>
</source>
      </subsection>
      <subsection name="Definindo uma nova linguagem de script">
        <p>O genesis permite que o desenvolvedor extenda o suporte a linguagens
        de script - ou seja, permite que o desenvolvedor inclua suporte a outras
        linguagens de script. Para isso, basta criar uma classe e fazer com
        que essa classe implemente a interface
        <code>net.java.dev.genesis.script.ScriptFactory</code>. Exemplo:</p>
<source>
package com.empresa.genesis.script;

import net.java.dev.genesis.script.Script;
import net.java.dev.genesis.script.ScriptFactory;

public class MinhaFabricaScript implements ScriptFactory {
   public Script newScript() {
      return new MeuScript();
   }
}
</source>
        <p>Neste caso, o arquivo <code>aop.xml</code> deve ser modificado de
        modo que o parâmetro <code>scriptFactory</code> do mixin
        <code>FormMetadataFactoryAspect$AspectFormMetadataFactory</code>
        contenha o nome qualificado completo da classe. Veja abaixo:</p>
<source>
<![CDATA[
<mixin class="FormMetadataFactoryAspect$AspectFormMetadataFactory">
   <param name="scriptFactory" value="com.empresa.genesis.script.MinhaFabricaScript" />
   ...
</mixin>
]]>
</source>
        <p>Voltando ao código de <code>MinhaFabricaScript</code> vemos que esta
        define um método que deve retornar um
        <code>net.java.dev.genesis.script.Script</code>. Eis o código-exemplo
        da classe <code>MeuScript</code>:</p>
<source>
package com.empresa.genesis.script;

import net.java.dev.genesis.script.Script;
import net.java.dev.genesis.script.ScriptContext;
import net.java.dev.genesis.script.ScriptExpression;

public class MeuScript implements Script {
   public ScriptContext newContext(Object root) {
      return new MeuContextoScript(root);
   }

   public ScriptExpression compile(String expression) {
      return new MinhaExpressaoScript(expression);
   }
}
</source>
        <p>Da mesma forma, o código acima possui dois métodos sendo que um deles
        deve retornar uma classe que implementa
        <code>net.java.dev.genesis.script.ScriptContext</code> e a outra, uma
        classe que estende
        <code>net.java.dev.genesis.script.ScriptExpression</code>:</p>
        <ul>
          <li><code>ScriptContext</code> é um contexto que contém as variáveis
          ("named conditions"), o form, as funções pré-contruídas do genesis
          (tais como isEmpty, hasChanged, equals, etc) e as funções
          pré-construídas específicas de cada linguagem de script.</li>
          <li><code>ScriptExpression</code> é a abstração de uma expressão
          qualquer de cada linguagem de script.</li>
        </ul>
        <p>Estes são os únicos passos necessários para que o genesis possa
        suportar uma nova linguagem de script.</p>
      </subsection>
    </section>
  </body>
</document>