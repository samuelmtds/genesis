<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Binding Thinlet</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Binding Thinlet">
      <p>As seções abaixo trarão informações adicionais de interesse somente 
      àqueles que utilizarem o binding Thinlet:
      <ul>
        <li><a href="#Escrevendo views com Thinlet">Escrevendo views com 
        Thinlet</a></li>
        <li><a href="#Utilizando as classes auxiliares de interface gráfica">
        Utilizando as classes auxiliares de interface gráfica</a></li>
      </ul>
      </p>
    </section>
    <section name="Escrevendo views com Thinlet">
      <p>As views são fortemente acopladas com a API gráfica utilizada. O
      suporte a Thinlet hoje é implementado no genesis basicamente por duas
      classes em <code>net.java.dev.genesis.ui.thinlet</code>: <code>BaseThinlet
      </code> e sua subclasse <code>BaseDialogThinlet</code>.</p>
      <p><code>BaseThinlet</code> estende <code>Thinlet</code> das seguintes
      formas:
        <ul>
          <li>Expõe constantes para os nomes dos widgets (componentes gráficos)
          do Thinlet que são utilizados por toda API do Thinlet e também
          internamente</li>
          <li>Provê diversos métodos
          <code>set&lt;Propriedade&gt;(Object,&lt;tipo&gt;)</code> e
          <code>&lt;tipo&gt; get&lt;Propriedade&gt;(Object)</code> para que as
          propriedades dos widgets possam ser manipuladas de modo fortemente
          tipado.</li>
          <li>Implementa alguns métodos <code>create&lt;Widget&gt;(..)</code>
          que facilitam a geração dinâmica de componentes gráficos.</li>
          <li>Possui métodos para exibir um bean na tela (<code>displayBean(..)
          </code> e <code>populateFrom..(..)</code>) bem como para capturar os
          valores exibidos em um bean (<code>populate(Object)</code>).</li>
          <li>Possibilita o tratamento de erros através de <code>
          handleException(Throwable)</code> e métodos especializados como <code>
          handleUIException(UIException), handleCustomException(Throwable),
          </code> e <code>handleUnknownException(Throwable)</code>.</li>
          <li>Integra a validação e implementa o tratamento específico de erros
          para ela.</li>
          <li>Implementa o binding (algo como junção) da view com o form através
          dos métodos <code>bind(..)</code>, <code>invokeFormAction(..)</code> e
          outros.
          </li>
        </ul>
      </p>
      <p>Quando o modelo explicado neste documento é utilizado, i.e., o binding
      de view e form, somente as três últimas características são de interesse
      pelo código cliente. Por isso, somente estas serão exploradas neste
      documento.</p>
      <p><code>BaseDialogThinlet</code> é uma especialização de
      <code>BaseThinlet</code> que facilita a criação de janelas de diálogo.
      Logo todas as explicações referentes a <code>BaseThinlet</code> aplicam-se
      a ela também.</p>
      <subsection name="Configurando e exibindo uma janela">
        <p>A criação da janela em que a view será exibida é de responsabilidade
        do programador. Uma maneira de criar a janela principal é utilizando a
        própria classe <code>FrameLauncher</code> que vem com o Thinlet. Abaixo,
        um exemplo de uso dessa técnica:</p>
<source>
public class ExemploCriacaoFrame extends BaseThinlet {
   public ExemploCriacaoFrame() throws Exception {
      add(parse("exemplo_criacao_frame.xml"));
   }

   public static void main(String[] args) throws Exception {
      new FrameLauncher("Exemplo de criação de frame",
            new ExemploCriacaoFrame(), 800, 600);
   }
}
</source>
        <p>Este exemplo trivial pode ser suficiente para diversas situações, mas
        em algumas outras é necessário alterar as propriedades do frame antes de
        exibi-lo. Em casos em que seja necessário fazer as mesmas alterações
        para todos os frames na aplicação ou mesmo alterar configurações do
        Thinlet, recomenda-se a criação de uma superclasse intermediária. Esta
        técnica é utilizada nos exemplos providos com o genesis. A seguinte
        classe foi extraída do exemplo useradmin:</p>
<source>
public abstract class BaseView extends BaseThinlet {
   public BaseView(String title, String xmlFile, int width, int height,
         boolean resizable) throws Exception {
      Frame f = new Frame();
      f.add(this);
      Insets is = f.getInsets();
      width += is.left + is.right;
      height += is.top + is.bottom;
      Dimension ss = getToolkit().getScreenSize();
      width = Math.min(width, ss.width);
      height = Math.min(height, ss.height);
      f.setBounds((ss.width - width) / 2, (ss.height - height) / 2, width,
            height);
      f.setResizable(resizable);
      f.setTitle(UIUtils.getInstance().getBundle().getString(title));
      f.addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent event) {
            try {
               onClose();
            } catch (Exception e) {
               throw new RuntimeException(e);
            }
         }
      });
      setAllI18n(true);
      setResourceBundle(UIUtils.getInstance().getBundle());
      add(parse(xmlFile));
   }

   protected abstract void onClose() throws Exception;
}
</source>
        <p>A classe mostrada acima cria seu próprio frame de modo a centralizá-
        lo, torná-lo redimensionável ou não, define o título através do
        <code>ResourceBundle</code>, o que permite internacionalização,
        configura a janela para encerrar a execução quando esta for fechada e
        configura a internacionalização da interface gráfica antes de adicionar
        o xml.</p>
        <p>A classe <code>BaseDialogThinlet</code> possui construtores capazes
        de criar a <code>Dialog</code> - a partir de um <code>Frame</code> ou
        instância de <code>BaseThinlet</code> existentes ou criando um novo
        <code>Frame</code> - e outros que recebem uma instância criada
        externamente. Normalmente não será necessário configurar a instância de
        <code>Dialog</code> externamente. Por padrão é adicionado um listener
        que chama o método não-final <code>onClose()</code> quando a janela é
        fechada, permitindo que o comportamento em resposta a este evento possa
        ser customizado pelo desenvolvedor.</p>
        <p>Assim como no caso do <code>BaseThinlet</code>, recomenda-se a
        criação de uma superclasse intermediária para o projeto. Um exemplo
        disso encontra-se na classe abaixo, também extraída do exemplo
        useradmin:</p>
<source>
public abstract class BaseDialogView extends BaseDialogThinlet {
   public BaseDialogView(Frame frame, String title, String xmlFile, 
         boolean resizable, boolean modal) throws Exception {
      super(frame);
      getDialog().setModal(modal);
      getDialog().setResizable(resizable);
      getDialog().setTitle(UIUtils.getInstance().getBundle().getString(title));
      setAllI18n(true);
      setResourceBundle(UIUtils.getInstance().getBundle());
      add(parse(xmlFile));
   }
}
</source>
        <p>O código é bastante semelhante ao anterior, apenas configurando a
        instância de <code>Dialog</code> - que pode ser obtida através do método
        <code>getDialog()</code>, como mostrado acima - para ser modal (bloquear
        o acesso a outras janelas) ou não e redimensionável ou não.</p>
      </subsection>
    </section>
    <section name="Utilizando as classes auxiliares de interface gráfica">
      <p>Algumas classes auxiliares são providas juntamente com o genesis-client
      para acelerar o processo desenvolvimento da interface gráfica. Elas
      implementam tarefas comuns, como a exibição de mensagens, confirmações por
      parte do usuário e exibição de exceções. Todas essas classes encontram-se
      no pacote <code>net.java.dev.genesis.ui.thinlet</code>.</p>
      <subsection name="MessageDialog">
        <p>A primeira dessas classes auxiliares é <code>MessageDialog</code>,
        que exibe uma mensagem para o usuário em uma <code>Dialog</code> com um
        botão "Fechar". Dois métodos estáticos <code>show(..)</code> são
        providos com o objetivo de tornar o uso desta classe ainda mais prático.
        Ambos aceitam o título da janela como segundo parâmetro e a mensagem
        como terceiro, sendo que o primeiro argumento pode ser uma instância de
        <code>Frame</code> ou de <code>BaseThinlet</code>. A segunda versão
        torna seu uso bastante prático dentro de uma classe que estenda <code>
        BaseThinlet</code> como mostra o código abaixo:</p>
<source>
public void exibirMensagem() {
   MessageDialog.show(this, "Título", "Mensagem a ser exibida");
}
</source>
      </subsection>
      <subsection name="OptionDialog">
        <p>Para se exibir uma escolha para o usuário pode-se utilizar a classe
        <code>OptionDialog</code>. São providas, de forma semelhante a
        <code>MessageDialog</code>, duas versões do método
        <code>display(..)</code>, aceitando uma instância de
        <code>BaseThinlet</code> ou de <code>Frame</code>, o título da janela e
        a pergunta a ser exibida. Ao utilizar algum desses métodos é exibida a
        janela de diálogo com três botões (Sim/Não/Cancelar). Existe um método
        <code>displayYesNo(BaseThinlet,String,String)</code> para casos em que
        haja somente duas opções. Todos os três métodos retornam um dos valores
        da enumeração <code>Option</code>, de modo que pode-se saber que opção o
        usuário escolheu. O uso de <code>OptionDialog</code> em uma classe que
        estenda <code>BaseThinlet</code> é mostrado abaixo:</p>
<source>
public void fazOperacao() {
   Option option = OptionDialog.displayYesNo(this, "Título", "Deseja " +
         "realmente fazer isso?");

   if (option == Option.YES) {
      // faz a operacao
   }
}
</source>
      </subsection>
      <subsection name="ErrorReporterDialog">
        <p>A classe <code>ErrorReporterDialog</code> permite exibir uma exceção
        para o usuário com uma mensagem descritiva além de todo o stack trace.
        Assim como no caso de <code>MessageDialog</code> existem também duas
        versões do método <code>show(..)</code>: uma para
        <code>BaseThinlet</code> e outra para <code>Frame</code>. O exemplo
        abaixo mostra como utilizar esta classe em uma subclasse de
        <code>BaseThinlet</code>:</p>
<source>
public void exibeErro(Throwable t) {
   ErrorReporterDialog.show(this, "Erro", t.getMessage(), t);
}
</source>
        <p>O uso direto de <code>ErrorReporterDialog</code> diretamente no
        código das views provavelmente será desnecessário, visto que o
        tratamento de erros padrão implementado em <code>BaseThinlet</code> já
        utiliza esta classe, conforme explicado posteriormente.</p>
      </subsection>
    </section>
  </body>
</document>