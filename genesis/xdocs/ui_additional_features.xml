<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Modelo de componentes de interface gráfica</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Funcionalidades adicionais de componentes de interface
    gráfica">
      <p>Os seguintes conceitos e/ou características são abordados abaixo:
      <ul>
        <li><a href="#Tratando erros">Tratando erros</a></li>
        <li><a href="#Controlando a interface gráfica e o form condicionalmente"
        >Controlando a interface gráfica e o form condicionalmente</a></li>
        <li><a href="#Determinando se o campo está vazio">Determinando se o
        campo está vazio</a></li>
        <li><a href="#Comparando valores">Comparando valores</a></li>
        <li><a href="#Populando combos e tabelas">Populando combos e tabelas</a>
        </li>
        <li><a href="#Formatação">Formatação</a></li>
        <li><a href="#Validando os dados">Validando os dados</a></li>
        <li><a href="#Configurando as mensagens">Configurando as mensagens</a>
        </li>
        <li><a href="#Trabalhando com pesquisas dinâmicas">Trabalhando com
        pesquisas dinâmicas</a></li>
      </ul>
      </p>
    </section>
    <section name="Tratando erros">
      <p>O Thinlet já possui um método para tratamento de erros,
      <code>handleException(Throwable)</code>, de modo que
      <code>BaseThinlet</code> sobrescreve este método para tratar os erros de
      forma customizada. Tomou-se cuidado no desenvolvimento do genesis para que
      qualquer erro que aconteça durante a execução da interface gráfica seja
      redirecionado para este único ponto, centralizando assim o seu tratamento.
      </p>
      <p>A implementação padrão trata os erros de forma diferenciada, conforme
      descrito abaixo:</p>
      <ul>
        <li>Caso o erro seja uma <code>ScreenNotFoundException</code> (que
        ocorre quando um dos arquivos xml da interface gráfica não é
        encontrado), o erro é tratado através de
        <code>handleException(String, Throwable)</code>.</li>
        <li>Se o erro for uma <code>ValidationException</code>, este é
        redirecionado para
        <code>showValidationErrors(ValidationException)</code>.</li>
        <li>Quando o erro é uma <code>UIException</code>, este é repassado para
        <code>handleUIException(UIException)</code>.</li>
        <li>Se todas as checagens anteriores falharem, o erro é passado para
        <code>handleCustomException(Throwable)</code> que retorna um
        <code>boolean</code> indicando se o erro foi tratado ou não.</li>
        <li>Quando o erro não é tratado, o método
        <code>handleUnknownException(Throwable)</code> é invocado, terminando a
        cadeia de tratamento de erros.</li>
      </ul>
      <p>Para a maioria dos usuários, basta saber como cada erro será tratado
      pelo framework. No entanto, qualquer um dos métodos descritos acima pode
      ser sobrescrito se for necessário customizar o tratamento de erros. O
      comportamento padrão de cada um deles é descrito abaixo:</p>
      <ul>
         <li><code>handleException(String, Throwable)</code> utiliza
         <code>ErrorReporterDialog</code> para exibir o erro. O título da janela
         é a mensagem retornada por <code>getErrorMessage()</code>, que por
         padrão é a constante "Error".</li>
         <li><code>showValidationErrors(ValidationException)</code> extrai os
         erros de <code>ValidationException</code>, formata-os separando cada um
         deles com um <code>\n</code> - utilizado para quebra de linha em Java -
         e os exibe utilizando <code>MessageDialog</code>. O título da janela
         será a String definida para <code>validation.errors.title</code> no
         <a href="#Configurando as mensagens">arquivo de recursos</a>.
         </li>
         <li><code>handleUIException(UIException)</code> exibe o erro utilizando
         <code>MessageDialog</code>. O título e a mensagem serão extraídos da
         própria exceção.</li>
         <li><code>handleCustomException(Throwable)</code> verifica se o erro
         lançado possui alguma outra exceção como causa invocando nele o método
         <code>getCause()</code>. Se possuir, esta causa será repassada para
         <code>handleException(Throwable)</code>. Caso contrário, será retornado
         <code>false</code> indicando que o erro não pôde ser tratado.</li>
         <li><code>handleUnknownException(Throwable)</code> simplesmente repassa
         o erro para <code>handleException(String, Throwable)</code> utilizando
         como mensagem a constante "Unexpected error occurred".</li>
      </ul>
    </section>
    <section name="Controlando a interface gráfica e o form condicionalmente">
      <p>Um conceito poderoso no genesis é o suporte a condições. Esse suporte
      permite implementar uma variedade de características, como controle de
      habilitação/desabilitação de widgets, visibilidade, limpeza automática de
      campos e chamadas automáticas a métodos. Tudo isso é feito de maneira
      declarativa no form, sem necessidade de lidar com a API gráfica utilizada
      para as views.</p>
      <p>As expressões condicionais são interpretadas com <a href=
      "http://jakarta.apache.org/commons/jxpath">JXPath</a>. Espera-se expandir
      o suporte para linguagens de script em geral na versão 0.3. Por ora, as
      sub-seções abaixo explicam como utilizar essas expressões e tirar proveito
      das funcionalidades do genesis relacionadas com elas.</p>
      <subsection name="Declarando condições">
        <p>Embora todas as anotações que recebem condições JXPath possam receber
        expressões de qualquer tipo, certas condições podem ser utilizadas
        repetidas vezes no código ou como parte de outra expressão. Assim, o
        genesis possibilita a declaração dessas condições e sua exportação como
        variáveis que podem ser referenciadas em outros pontos do código. Para
        declarar uma condição utiliza-se a anotação <code>@Condition</code>, que
        possui a seguinte sintaxe:</p>
<source>
@Condition nomeCondicao=expressaoJXPath
</source>
        <p>A variável <code>nomeCondicao</code> é exportada de modo a
        representar a expressão <code>expressaoJXPath</code> em outros pontos do
        código. Como toda variável JXPath, quando for utilizada numa expressão
        deve-se preceder o seu nome com <code>$</code>. Para o exemplo dado,
        deve-se referenciar a variável em uma expressão condicional como
        <code>$nomeCondicao</code>.</p>
        <p>Esta anotação pode ser usada tanto na classe, no getter de um
        atributo ou em um método anotado com <code>@Action</code>. Seu escopo
        sempre será o de classe, não importando onde ela seja declarada.
        Obviamente, esta anotação é útil somente quando usada em conjunto com
        outra anotação condicional que referencie a variável exportada, como as
        mencionadas abaixo.</p>
      </subsection>
      <subsection name="Habilitando e desabilitando componentes">
        <p>É muito comum no desenvolvimento de interfaces gráficas a situação em
        que determinado campo ou botão só pode estar habilitado quando uma
        determinada condição é verdade. A fim de simplificar estes casos, o
        genesis possui uma anotação chamada <code>@EnabledWhen</code>. Esta
        anotação pode ser utilizada tanto com atributos como com ações. Um
        exemplo prático do uso encontra-se abaixo:</p>
<source>
/**
 * @Form
 */
public class ExemploEnabledWhenForm {
   private boolean casado;
   private String nomeConjuge;

   public boolean isCasado() {
      return casado;
   }

   public void setCasado(boolean casado) {
      this.casado = casado;
   }

   /**
    * @EnabledWhen casado=true()
    */
   public String getNomeConjuge() {
      return nomeConjuge;
   }

   public void setNomeConjuge(String nomeConjuge) {
      this.nomeConjuge = nomeConjuge;
   }
}
</source>
        <p>No caso acima, somente quando o widget que representa a propriedade
        <code>casado</code> estiver indicando o valor <code>true</code> para ela
        é que será possível entrar com o nome do cônjuge, i.e., esposo/esposa da
        pessoa.</p>
      </subsection>
      <subsection name="Controlando a visibilidade">
        <p>É possível ocultar componentes ou mostrá-los condicionalmente
        utilizando a anotação <code>@VisibleWhen</code>. Sua sintaxe é
        semelhante a da anotação <code>@EnabledWhen</code> e também pode ser
        utilizada tanto para atributos como para ações. Um exemplo de uso com
        ação encontra-se abaixo:</p>
<source>
/**
 * @Form
 */
public class ExemploVisibleWhenForm {
   private int numeroDependentes;

   public int getNumeroDependentes() {
      return numeroDependentes;
   }

   public void setNumeroDependentes(int numeroDependentes) {
      this.numeroDependentes = numeroDependentes;
   }

   /**
    * @Action
    * @VisibleWhen numeroDependentes > 0
    */
   public void calculaTaxasAdicionais() {
      // ...
   }

   // ...
}
</source>
        <p>O botão que representa <code>calculaTaxasAdicionais()</code> só
        estará visível quando o valor da propriedade
        <code>numeroDependentes</code> for maior que zero.</p>
      </subsection>
      <subsection name="Limpando o conteúdo dos campos">
        <p>Sob diversas condições é necessário limpar o conteúdo de certos
        campos. O genesis pode fazer isso automaticamente pelo programador
        através do uso da anotação <code>@ClearOn</code>. Embora sua sintaxe
        seja semelhante a de <code>@EnabledWhen</code> e
        <code>@VisibleWhen</code>, esta anotação somente pode ser usada para
        atributos e não para ações (já que elas não possuem conteúdo). Pode-se
        modificar um dos exemplos anteriores para torná-lo mais correto:</p>
<source>
/**
 * @Form
 */
public class ExemploClearOnForm {
   private boolean casado;
   private String nomeConjuge;

   public boolean isCasado() {
      return casado;
   }

   public void setCasado(boolean casado) {
      this.casado = casado;
   }

   /**
    * @EnabledWhen casado=true()
    * @ClearOn casado=false()
    */
   public String getNomeConjuge() {
      return nomeConjuge;
   }

   public void setNomeConjuge(String nomeConjuge) {
      this.nomeConjuge = nomeConjuge;
   }
}
</source>
        <p>Quando a propriedade <code>casado</code> tiver o valor
        <code>false</code> o atributo <code>nomeConjuge</code> terá o seu valor
        resetado para <code>null</code> automaticamente.</p>
        <p>O valor para o qual o campo é resetado é definido através da anotação
        <code>@EmptyValue</code>. Esta anotação deve estar sobre o atributo para
        o qual especifica o valor vazio. Sua sintaxe é:</p>
<source>
@EmptyValue valorComoString
</source>
        <p>Caso <code>@EmptyValue</code> não esteja especificado, um valor
        padrão é utilizado - <code>false</code> para campos booleanos, zero para
        numéricos e <code>null</code> para os demais.</p>
      </subsection>
      <subsection name="Invocando métodos automaticamente">
        <p>Alguns métodos precisam ser chamados toda vez que certas condições
        ocorrerem. Ao invés de forçar o programador a fazer isso manualmente - o
        que pode levar a código "spaghetti" -, o genesis possui a anotação
        <code>@CallWhen</code>. Com sintaxe similar à das anotações anteriores,
        esta anotação pode somente ser usada em ações e não em atributos.</p>
        <p>Pode-se modificar um dos exemplos anteriores para ilustrar o uso
        prático desta anotação:</p>
<source>
/**
 * @Form
 */
public class ExemploCallWhenForm {
   private int numeroDependentes;

   public int getNumeroDependentes() {
      return numeroDependentes;
   }

   public void setNumeroDependentes(int numeroDependentes) {
      this.numeroDependentes = numeroDependentes;
   }

   /**
    * @Action
    * @CallWhen numeroDependentes > 0
    */
   public void calculaTaxasAdicionais() {
      // ...
   }

   // ...
}
</source>
        <p>Diferentemente do exemplo original para <code>@VisibleWhen</code>, o
        método <code>calculaTaxasAdicionais()</code> será invocado
        automaticamente pelo genesis toda vez que a propriedade
        <code>numeroDependentes</code> for maior que zero.</p>
      </subsection>
    </section>
    <section name="Determinando se o campo está vazio">
      <p>A fim de realizar ou não algumas operações, o framework precisa
      determinar se um campo está vazio. Além disso, o fato de um campo estar
      preenchido ou não é uma informação que costuma ser utilizada pelo
      desenvolvedor para estabelecer condições nas anotações do genesis. A
      interface <code>EmptyResolver</code>, definida no pacote
      <code>net.java.dev.genesis.resolvers</code> é utilizada para isto.</p>
      <p>Esta interface expõe um único método, <code>isEmpty(Object)</code>, que
      retorna um <code>boolean</code>. Para especificar qual implementação de
      <code>EmptyResolver</code> deverá ser utilizada para determinado atributo
      basta anotá-lo com <code>@EmptyResolver</code>. A sintaxe desta anotação
      é:</p>
<source>
@EmptyResolver &lt;nomeCompletoClasseQueImplementaInterface&gt;
               &lt;atributos&gt;
</source>
      <p>Não é necessário quebrar a linha ao definir a anotação. Basta separar o
      nome da classe dos atributos com um espaço.</p>
      <p>Para evitar que fosse necessário especificar qual implementação de
      <code>EmptyResolver</code> deveria ser utilizada para cada atributo em
      cada form de uma aplicação, o genesis provê um mecanismo capaz de
      determinar uma implementação padrão com base no tipo do atributo. A classe
      <code>EmptyResolverRegistry</code> mantém um registro das implementações
      padrão de <code>EmptyResolver</code> por classe. As seguintes
      implementações padrão são mantidas inicialmente:</p>
      <ul>
        <li><code>MapEmptyResolver</code> é registrado para instâncias de
        <code>java.util.Map</code>. Considera como vazias instâncias nulas ou
        que retornem <code>true</code> para <code>isEmpty()</code>.</li>
        <li><code>CollectionEmptyResolver</code> é a implementação padrão para
        <code>java.util.Collection</code>. Usa o mesmo princípio que
        <code>MapEmptyResolver</code> para determinar as instâncias vazias.</li>
        <li>A implementação registrada para <code>String</code> é
        <code>StringEmptyResolver</code>. São consideradas vazias instâncias
        nulas ou de tamanho zero após removidos os espaços, i.e.,
        <code>s == null || s.trim().length() == 0</code>.</li>
        <li>Para todos os casos restantes é registrada uma instância de
        <code>DefaultEmptyResolver</code>. Esta implementação considera vazias
        instâncias nulas ou arrays com zero elementos.</li>
      </ul>
      <p>Estas implementações registradas como padrão devem ser suficientes para
      a maioria dos casos. Como exemplo de customização, consideremos o uso da
      anotação em um atributo de form no qual espaços vazios são relevantes:</p>
<source>
/**
 * @EmptyResolver trim=false
 */
public String getAtributo() {
   return atributo;
}
</source>
      <p>Visto que <code>String</code> já possui um <code>EmptyResolver</code>
      padrão registrado, <code>StringEmptyResolver</code>, e que esta
      implementação já expõe um atributo que permite configurar se os espaços
      serão removidos ou não, não é necessário especificar o nome da classe que
      implementa a interface e sim apenas definir a propriedade <code>trim</code
      > como <code>false</code>. Se não fosse possível configurar a instância
      padrão, uma outra implementação poderia ser usada da seguinte forma:</p>
<source>
/**
 * @EmptyResolver br.com.empresa.pacote.ImplementacaoEmptyResolver
 */
public String getAtributo() {
   return atributo;
}
</source>
      <subsection name="Verificando se um campo está vazio em expressões
          condicionais">
        <p>Conforme já mencionado, é muito comum determinar condições baseadas
        no fato de um campo estar vazio ou não. O genesis expõe funções JXPath
        auxiliares que podem ser usadas nas condições com o intuito de facilitar
        esta tarefa: <code>g:isEmpty(any)</code> e <code>g:isNotEmpty(any)</code
        >.</p>
        <p>Quando o valor passado para elas é uma propriedade do form, o
        <code>EmptyResolver</code> configurado para ela - determinado pelo
        processo acima descrito - é utilizado para determinar o retorno da
        função. Caso seja uma variável ou mesmo uma constante, obtém-se de <code
        >EmptyResolverRegistry</code> a implementação padrão de
        <code>EmptyResolver</code> para o tipo da expressão e esta é usada.
        Pode-se utilizar estas funções como mostrado abaixo:</p>
<source>
public String getAtributo() {
   return atributo;
}

public void setAtributo(String atributo) {
   this.atributo = atributo;
}

/**
 * @EnabledWhen g:isNotEmpty(atributo)
 */
public String getAtributoDependente() {
   return atributoDependente;
}

public void setAtributoDependente(String atributoDependente) {
   this.atributoDependente = atributoDependente;
}
</source>
      </subsection>
    </section>
    <section name="Comparando valores">
      <p>Tanto o próprio framework como o desenvolvedor precisa diversas vezes
      verificar se algum campo teve seu valor alterado ou se seu valor é igual
      ao de uma constante ou ao conteúdo de outro campo. A interface
      <code>EqualityComparator</code> definida em
      <code>net.java.dev.genesis.equality</code> é implementada por classes
      capazes de tomar essa decisão.</p>
      <p>Nesta interface é definido o método <code>equals(Object,Object)</code>
      que retorna um <code>boolean</code> indicando se as instâncias comparadas
      são iguais. A anotação de mesmo nome, <code>@EqualityComparator</code>
      pode ser usada para definir explicitamente a implementação utilizada para
      determinado atributo. Sua sintaxe é semelhante a de
      <code>@EmptyResolver</code>:</p>
<source>
@EqualityComparator &lt;nomeCompletoClasseQueImplementaInterface&gt;
                    &lt;atributos&gt;
</source>
      <p>Na maioria dos casos não será necessário utilizar a anotação visto que
      o genesis possui também para este caso um mecanismo padrão para determinar
      qual implementação da interface deve ser utilizada para um dado atributo.
      O registro das classes e suas implementações é mantido por
      <code>EqualityComparatorRegistry</code>. As implementações registradas por
      padrão são:</p>
      <ul>
        <li><code>BigDecimalEqualityComparator</code> considera duas instâncias
        de <code>java.math.BigDecimal</code> iguais se ambas forem nulas ou se o
        retorno do método <code>compareTo(BigDecimal)</code> invocado sobre uma
        delas for zero.</li>
        <li><code>StringEqualityComparator</code> considera <code>String</code>s
        nulas ou de tamanho zero após removidos os espaços como iguais. Também
        são consideradas iguais se <code>s1.trim().equals(s2.trim())</code>.</li
        >
        <li>Os casos restantes são tratados por
        <code>DefaultEqualityComparator</code> que determina como iguais duas
        instâncias nulas ou utiliza o retorno de <code>o1.equals(o2)</code>.</li
        >
      </ul>
      <subsection name="Verificando mudanças de valores em campos e fazendo
          comparações em expressões condicionais">
        <p>Quatro funções JXPath são exportadas pelo genesis para auxiliar o
        programador em tarefas comuns:</p>
        <ul>
          <li><code>g:hasChanged(propriedade)</code> e
          <code>g:hasNotChanged(propriedade)</code> verificam se ocorreram ou
          não mudanças no valor da propriedade do form.</li>
          <li><code>g:equals(any,any)</code> e <code>g:notEquals(any,any)</code>
          comparam dois valores - que podem ser constantes, propriedades do form
          ou variáveis - e retornam o resultado da comparação.</li>
        </ul>
        <p>O genesis mantém internamente um controle dos campos que tiveram seu
        valor alterado na iteração atual. É esta lista que é consultada pelas
        funções <code>g:hasChanged(propriedade)</code> e
        <code>g:hasNotChanged(propriedade)</code>. Para determinar se um valor
        foi alterado ou não e popular esta lista interna, o framework utiliza a
        instância de <code>EqualityComparator</code> configurada para a
        propriedade.</p>
        <p>As funções <code>g:equals(any,any)</code> e
        <code>g:notEquals(any,any)</code> também utilizam instâncias de
        <code>EqualityComparator</code> para determinar seu retorno. No entanto,
        o processo para isto é um pouco mais complexo, conforme explicado
        abaixo:</p>
        <ul>
          <li>É determinada a instância de <code>EqualityComparator</code> para
          cada um dos parâmetros. Se o parâmetro for uma propriedade do form, a
          implementação configurada para ele será utilizada. Caso contrário,
          será considerada a implementação padrão obtida através de consulta a
          <code>EqualityComparatorRegistry</code>.</li>
          <li>Se os comparadores dos dois parâmetros forem iguais, o primeiro
          deles será utilizado para compará-los.</li>
          <li>Se o primeiro parâmetro for da mesma classe ou uma subclasse do
          tipo do segundo parâmetro, a sua instância de
          <code>EqualityComparator</code> será utilizada para efetuar a
          comparação.</li>
          <li>Se o segundo parâmetro for da mesma classe ou uma subclasse do
          tipo do primeiro parâmetro, a sua instância de
          <code>EqualityComparator</code> será utilizada para efetuar a
          comparação.</li>
          <li>Se nenhuma das condições acima for verdade será retornado
          <code>false</code>.</li>
        </ul>
        <p>O uso de uma função de cada par é demonstrado abaixo:</p>
<source>
public BigDecimal getTaxa() {
   return taxa;
}

public void setTaxa(BigDecimal taxa) {
   this.taxa = taxa;
}

/**
 * @Action
 * @CallWhen g:hasChanged(taxa)
 */
public void recalculaValores() {
   // lógica de recálculo
}
</source>
<source>
public BigDecimal valorDevido() {
   return valorDevido;
}

public void setValorDevido(BigDecimal valorDevido) {
   this.valorDevido = valorDevido;
}

public BigDecimal valorPago() {
   return valorPago;
}

public void setValorPago(BigDecimal valorPago) {
   this.valorPago = valorPago;
}

/**
 * @Action
 * @CallWhen g:notEquals(valorDevido,valorPago)
 */
public void calculaMontanteCorrigido() {
   // lógica para cálculo do montante corrigido
}
</source>
      </subsection>
    </section>
    <section name="Populando combos e tabelas">
      <p>As opções disponíveis em um combo box podem variar de acordo com os
      dados preenchidos pelo usuário ou outras regras de negócio. O conteúdo de
      uma tabela pode precisar ser preenchido dinamicamente em resposta a um
      critério de filtro especificado pelo usuário, por exemplo. Para lidar com
      tais situações, existe uma anotação chamada <code>@DataProvider</code>,
      cuja sintaxe é:</p>
<source>
@DataProvider &lt;objectField=nomeCampoObjeto&gt;
              &lt;indexField=nomeCampoIndice&gt;
</source>
      <p>Esta anotação deve ser colocada em métodos que retornam uma
      <code>java.util.List</code> ou uma array. O retorno dos métodos será
      utilizado para popular a combo ou tabela. <code>objectField</code> deve
      receber o nome da propriedade, se houver, que guardará a instância
      selecionada no widget. Deve ser do mesmo tipo ou uma superclasse do tipo
      retornado no método anotado, uma array do tipo ou uma
      <code>Collection</code>. <code>indexField</code> é a propriedade que
      guardará os índices dos elementos selecionados no widget. Deve ser um
      <code>int</code> ou um <code>Integer</code>, uma array de um desses tipos
      ou uma <code>Collection</code>. Pelo menos um dos dois parâmetros deve ser
      informado.</p>
      <p>O <code>name</code> do widget na tela é igual ao nome da propriedade
      informada como <code>objectField</code> ou <code>indexField</code>, sendo
      que a primeira tem prioridade quando ambas forem informadas. Um exemplo de
      uso desta anotação é ilustrado abaixo:</p>
<source>
<![CDATA[
<panel gap="5">
   <label text="Estado:" />
   <combobox name="estado" property="key=sigla;value=descricao" />
</panel>
]]>
</source>
<source>
public class Estado {
   private String sigla;
   private String descricao;

   // getters e setters para as propriedades
}
</source>
<source>
/**
 * @Form
 */
public class ExemploDataProviderForm {
   private Estado estado;

   public Estado getEstado() {
      return estado;
   }

   public void setEstado(Estado estado) {
      this.estado = estado;
   }

   /**
    * @DataProvider objectField=estado
    */
   public Collection populaEstados() {
      // retorna uma Collection contendo instâncias de Estado
   }

   // ...
}
</source>
      <p>No primeiro bloco vemos o xml da tela que exibe um <code>label</code> e
      um combobox que conterá os estados em tempo de execução. A propriedade
      <code>name</code> possui o mesmo valor que o atributo
      <code>objectField</code> da anotação <code>@DataProvider</code> do
      terceiro bloco. Pode-se notar alguns valores configurados no atributo
      <code>property</code>. Os seguintes valores são utilizados no caso de
      comboboxes:</p>
      <ul>
        <li><b>key</b>: nome da propriedade do bean que será utilizado para
        popular o componente cujo valor é único por instância. É sempre
        requerido.</li>
        <li><b>value</b>: nome da propriedade utilizada para exibir o bean. É
        requerida quando o bean não for uma subclasse de
        <code>net.java.dev.reusablecomponents.lang.Enum</code>.</li>
        <li><b>blank</b>: inclui uma linha em branco como primeira opção da
        combobox. Não é requerida e tem como valor padrão <code>false</code>.
        </li>
      </ul>
      <p>Conforme indicado pelo valor do atributo <code>objectField</code>, a
      propriedade <code>estado</code> conterá a instância de <code>Estado</code>
      correspondente à opção da combo escolhida pelo usuário.</p>
      <p>Os requerimentos para popular uma table são um pouco diferentes. Para
      exibir numa tabela os estados do exemplo anterior, o xml da interface
      poderia ser assim:</p>
<source>
<![CDATA[
<panel gap="5">
   <table name="estado">
      <header>
         <column name="sigla" text="Sigla" />
         <column name="descricao" text="Descrição" />
      </header>
   </table>
</panel>
]]>
</source>
      <p>Com base no exemplo acima, podemos observar que o valor de <code>name
      </code> na tabela precisa ser igual ao valor do atributo
      <code>objectField</code>. Cada linha representará uma instância e cada
      coluna será preenchida com a propriedade do bean cujo nome é o valor de
      <code>name</code> em cada uma delas.</p>
      <p>A anotação <code>@CallWhen</code> pode ser usada em conjunto com
      <code>@DataProvider</code> para indicar sob que condição a tabela/combo
      será repopulada. <code>@Action</code> pode ser usado no mesmo método caso
      este também possa ser acionado por um botão (como Pesquisar, por exemplo)
      e, quando isso ocorrer, o uso de <code>@EnabledWhen</code> e
      <code>@VisibleWhen</code> também será possível.</p>
    </section>
    <section name="Formatação">
      <p>Visto que formatar as informações para que sejam exibidas na tela é uma
      parte importante de qualquer aplicação com interface gráfica, espera-se
      que isto seja fácil de fazer e configurável. A API que é utilizada para
      este propósito no genesis encontra-se implementada no pacote
      <code>net.java.dev.genesis.text</code>.</p>
      <p>Encontra-se neste pacote a interface <code>Formatter</code>, que define
      o método <code>format(Object)</code>. Este método converte o objeto
      passado em uma String formatada. Da mesma forma como outros componentes
      comuns do framework, existe um registro padrão de implementações da
      interface, a classe <code>FormatterRegistry</code>. As seguintes
      implementações estão registradas por padrão nessa classe:</p>
      <ul>
        <li><code>EnumFormatter</code> converte instâncias de
        <code>net.java.dev.reusablecomponents.lang.Enum</code> procurando no
        <a href="#Configurando as mensagens"><code>ResourceBundle</code></a> a
        mensagem configurada para a chave formada pelo nome da classe sem pacote
        + "." + nome da constante. Se esta não for encontrada, uma mensagem de
        prioridade INFO será logada e a instância convertida com
        <code>toString()</code>.</li>
        <li><code>DefaultFormatter</code> é registrado para todos os outros
        tipos e converte as instâncias utilizando <code>toString()</code> -
        exceto se forem <code>null</code>, quando retorna uma String com tamanho
        zero.</li>
      </ul>
      <p>Para registrar um novo formatador para uma classe basta utilizar o
      método <code>register(Class,Formatter)</code> em
      <code>FormatterRegistry</code>.</p>
    </section>
    <section name="Validando os dados">
      <p>A validação de dados é crítica para a integridade de um sistema,
      especialmente quando esses dados são entrados pelo usuário, como no caso
      de uma interface gráfica. O suporte a validação no genesis é implementado
      utilizando-se de um dos componentes do projeto Jakarta, o <a href=
      "http://jakarta.apache.org/commons/validator/">commons-validator</a>.
      Diversos outros softwares open-source utilizam o commons-validator como
      componente de validação, incluindo o Struts, o que aumenta as chances de
      já se estar familiarizado com ele. Caso contrário, recomendamos a leitura
      da documentação no próprio site do projeto.</p>
      <p>A anotação <code>@ValidateBefore</code> pode ser colocada em ações que
      só podem ser executadas quando a validação for bem-sucedida. Caso ocorra
      algum erro de validação será lançada uma
      <code>net.java.dev.genesis.ui.ValidationException</code>, que já é <a
      href="#Tratando erros">tratada por padrão</a> pelo framework de modo a
      exibir os erros formatados para o usuário.</p>
      <p>Diversos validadores padrão encontram-se implementados em
      <code>BasicValidator</code>, do pacote <code>net.java.dev.genesis.ui</code
      >. Estes validadores são, em grande parte, semelhantes aos providos com o
      Struts, o que facilita sua compreensão. São eles:</p>
      <ul>
        <li><code><b>byte</b>, <b>short</b>, <b>int</b>, <b>long</b>,
        <b>float</b> e <b>double</b></code>: verificam se o dado pode ser
        convertido para um desses tipos sem estouro de faixa.</li>
        <li><code><b>bigDecimal</b></code>: verifica se o tipo pode ser
        convertido para <code>java.math.BigDecimal</code> utilizando o conversor
        padrão do <a href="http://jakarta.apache.org/commons/beanutils">
        BeanUtils</a> registrado para ele. O genesis provê uma implementação
        personalizada deste conversor, <code>BigDecimalConverter</code> em
        <code>net.java.dev.genesis.commons.beanutils.converters</code>, visto
        que as implementações que acompanham com o BeanUtils não funcionam da
        maneira esperada para o Locale pt-BR.</li>
        <li><code><b>date</b></code>: implementação validação de datas. Pode
        utilizar a variável <code>pattern</code> como padrão de data válido.
        Este padrão é compatível com os especificados para a classe
        <code>java.text.DateFormat</code>.</li>
        <li><code><b>email</b></code>: somente aceita conteúdo que possa ser
        considerado um email sintaticamente válido.</li>
        <li><code><b>required</b></code>: assegura que o campo não esteja vazio.
        </li>
        <li><code><b>requiredif</b></code>: compatível com a versão que
        acompanha o Struts, implementa um tipo de validação relativamente fraco.
        Seu uso não é recomendado e é provido somente para facilitar a migração
        de usuários do Struts. Utilize <code><b>jxpath</b></code> ao invés
        deste.</li>
        <li><code><b>mask</b></code>: implementa validação com base numa
        expressão regular de máscara. Requer a definição da variável
        <code>mask</code> contendo a expressão regular.</li>
        <li><code><b>minlength</b> e <b>maxlength</b></code>: garantem que o
        dado informado possui um número não inferior e não superior,
        respectivamente, ao número máximo de caracteres definido através da
        variável <code>minlength</code> e <code>maxlength</code>.</li>
        <li><code><b>longRange</b>, <b>doubleRange</b> e <b>bigDecimalRange</b>
        </code>: verificam se o número informado encontra-se dentro da faixa
        esperada, definida através das variáveis <code>min</code> e
        <code>max</code>.</li>
        <li><code><b>jxpath</b></code>: o mais flexível validador provido com o
        genesis. Considera o dado válido se a análise da expressão JXPath
        definida pela variável <code>jxpath</code> retornar um dado diferente de
        <code>java.lang.Boolean.FALSE</code>.</li>
      </ul>
      <p>Assim como os validadores do Struts, todos os providos com o genesis,
      exceto pelo <code>jxpath</code> só são acionados se o campo estiver
      preenchido. Isso significa que <b>mesmo que você configure seu validador
      corretamente, ele só será invocado quando o usuário preencher algo no
      campo</b>. Se sua intenção é que o validador seja sempre executado,
      <code>required</code> também deverá estar configurado para o campo.</p>
      <p>Os dados a serem validados são passados ainda em formato String para os
      validadores. É importante lembrar-se disso ao escrever expressões JXPath
      ou quando se utiliza um validador customizado.</p>
      <p>A classe que integra o commons-validator ao genesis,
      <code>net.java.dev.genesis.ui.ValidationUtils</code>, espera que dois
      arquivos de configuração estejam disponíveis no classpath:
      <code>validation-rules.xml</code> e <code>validation.xml</code>. Estes
      arquivos devem estar de acordo com o DTD para o commons-validator 1.1. Uma
      configuração padrão para <code>validation-rules.xml</code> é provida no
      jar do genesis-client, como abaixo:</p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE form-validation PUBLIC
   '-//Apache Software Foundation//DTD Commons Validator Rules Configuration
   1.1//EN'
   'http://jakarta.apache.org/commons/dtds/validator_1_1.dtd'>
<form-validation>
    <global>
        <validator name="byte"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateByte"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.byte"/>
        <validator name="short"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateShort"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.short"/>
        <validator name="int"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateInt"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.int"/>
        <validator name="long"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateLong"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.long"/>
        <validator name="float"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateFloat"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.float"/>
        <validator name="double"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateDouble"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.double"/>
        <validator name="bigDecimal"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateBigDecimal"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.bigdecimal"/>
        <validator name="required"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateRequired"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.required"/>
        <validator name="requiredif"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateRequiredIf"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field,org.apache.
                commons.validator.Validator"
                msg="errors.requiredif"/>
        <validator name="mask"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateMask"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.mask"/>
        <validator name="email"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateEmail"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.email"/>
        <validator name="date"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateDate"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.date"/>
        <validator name="minlength"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateMinLength"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.minlength"/>
        <validator name="maxlength"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateMaxLength"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.maxlength"/>
        <validator name="longRange"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateLongRange"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.longRange"/>
        <validator name="doubleRange"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateDoubleRange"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.doubleRange"/>
        <validator name="bigDecimalRange"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateBigDecimalRange"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.bigDecimalRange"/>
        <validator name="jxpath"
                classname="net.java.dev.genesis.ui.BasicValidator"
                method="validateJXPath"
                methodParams=
                "java.lang.Object,org.apache.commons.validator.Field"
                msg="errors.jxpath"/>
    </global>
</form-validation>
]]>
</source>
      <p>Na maioria dos casos, uma forma prática de se configurar a validação
      por form é utilizar o <a href="http://xdoclet.sf.net">XDoclet</a>. Um
      exemplo de configuração de validação do exemplo useradmin é a classe
      <code>InsertUpdateForm</code>, do pacote
      <code>net.java.dev.genesis.samples.useradmin.ui</code>, parcialmente
      transcrito abaixo:</p>
<source>
/**
 * @Form
 * @struts.form
 */
public class InsertUpdateForm {
   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.birthday"
    *
    * @struts.validator type="date"
    * @struts.validator-var name="pattern" value="MM/dd/yyyy"
    */
   public void setBirthday(Date birthday) {
      this.birthday = birthday;
   }

   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.country"
    */
   public void setCountry(Country country) {
      this.country = country;
   }

   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.email"
    *
    * @struts.validator type="email"
    * @struts.validator-args arg0resource="User.email"
    */
   public void setEmail(String email) {
      this.email = email;
   }

   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.role"
    */
   public void setRole(Role role) {
      this.role = role;
      setRoleCode(role == null ? null : role.getCode());
   }

   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.login"
    *
    * @struts.validator type="minlength" arg1value="${var:minlength}"
    * @struts.validator-var name="minlength" value="4"
    */
   public void setLogin(String login) {
      this.login = login;
   }

   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.name"
    */
   public void setName(String name) {
      this.name = name;
   }

   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.password"
    *
    * @struts.validator type="minlength" arg1value="${var:minlength}"
    * @struts.validator-var name="minlength" value="6"
    *
    * @struts.validator type="maxlength" arg1value="${var:maxlength}"
    * @struts.validator-var name="maxlength" value="8"
    */
   public void setPassword(String password) {
      this.password = password;
   }

   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.address"
    */
   public void setAddress(String address) {
      this.address = address;
   }

   /**
    * @struts.validator type="required"
    * @struts.validator-args arg0resource="User.state"
    */
   public void setState(State state) {
      this.state = state;
   }

   /**
    * @Action
    * @ValidateBefore
    */
   public void save() throws Exception {
      final User user = new User();
      PropertyUtils.copyProperties(user, this);
      if (getId() == null) {
         new UserCreateCommand().createUser(user);
      } else {
         new UserUpdateCommand().updateUser(user);
      }
   }

   // ...
}
</source>
      <p>Antes da chamada a <code>save()</code> ser executada, a validação é
      realizada de acordo com as regras do arquivo gerado e eventuais erros
      impedem a execução do método. Para aqueles que não estão familiarizados
      com o XDoclet, encontra-se abaixo o arquivo <code>validation.xml</code>
      gerado automaticamente durante a execução do build:</p>
<source>
<![CDATA[
<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE form-validation PUBLIC
   '-//Apache Software Foundation//DTD Commons Validator Rules Configuration
   1.1//EN'
   'http://jakarta.apache.org/commons/dtds/validator_1_1.dtd'>
<form-validation>
  <!--
    Define global validation config in validation-global.xml
  -->
  <formset>
      <form name="net.java.dev.genesis.samples.useradmin.ui.InsertUpdateForm">
              <field property="birthday"
                     depends="required,date">
                  <arg position="0"
                       key="User.birthday"
                  />
                  <var>
                    <var-name>pattern</var-name>
                    <var-value>MM/dd/yyyy</var-value>
                  </var>
              </field>
              <field property="country"
                     depends="required">
                  <arg position="0"
                       key="User.country"
                  />
              </field>
              <field property="email"
                     depends="required,email">
                  <arg position="0"
                       key="User.email"
                  />
              </field>
              <field property="role"
                     depends="required">
                  <arg position="0"
                       key="User.role"
                  />
              </field>
              <field property="login"
                     depends="required,minlength">
                  <arg position="0"
                       key="User.login"
                  />
                  <arg position="1"
                       name="minlength"
                       key="${var:minlength}"
                       resource="false"
                  />
                  <var>
                    <var-name>minlength</var-name>
                    <var-value>4</var-value>
                  </var>
              </field>
              <field property="name"
                     depends="required">
                  <arg position="0"
                       key="User.name"
                  />
              </field>
              <field property="password"
                     depends="required,minlength,maxlength">
                  <arg position="0"
                       key="User.password"
                  />
                  <arg position="1"
                       name="minlength"
                       key="${var:minlength}"
                       resource="false"
                  />
                  <arg position="1"
                       name="maxlength"
                       key="${var:maxlength}"
                       resource="false"
                  />
                  <var>
                    <var-name>minlength</var-name>
                    <var-value>6</var-value>
                  </var>
                  <var>
                    <var-name>maxlength</var-name>
                    <var-value>8</var-value>
                  </var>
              </field>
              <field property="address"
                     depends="required">
                  <arg position="0"
                       key="User.address"
                  />
              </field>
              <field property="state"
                     depends="required">
                  <arg position="0"
                       key="User.state"
                  />
              </field>
      </form>
  </formset>
</form-validation>
]]>
</source>
      <p>É utilizado também um arquivo de recursos para configurar as mensagens,
      logo abaixo descrito.</p>
    </section>
    <section name="Configurando as mensagens">
      <p>Diversas mensagens podem ser configuradas externamente ao código
      utilizando-se um <code>java.util.ResourceBundle</code>. O
      <code>ResourceBundle</code> permite armazenar um dicionário de
      propriedades nome/valor - similar a um <code>Properties</code> -,
      suportando múltiplos <code>java.util.Locale</code>s. De forma
      simplificada, é possível configurar mensagens diferentes de acordo com o
      idioma utilizado.</p>
      <p>O genesis utiliza um <code>ResourceBundle</code> de nome
      <code>messages</code>, de modo que deve existir um
      <code>messages.properties</code> no classpath. A classe
      <code>net.java.dev.genesis.ui.UIUtils</code> mantém a instância deste
      <code>ResourceBundle</code> durante a execução.</p>
      <p>São configurados no arquivo de recursos mensagens e texto referentes a:
      </p>
      <ul>
        <li>Validação</li>
        <li>Valores de display das <code>Enum</code>s (no formato
        <code>Classe.CONSTANTE=Valor de display</code>)</li>
        <li>Mensagens das telas padrão providas com o genesis, como a tela
        utilizada por <code>OptionDialog</code></li>
        <li>Quaisquer textos definidos pelo usuário que devam ser externalizados
        do código</li>
      </ul>
      <p>Abaixo há um exemplo de configuração do <code>ResourceBundle</code>
      para o exemplo useradmin:</p>
<source>
# 1. Configuração para validação
errors.byte=The {0} field is not a byte.
errors.short=The {0} field is not a short.
errors.int=The {0} field is not an integer.
errors.long=The {0} field is not a long.
errors.float=The {0} field is not a float.
errors.double=The {0} field is not a double.
errors.bigdecimal=The {0} field is not a big decimal.
errors.required=The {0} field is required.
errors.requiredif=The {0} field is required.
errors.mask=The {0} field is not valid.
errors.email=The {0} field is not a valid email.
errors.date=The {0} field is not a valid date.
errors.minlength=The {0} field can not be less than {1} characters.
errors.maxlength=The {0} field can not be greater than {1} characters.
errors.longRange={0} is not in the range {1} through {2}.
errors.doubleRange={0} is not in the range {1} through {2}.
errors.bigDecimalRange={0} is not in the range {1} through {2}.
errors.jxpath=The {0} field is not valid.
validation.errors.title=Validation errors

# 2. Configuração das mensagens das telas
MessageDialog.close=Close
Option.YES=Yes
Option.NO=No
Option.CANCEL=Cancel
ErrorReporterDialog.ok=OK
ErrorReporterDialog.stackTrace=Stack Trace:

# 3. Configurações personalizadas do usuário
InsertRoleView.title=Insert Role
InsertView.title=Insert User
UpdateView.title=Update User
RoleListView.title=Role List
UserListView.title=Users Administration

button.ok=Ok
button.add=Add
button.remove=Remove
button.cancel=Cancel
button.save=Save
button.search=Search
button.reset=Reset
button.newUser=New User
button.updateUser=Update User
button.removeUser=Remove User

User.name=Name
User.login=Login
User.password=Password
User.email=e-mail
User.birthday=Birthday
User.address=Address
User.country=Country
User.state=State
User.role=Role

Role.label=Label
Role.code=Code
</source>
      <p>Para mais informações sobre como trabalhar com arquivos de recurso
      consulte o Javadoc da classe <code>java.util.ResourceBundle</code>.</p>
    </section>
    <section name="Trabalhando com pesquisas dinâmicas">
      <p>O genesis facilita a construção de pesquisas dinâmicas - cujos
      critérios de seleção mudam em tempo de execução, não os valores passados
      para estes - integrando essa funcionalidade tanto com os componentes de
      interface gráfica como com os componentes de negócio.</p>
      <p>Na parte cliente, para permitir que somente as propriedades prenchidas
      sejam utilizadas na busca, basta fazer:</p>
<source>
CriteriaPropertyHelper.fillCriteria(hibernateCriteria, form);
</source>
      <p>A classe <code>CriteriaPropertyHelper</code> encontra-se no pacote
      <code>net.java.dev.genesis.helpers</code>. <code>hibernateCriteria</code>
      deve obedecer os
      <a href="business_component_model.html#Pesquisas dinâmicas com Criteria">
      requisitos para componentes de negócio para pesquisas dinâmicas</a>
      enquanto <code>form</code> deve ser um form do genesis válido. Serão
      copiadas as propriedades que existam em ambos os beans e que estejam
      preenchidas no form de acordo com as
      <a href="#Determinando se o campo está vazio">regras para determinar
      campos vazios</a>. A chamada a <code>fillCriteria(HibernateCriteria,
      Object)</code> deverá ser feita antes da chamada ao método anotado com
      <code>@Criteria</code>.</p>
    </section>
  </body>
</document>