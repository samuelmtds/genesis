<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>genesis aspects</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="genesis aspects">
      <p>A number of genesis features are implemented using aspects. AOP usage
      makes it possible to extend these features in a significant way with no
      need to change business or UI code. This documentation section aim is to
      describe these aspects so that advanced users can understand and customize
      their behaviour. In order to fully understand this section, AOP,
      AspectWerkz, EJB and Thinlet knowledge is required.</p>
      <ul>
        <li><a href="#Determining remotable and transactional methods">
        Determining remotable and transactional methods</a></li>
        <li><a href="#Executing remotable and transactional methods">Executing
        remotable and transactional methods</a></li>
        <li><a href="#Executing dynamic searches">Executing dynamic searches</a>
        </li>
        <li><a href="#Limiting method execution time">Limiting method execution
        time</a></li>
        <li><a href="#Changing mouse cursor during event handling">Changing
        mouse cursor during event handling</a></li>
        <li><a href="#Instantiating metadata">Instantiating metadata</a></li>
        <li><a href="#Configuration reference">Configuration reference</a>
        </li>
      </ul>
    </section>
    <section name="Determining remotable and transactional methods">
      <p>Interface <code>CommandResolver</code>, contained in package
      <code>net.java.dev.genesis.aspect</code>, is used to determine whether a
      method is remotable or transactional or not. Below, it is possible to see
      the relevant code section for the interface definition:</p>
<source>
public interface CommandResolver {
   public boolean isRemotable(Method m);
   public boolean isTransactional(Method m);
}
</source>
      <p>Aspect <code>CommandInvocationAspect</code>, defined in the same
      package as the interface, has a inner class that implements this
      interface, <code>CommandResolverImpl</code>, that decides whether a method
      is remotable/transactional or not if it is annotated with
      <code>@Remotable</code> or <code>@Transactional</code> or if the class
      containing the method implements <code>Query</code> or
      <code>Transaction</code>, deprecated interfaces from genesis 0.1.</p>
      <p>If the value for the aspect parameter named <code>useFastMode</code> is
      <code>true</code> - that is its default value -, any method will be
      considered remotable, since in the provided aop.xml configuration only
      remotable or transactional methods are intercepted by the execution
      pointcut. This implementation is introduced in classes selected by the
      pointcut named <code>commandResolverIntroduction</code>.</p>
      <p>If it is necessary to determine if a method is remotable or
      transactional using a different strategy - based on an external xml
      definition instead of using annotation, for example -, one just have to
      provide a custom implementation of <code>CommandResolver</code> that takes
      this decision using this strategy and introduce it into business classes.
      </p>
    </section>
    <section name="Executing remotable and transactional methods">
      <p>Remotable and transactional method execution is intercepted by an
      aspect so that instances can be transfered (or not, as we'll see soon) to
      the server and an appropriate transactional context can be used for
      executing the original call. Besides that, dependency injection is done
      before execuction.</p>
      <p>Two components implement that: an aspect and a
      <code>net.java.dev.genesis.command.TransactionalInjector</code>
      implementation. Interface <code>TransactionalInjector</code> is defined as
      follows:</p>
<source>
public interface TransactionalInjector {
   public void init(Object context);
   public void beforeInvocation(Object target, boolean transactional)
                                                          throws Exception;
   public void afterInvocation() throws Exception;
   public void onException(Exception e);
   public void onFinally() throws Exception;
}
</source>
      <p>The interface implementation is used by aspects in a well defined
      manner, as follow:</p>
      <ol>
        <li>Right after instantiation, method <code>init(Object)</code> is
        called with a context object as a parameter. This context object is
        execution mode specific - local, in an EJB environment etc. - and it
        allows the newly created instance to read user defined configurations.
        </li>
        <li>The <code>beforeInvocation(Object,boolean)</code> method is invoked
        before executing any remotable or transactional method. Its arguments
        are the object in which the method will be called and the transactional
        status for the call. At this moment eventual dependencies should be
        injected into the instance and that a transaction should be started if
        necessary.</li>
        <li><code>afterInvocation()</code> is only invoked when method execution
        happens with no errors, i.e., when no exception is thrown. It's when a
        transaction should be commited.</li>
        <li><code>onException(Exception)</code> gets called if an exception if
        thrown during <code>beforeInvocation(Object,boolean)</code> method or
        during execution of the remotable/transactional method. That's the
        moment to rollback the transaction.</li>
        <li><code>onFinally()</code> is always called and should release any
        resources allocated during execution.</li>
      </ol>
      <p>Each <code>TransactionalInjector</code> instance will be used by just
      one Thread.</p>
      <p>By using custom aspects and implementations of
      <code>TransactionalInjector</code> it is possible to completely change the
      way transactions are executed and perform any type of dependency
      injection in business components. Two powerful execution modes are
      provided with genesis and explained below.</p>
      <subsection name="Local execution">
        <p>Local execution is performed by the
        <code>LocalCommandExecutionAspect</code> aspect. Basically, this aspect
        delegates most of the work to a <code>TransactionalInjector</code>
        implementation, as the following code snippet proves:
        </p>
<source>
try {
   injector.beforeInvocation(obj, transactional);
   final Object ret = joinPoint.proceed();
   injector.afterInvocation();

   return ret;
} catch (final Exception e) {
   injector.onException(e);

   throw e;
} finally{
   injector.onFinally();
}
</source>
        <p>Pointcut <code>localCommandExecution</code> is used to define which
        method execution should be intercepted by advice
        <code>commandExecution(JoinPoint)</code>. A
        <code>TransactionalInjector</code> implementation can be configured by
        setting the aspect parameter <code>transactionalInjector</code> to the
        class name. The context object passed as an argument to
        <code>init(Object)</code> will be the <code>CrossCuttingInfo</code>
        instance the aspect holds.</p>
        <p>Class <code>HibernateTransactionalInjector</code>, that is also
        contained in <code>net.java.dev.genesis.aspect</code> is an appropriate
        <code>TransactionalInjector</code> implementation for this scenario. It
        introduces a Hibernate session in classes that implement
        <code>net.java.dev.genesis.command.hibernate.HibernateCommand</code> and
        it controls transactions using resources provided by the Hibernate
        session itself.</p>
      </subsection>
      <subsection name="Remote EJB execution">
        <p>Another execution possibility bundled with genesis is executing the
        call inside a Stateless Session Bean, taking advantage of container
        managed transactions (CMT). Aspect <code>EJBCommandExecutionAspect</code
        > does that by invoking
        <code>executeTransaction(Object,String,String[],Object[])</code> and
        <code>executeQuery(Object,String,String[],Object[])</code> in the EJB
        instance whose remote interface is
        <code>net.java.dev.genesis.ejb.CommandExecutor</code>. Argument values
        for both methods are the instance for which a method will be invoked,
        method name, class names for method signature and values used in the
        original invocation.</p>
        <p>Advice <code>commandExecution(JoinPoint)</code> will actually do a
        remote invocation to the Session Bean instance. Pointcut named
        <code>ejbCommandExecution</code> will be used to select which method
        execution should be performed remotely. Aspect parameter named
        <code>jndiName</code> contains the JNDI address for the EJB home
        instance, while the boolean parameter <code>retryOnNoSuchObject</code>
        indicates whether execution should be retried (just once more) when a
        <code>java.rmi.NoSuchObjectException</code> is thrown (that may happen
        if the application server is restarted).</p>
        <p>Since method execution takes place in a Session Bean instance, the
        <code>TransactionalInjector</code> implementation resides on the server,
        and it can be specified as the value for an env-entry named
        <code>TransactionalInjector</code>. The context object passed as an
        argument to <code>init(Object)</code>, is the instance of
        <code>SessionContext</code> the Session Bean instance holds.</p>
        <p>Implementation <code>
        net.java.dev.genesis.ejb.hibernate.EJBHibernateTransactionalInjector
        </code> provided by genesis is the appropriate one for this
        configuration. During its <code>init(Object)</code> method execution, a
        Hibernate <code>SessionFactory</code> implementation is retrived from
        the JNDI adress specified as a value for env-entry
        <code>HibernateFactoryAddress</code>. The transaction mechanism used by
        this implementation is JTA, since only methods that use CMT are involved
        in execution. Rollback will be performed, if necessary, by calling
        <code>setRollbackOnly()</code> in the <code>SessionContext</code>
        instance.</p>
      </subsection>
    </section>
    <section name="Executing dynamic searches">
      <p>Dynamic searches, i.e., classes that have a <code>Criteria</code>
      instance injected on them and have setters invoked for non-empty
      properties, are executed by the
      <code>net.java.dev.genesis.aspect.CriteriaCommandExecutionAspect</code>
      aspect.</p>
      <p>Every class intercepted by this aspect must implement
      <code>net.java.dev.genesis.command.hibernate.CriteriaResolver</code>,
      shown below:</p>
<source>
public interface CriteriaResolver {
   public Map getPropertiesMap();
   public void setPropertiesMap(final Map propertiesMap);
}
</source>
      <p>Method <code>setPropertiesMap(Map)</code> will be invoked on the client
      side passing only data that will be used for performing the search.
      Usually this method will be invoked indirectly by calling the auxiliary
      method <code>fillCriteria(HibernateCriteria,Object)</code> contained in
      <code>net.java.dev.genesis.helpers.CriteriaPropertyHelper</code>.</p>
      <p>Pointcut named <code>criteriaResolverIntroduction</code> defines which
      classes will have an implementation of this interface called
      <code>CriteriaResolverImpl</code> introduced into them. This is static
      inner class of the aspect. This implementation uses a member variable
      whose type is <code>java.util.Map</code> to keep and expose properties.</p
      >
      <p>Pointcut named <code>criteriaCommandExecution</code> defines which
      methods will be intercepted by the <code>commandExecution(JoinPoint)</code
      > advice. This method relies on information returned by
      <code>getPropertiesMap()</code> in <code>CriteriaResolver</code> to
      determine which properties will be used for the search, together with the
      method signature and argument values to instantiate
      <code>net.java.dev.genesis.command.hibernate.CriteriaCommandExecutor</code
      >. Method <code>execute()</code> will be called on the new instance. Since
      this method is annotated as <code>@Remotable</code>, it will be
      intercepted for <a
      href="#Remote EJB execution">remote execution</a>. This method initializes
      a <code>Criteria</code> instance (when the name of a Hibernate mapped
      class is configured for the annotation), injects it into the instance,
      invokes setters for search criteria and invokes the search method.</p>
    </section>
    <section name="Limiting method execution time">
      <p>Aspect <code>TimeoutAspect</code> allows controlling how long a method
      takes to execute; if the execution times out, a
      <code>net.java.dev.genesis.exception.TimeoutException</code> will be
      thrown.</p>
      <p>The time limit is configured by the aspect parameter named
      <code>timeout</code>. Pointcut named <code>timeout</code> selects methods
      whose execution will be intercepted by advice
      <code>timeoutAdvice(JoinPoint)</code>. This advice executes the
      intercepted method in a new thread and waits for its completion for
      <code>timeout</code> seconds. Any exception that could be normally thrown
      by the intercepted method is thrown back to the caller.</p>
    </section>
    <section name="Changing mouse cursor during event handling">
      <p>In order to allow a user to realize a time consuming operation is being
      performed, aspect <code>WaitCursorAspect</code> changes the mouse cursor
      to a wait cursor during a UI event handling method.</p>
      <p>Pointcut named <code>waitCursorExecution</code> specify which methods
      perform event handling and must be intercepted by the advice named
      <code>waitCursorExecution(JoinPoint)</code>. This advice saves the current
      cursor, changes it to a wait cursor and then restore the original cursor
      when event handling is done. It is expected that the intercepted methods
      belong to a <code>java.awt.Component</code> instance, since this class is
      the one that defines methods for getting and setting the current cursor.
      </p>
    </section>
    <section name="Instantiating metadata">
      <p>All form to view binding is based on metadata exposed by both sides.
      This metadata model can be found at
      <code>net.java.dev.genesis.ui.metadata</code> for forms and at
      <code>net.java.dev.genesis.ui.thinlet.metadata</code> for views. For both
      packages, there are interfaces - <code>FormMetadataFactory</code> and
      <code>ThinletMetadataFactory</code> -, that need to be implemented by
      classes responsible for returning metadata. Below there is a transcription
      of relevant code snippets for both of them:</p>
<source>
public interface FormMetadataFactory {
    public FormMetadata getFormMetadata(Class formClass);
}
</source>
<source>
public interface ThinletMetadataFactory {
   public ThinletMetadata getThinletMetadata(Class formClass);
}
</source>
      <p>Aspects <code>FormMetadataFactoryAspect</code> and
      <code>ThinletMetadataFactoryAspect</code> define implementations of these
      interfaces that use annotation for building metadata. The implementations
      are called <code>AspectFormMetadataFactory</code> and
      <code>AspectThinletMetadataFactory</code> and they are static inner
      classes of the aspects. Classes that need to have these implementations
      introduced into them are selected by pointcuts named
      <code>formMetadataFactoryIntroduction</code> and
      <code>thinletMetadataFactoryIntroduction</code>. To override the way
      metadata is created - by using an external xml definition, for example -
      one just have to introduce different interface implementations in forms
      and views.</p>
    </section>
    <section name="Configuration reference">
      <p>There are below a few useful tables for advanced developers and also a
      default configuration that should be enough for most situations.</p>
      <subsection name="Parameters">
        <table>
          <tr>
            <th>Aspect</th>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Mandatory</th>
            <th>Default value</th>
          </tr>
          <tr>
            <td>CommandInvocationAspect</td>
            <td>useFastMode</td>
            <td>boolean</td>
            <td>Indicates whether the process that decides whether a method is
            remotable or not will be actually executed or if every intercepted
            method will be considered as being at least remotable</td>
            <td><b>Yes</b></td>
            <td><code>true</code></td>
          </tr>
          <tr>
            <td>CriteriaCommandExecutionAspect</td>
            <td>useOriginalMethod</td>
            <td>boolean</td>
            <td>Configures how the name for the method to be executed will be
            obtained from the <code>MethodJoinPoint</code> instance. It should
            be <code>true</code> for local execution modes.</td>
            <td>No</td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td rowspan="2">EJBCommandExecutionAspect</td>
            <td>jndiName</td>
            <td>String</td>
            <td>JNDI address a
            <code>net.java.dev.genesis.ejb.CommandExecutorHome</code> instance
            can be obtained from</td>
            <td><b>Yes</b></td>
            <td>None</td>
          </tr>
          <tr>
            <td>retryOnNoSuchObject</td>
            <td>boolean</td>
            <td>Indicates whether the method should be called again if a
            <code>java.rmi.NoSuchObjectException</code> occurs</td>
            <td>No</td>
            <td><code>true</code></td>
          </tr>
          <tr>
            <td>LocalCommandExecutionAspect</td>
            <td>transactionalInjector</td>
            <td>Fully qualified class name</td>
            <td>Name for a
            <code>net.java.dev.genesis.command.TransactionalInjector</code>
            implementation</td>
            <td><b>Yes</b></td>
            <td>None</td>
          </tr>
          <tr>
            <td>TimeoutAspect</td>
            <td>timeout</td>
            <td>long</td>
            <td>Maximum amount of milliseconds a method execution can take</td>
            <td><b>Yes</b></td>
            <td>None</td>
          </tr>
        </table>
      </subsection>
      <subsection name="Named pointcuts">
        <p>Named pointcuts will only be available when the annotated jar is used
        and, under these conditions, attributing values for them is mandatory if
        the aspect that defines them is configured.</p>
        <table>
          <tr>
            <th>Aspect</th>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>CommandInvocationAspect</td>
            <td>commandResolverIntroduction</td>
            <td>Class</td>
            <td>Introduces interface
            <code>net.java.dev.genesis.aspect.CommandResolver</code> having
            <code>CommandInvocationAspect$CommandResolverImpl</code> as its
            implementation</td>
          </tr>
          <tr>
            <td rowspan="2">CriteriaCommandExecutionAspect</td>
            <td>criteriaCommandExecution</td>
            <td>Method</td>
            <td>Intercepts dynamic search method execution</td>
          </tr>
          <tr>
            <td>criteriaResolverIntroduction</td>
            <td>Class</td>
            <td>Introduces interface
            <code>net.java.dev.genesis.command.hibernate.CriteriaResolver</code>
            having
            <code>CriteriaCommandExecutionAspect$CriteriaResolverImpl</code> as
            its implementation</td>
          </tr>
          <tr>
            <td>EJBCommandExecutionAspect</td>
            <td>ejbCommandExecution</td>
            <td>Method</td>
            <td>Intercepts remotable and transactional method execution and
            transfer the instance for which the method has been called to the
            server</td>
          </tr>
          <tr>
            <td>FormMetadataFactoryAspect</td>
            <td>formMetadataFactoryIntroduction</td>
            <td>Class</td>
            <td>Introduces interface
            <code>net.java.dev.genesis.ui.metadata.FormMetadataFactory</code>
            having
            <code>FormMetadataFactoryAspect$AspectFormMetadataFactory</code> as
            its implementation</td>
          </tr>
          <tr>
            <td>LocalCommandExecutionAspect</td>
            <td>localCommandExecution</td>
            <td>Method</td>
            <td>Intercepts remotable and transactional method execution and
            execute them locally</td>
          </tr>
          <tr>
            <td>ThinletMetadataFactoryAspect</td>
            <td>thinletMetadataFactoryIntroduction</td>
            <td>Class</td>
            <td>Introduces interface
            <code>
            net.java.dev.genesis.ui.thinlet.metadata.ThinletMetadataFactory
            </code>
            having
            <code>ThinletMetadataFactoryAspect$AspectThinletMetadataFactory
            </code> as its implementation</td>
          </tr>
          <tr>
            <td>TimeoutAspect</td>
            <td>timeout</td>
            <td>Method</td>
            <td>Intercepts a method execution so it completes in a specified
            amount of time or an exception is thrown</td>
          </tr>
          <tr>
            <td>WaitCursorAspect</td>
            <td>waitCursorExecution</td>
            <td>Method</td>
            <td>Changes the mouse cursor to a wait cursor while method execution
            is not completed</td>
          </tr>
        </table>
      </subsection>
      <subsection name="Sample aop.xml configuration">
        <p>useradmin sample aop.xml configuration is shown below. It might be
        necessary to adjust it as needed by a project, but we believe this
        configuration will be enough for most cases.</p>
<source>
<![CDATA[
<!DOCTYPE aspectwerkz PUBLIC
      "-//AspectWerkz//DTD 1.0//EN"
      "http://aspectwerkz.codehaus.org/dtd/aspectwerkz_1_0.dtd">
<aspectwerkz>
   <system id="useradmin" base-package="net.java.dev.genesis.aspect">
      <!-- helpers pointcuts -->
      <pointcut name="executeCommand"
                expression="execution(@Remotable * ...*(..)) OR
                execution(@Transactional * ...*(..))" />
      <pointcut name="form" expression="within(@Form ..)" />

      <!-- Genesis pointcuts -->
      <pointcut name="formMetadataFactoryIntroduction" expression="form" />
      <pointcut name="thinletMetadataFactoryIntroduction"
                expression=
                "within(net.java.dev.genesis.ui.thinlet.BaseThinlet+)" />
      <pointcut name="criteriaResolverIntroduction"
                expression=
                "within(net.java.dev.genesis.command.hibernate.HibernateCriteria
                +)" />
      <pointcut name="commandResolverIntroduction"
                expression="hasmethod(@Remotable * ...*(..)) OR
                hasmethod(@Transactional * ...*(..))" />
      <pointcut name="timeout" expression="executeCommand" />
      <pointcut name="ejbCommandExecution" expression="executeCommand" />
      <pointcut name="criteriaCommandExecution"
                expression="execution(@Criteria *
                net.java.dev.genesis.command.hibernate.HibernateCriteria+.*(..))
                " />
      <pointcut name="waitCursorExecution"
                expression="execution(* thinlet.Thinlet.invokeImpl(..))" />

      <!-- Genesis Aspects -->
      <aspect class="CommandInvocationAspect" />
      <aspect class="FormMetadataFactoryAspect" />
      <aspect class="ThinletMetadataFactoryAspect" />
      <aspect class="TimeoutAspect">
         <param name="timeout" value="60000" />
      </aspect>
      <aspect class="EJBCommandExecutionAspect">
         <param name="jndiName" value="ejb/CommandExecutor"/>
      </aspect>
      <aspect class="CriteriaCommandExecutionAspect"/>
      <aspect class="WaitCursorAspect"/>
   </system>
</aspectwerkz>
]]>
</source>
      </subsection>
    </section>
  </body>
</document>
