<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
   <properties>
     <title>Widget lookup strategy</title>
     <author email="allanjones@dev.java.net">Allan Jones Batista de Castro</author>
     <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
   </properties>
   <body>
     <section name="Widget lookup strategy">
       <p>One of the basic concepts of the binding implemented by genesis is 
       determining which (if any) component represents a given property, 
       <code>@Action</code> or <code>@DataProvider</code>. So, the UI will be 
       composed of widgets identified by names that should be accessible somehow
       to the binding classes. The way that binding classes will find these 
       widgets is called <b>lookup strategy</b>.</p>
       <p>genesis defines an interface called 
       <code>net.java.dev.genesis.ui.binding.LookupStrategy</code> that declares 
       the following methods:</p>
       <ul>
         <li><code>register(String name, Object widget)</code>: Associates a 
         widget with the specified name.</li>
         <li><code>lookup(Object root, String name)</code>: Looks up for a 
         widget registered with the specified name within the <code>root</code> 
         scope.</li>
         <li><code>getName(Object widget)</code>: Returns the widget name.</li>
       </ul>
       <p>There is a basic and generic implementation that uses 
       <code>java.util.Map</code> as its backing data structure. This 
       implementation is 
       <code>net.java.dev.genesis.ui.binding.MapLookupStrategy</code> and it can 
       be used no matter what UI technology is used.</p>
       <p>There are specific lookup strategies for each UI technology. Currently, 
       genesis supports three UI technologies: Thinlet, Swing and SWT. Since 
       Thinlet already has its own widget lookup strategy, genesis defines 
       specific lookup strategies only for Swing and SWT. These implementations 
       are detailed in the following sections.</p>
       <subsection name="Swing">
         <p>genesis Swing support defines three classes that implements 
         <code>LookupStrategy</code>. All implementations use the component name 
         (<code>java.awt.Component.getName()</code>) to locate it:</p>
         <ul>
           <li><code>MapComponentLookupStrategy</code>: Uses the same logic 
           defined by <code>MapLookupStrategy</code>. The only difference is 
           that <code>getName(Object widget)</code> returns the component name 
           (<code>component.getName()</code>) if the component has not been 
           registered.</li>
           <li><code>BreadthFirstComponentLookupStrategy</code>: Using the
           <code>register</code> method is not necessary to register components, 
           since the component name (<code>Component.getName()</code>) is 
           already used by the lookup logic. The <code>lookup</code> method 
           starts a breadth first search in all components that belongs to the
           root component passed as a parameter to the <code>lookup</code> 
           method.</li>
           <li><code>DepthFirstComponentLookupStrategy</code>: It is similar to
           <code>BreadthFirstComponentLookupStrategy</code>, except that it 
           implements a depth first search algorithm.</li>
         </ul>
         <p>The default implementation used by genesis is 
         <code>BreadthFirstComponentLookupStrategy</code>. To use a different 
         implementation, just override the <code>createLookupStrategy()</code> 
         method defined by the 
         <code>net.java.dev.genesis.ui.swing.SwingBinder</code> class, or pass 
         your implementation to the appropriate <code>SwingBinder</code> 
         constructor.</p>
       </subsection>
       <subsection name="SWT">
         <p>genesis SWT support defines three classes that implements 
         <code>LookupStrategy</code>, like it happens with Swing support. All 
         implementations use the widget name
         (<code>org.eclipse.swt.widgets.Widget.getData()</code>) to locate it:</p>
         <ul>
           <li><code>MapWidgetLookupStrategy</code>: Uses the same logic defined 
           by <code>MapLookupStrategy</code>. The only difference is that the 
           <code>getName(Object widget)</code> returns the widget name 
           (<code>widget.getData()</code>) if the widget has not been 
           registered.</li>
           <li><code>BreadthFirstWidgetLookupStrategy</code>: Using the
           <code>register</code> method is not necessary to register widgets,
           since the widget name (<code>widget.getData()</code>) is already used 
           by the lookup logic. The <code>lookup</code> method starts a breadth 
           first search in all widgets that belongs to the root widget passed as 
           parameter in <code>lookup</code> method.</li>
           <li><code>DepthFirstWidgetLookupStrategy</code>: It is similar to
           <code>BreadthFirstWidgetLookupStrategy</code>, except that it 
           implements a depth first search algorithm.</li>
         </ul>
         <p>Notice that SWT does not define a method to name widgets. To name a 
         widget, use the <code>Widget.setData("desiredName")</code> method.</p>
         <p>The default implementation used by genesis is 
         <code>BreadthFirstWidgetLookupStrategy</code>. To use a different 
         implementation, just override the <code>createLookupStrategy()</code> 
         method defined by the 
         <code>net.java.dev.genesis.ui.swt.SWTBinder</code> class, or pass 
         your implementation to the appropriate <code>SWTBinder</code> 
         constructor.</p>
       </subsection>
     </section>
   </body>
</document>