<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Implementing actions in forms and views</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro</author>
  </properties>
  <body>
    <section name="Implementing actions in forms and views">
      <p>Although genesis makes it possible to bind form actions to widgets,
      nothing stops one from taking advantage of Thinlet's built-in feature of
      invoking methods by configuring them in the UI xml definition or using listeners
      in Swing. As a
      consequence, a recurring question is when to use <code>@Action</code> and
      when to use "native" resources directly in the view's code.
      Some basic principles might be helpful in order to decide which approach
      to use.</p>
      <p>If an action changes the form or isn't bound to the graphical API, it
      should be implemented on the form class using <code>@Action</code>. If the
      response to a certain event is simply to display a new window, dialog or
      some API-specific task, it should be implemented on the view and triggered
      by an specific API way. However, there are
      occasions that are not so simple and when it's necessary to manipulate
      both the form and the view. These cases are considered below.</p>
      <subsection name="Using @BeforeAction">
        <p>Let's consider the following example: a use case about deleting some
        information must be implemented. But before deleting it, the user is
        supposed to confirm the operation. This confirmation could be
        implemented by displaying an <code>OptionDialog</code> (Thinlet) or 
        <code>JOptionPane</code> (Swing) to the user and
        continuing the operation only if s/he agreed to delete it. However,
        deleting some information is not a graphical API specific operation and,
        therefore, should be implemented on the form class. How can it be done
        correctly?</p>
        <p>In order to execute a UI-related method before invoking a form
        method - and even not calling the form method at all -, the
        <code>@BeforeAction</code> annotation is used. This annotation should be
        put in a view method that should be executed before a form method and
        can either return a <code>boolean</code> or <code>void</code>. When
        <code>false</code> is returned, the form method is not invoked.</p>
        <p>If the view method name is the same as the form method name, it's not
        necessary to specify any additional parameter for the annotation. In
        some situations, however, a view method name cannot be the same used for
        naming a form method. In order to indicate which form method should be
        executed only after a view method is invoked, the form method name is
        passed as an annotation argument. A full example is shown below. First,
        the Thinlet view:</p>
<source>
public class BeforeActionViewExampleThinlet extends BaseThinlet {
   public BeforeActionViewExampleThinlet() {
      // initialization logic
      bind(new BeforeActionFormExample());
   }

   @BeforeAction("delete")
   public boolean confirmDeletion() {
      return OptionDialog.displayYesNo(this, "Deleting record...",
            "Do you really want to delete this record?") == Option.YES;
   }

   // ...
}
</source>
        <p>The equivalent code using Swing:</p>
<source>
@ViewHandler
public class BeforeActionViewExampleSwing extends JFrame {
   public BeforeActionViewExampleSwing() {
      // initialization logic
      new SwingBinder(this, new BeforeActionFormExample()).bind();
   }

   @BeforeAction("excluir")
   public boolean confirmDeletion() {
      return JOptionPane.showConfirmDialog(this, "Do you really want to delete " +
            "this record?", "Deleting record...", JOptionPane.YES_NO_OPTION) == 
             JOptionPane.YES_OPTION;
   }

   // ...
}
</source>
        <p>Now, the form:</p>
<source>
@Form
public class BeforeActionFormExample {

   @Action
   public void delete() {
      // here goes business logic for this operation.
   }

   // ...
}
</source>
        <p>When the button whose <code>name</code> is <code>"delete"</code> is
        pressed, genesis invokes <code>confirmDeletion()</code> in
        <code>BeforeActionViewExampleThinlet</code> e/ou <code>BeforeActionViewExampleSwing</code>
        since it is annotated with the
        <code>@BeforeAction delete</code>. If the view method name was
        <code>delete</code> it wouldn't be necessary to specify the method
        name as an annotation parameter.</p>
        <p>Since <code>confirmDeletion()</code> returns a <code>boolean</code>,
        the form method will be invoked only when the return value is
        <code>true</code>. For this specific example, this only happens when the
        user chooses "Yes" in the displayed dialog. When this confirmation
        occurs, <code>delete()</code> is invoked by genesis and event handling
        is considered done.</p>
      </subsection>
      <subsection name="Using @AfterAction">
        <p>After executing a form method it might be needed to use graphical
        API-specific resources, such as, for example, close the currently
        displayed window. In order to make it possible genesis supports the
        <code>@AfterAction</code> annotation, that should tag the view method
        to be invoked. Its syntax is very similar to the
        <code>@BeforeAction</code>'s syntax, except that a method annotated with
        it should always return <code>void</code>. An usage example below.
        First, with Thinlet:</p>
<source>
public class AfterActionViewExampleThinlet extends BaseDialogThinlet {
   public AfterActionViewExampleThinlet() {
      // initialization logic
      bind(new AfterActionFormExample());
   }

   @AfterAction("save")
   public void closeWindow() {
      getDialog().dispose();
   }

   // ...
}
</source>
        <p>The equivalent view using Swing:</p> 
<source>
@ViewHandler
public class AfterActionViewExampleSwing extends JDialog {
   public AfterActionViewExampleSwing() {
      // initialization logic
      new SwingBinder(this, new AfterActionFormExample()).bind();
   }

   @AfterAction("save")
   public void closeWindow() {
      dispose();
   }

   // ...
}
</source>
        <p>And... the form:</p> 
<source>
@Form
public class AfterActionFormExample {
   @Action
   public void save() {
      // here goes business logic for this operation.
   }

   // ...
}
</source>
        <p>In the example above, when the button whose <code>name</code> is
        <code>"save"</code> is pressed, the method named <code>save()</code> is
        invoked on the form instance. After its execution, view's method <code>
        closeWindow()</code>, which is annotated as
        <code>@AfterAction save</code> is executed. As it was true for
        <code>@BeforeAction</code>, if the view method name was also
        <code>save()</code> it wouldn't be necessary to use it as an argument to
        the annotation.</p>
      </subsection>
      <subsection name="Programatically  Screen Update">
        <p>Sometimes form values may be updated by an external source or
        directly by the view - to coordinate multiple form iteraction, for
        example. However, since these changes are not managed by genesis, both
        the framework internal value cache as displayed data will be stale,
        causing several anomalies. There are options in genesis' API
        to support that use case.</p>
        <p>The class <code>ActionInvoker</code> has methods that could be used independently
        of what UI technology you're using. The static method
        <code>refresh(form)</code> updates all user interfaces bound to the form
        with the latest data of it.</p>

        <p>About Thinlet, we have the methods <code>refreshView()</code>,
        <code>refreshView(Object)</code> and
        <code>refreshViewFromForm(Object)</code> declared in <code>BaseThinlet</code>.
        </p>
        <p>The first method, <code>refreshView()</code>, should be used when
        just one form instance is bound to a view.
        <code>refreshView(Object)</code> takes as its parameter the widget to
        which one or several forms are bound and process any changes to their
        values. <code>refreshViewFromForm(Object)</code> updates the widget
        bound to the form instance informed as its parameter. An example of how
        to use the first method is shown below:</p>
<source>
public class RefreshViewExampleThinlet extends BaseThinlet {
   private RefreshViewFormExample form;

   public RefreshViewExampleThinlet() {
      // initialization logic
      bind(form = new RefreshViewFormExample());
   }

   public void selectRelatedEntity() {
      // display a helper view for selecting the entity and returns
      Entity entity = new EntityLookupView().getEntity();

      if (entity != null) {
         form.setEntity(entity);

         /* All invocations below are equivalent when only one form
            is bound to the view. Only one of them is necessary */
         ActionInvoker.refresh(form);
         refreshView();
         refreshView(getDesktop());
         refreshViewFromForm(form);
      }
   }

   // ...
}
</source>
        <p>About Swing, we have the method
        <code>refresh()</code> declared in <code>AbstractBinder</code>.</p>
<source>
public class RefreshViewExample extends JFrame {
   private RefreshViewFormExample form;
   private SwingBinder binder;

   public ExemploRefreshViewView() {
      // initialization logic
      binder = new SwingBinder(this, form = new RefreshViewFormExample());
      binder.bind();
   }

   public void selecionaEntidadeRelacionada() {
      // display a helper view for selecting the entity and returns
      Entity entity = new EntityLookupView().getEntity();

      if (entidade != null) {
         form.setEntity(entity);

         /* All invocations below are equivalent.
            Only one of them is necessary */
         ActionInvoker.refresh(form);
         binder.refresh();
      }
   }

   // ...
}
</source>

<source>
@Form
public class RefreshViewExampleForm {
   private Entity entity;
   // ...

   public Entity getEntity() {
      return entity;
   }

   public void setEntity(Entity entity) {
      this.entity = entity;
   }

   // ...
}
</source>
      </subsection>
      <subsection name="Invoking form actions directly">
        <p>In some situations it may be necessary to invoke one or more form
        methods inside a view method under certain specific conditions where
        using <code>@BeforeAction</code> and <code>@AfterAction</code> is not
        enough. Although calling a form method directly is possible, genesis is
        not notified of the method invocation. This has several consequences,
        such as a stale UI, for example.</p>
        <p>In order to invoke a form method and still keep the automatic
        synchronization between view and form, you should use the method
        <code>ActionInvoker.invoke(form, actionName)</code>. The second parameter
        is the form action name. About Thinlet, you could use
        <code>invokeFormAction(String)</code> or
        <code>invokeFormAction(Object,String)</code>. 
        In Swing, you could use
        <code>invokeAction(String)</code> declared in <code>AbstractBinder</code>.
        The actions include 
        <code>@DataProvider</code>, which will be explained later. An example
        of API usage:</p>
<source>
public class InvokeFormActionViewExample extends JFrame {
   private InvokeFormActionFormExample form;
   private SwingBinder binder;

   public InvokeFormActionViewExample() {
      // initialization logic
      binder = new SwingBinder(this, form = new InvokeFormActionFormExample());
      binder.bind();
   }

   public void selecionaIndicesFinanceiros() throws Exception {
      BigDecimal index = //... index is acquire from another window instance.
      form.setIndex(index);
      ActionInvoker.invoke(form, "recalculateTotals");
      // Or, the equivalent way:
      // binder.invokeAction("recalculateTotals");
   }

   // ...
}
</source>
<source>
@Form
public class InvokeFormActionFormExample {
   private BigDecimal index;
   // ...

   public BigDecimal getIndex() {
      return index;
   }

   public void setIndex(BigDecimal index) {
      this.index = index;
   }

   @Action
   public void recalculateTotals() {
      // recalculate logic
   }
}
</source>
      </subsection>
    </section>
  </body>
</document>