<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Empty web project structure</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="How to start?">
      <p>genesis was conceived having as a goal to make development easier and
      faster. In order to allow someone to use it in an easier and faster way,
      we made available a whole empty project structure, so you just need to
      code your own classes. All compilation and installations process are
      already configured in this empty web project.</p>
      <p>It's extremely important you have already read genesis docs and
      understood its concepts and features. Before starting to code, read the <a
      href="documentation_intro.html">User Manual</a>.</p>
      <p>The empty web project strutucture is called 
      <code>empty-web-project</code> and it comes with the 
      genesis-empty-web-project distribution or the genesis-all 
      distribution. This structure can be found in dir
      <code><b>&lt;GENESIS_DISTRIBUTION&gt;/samples/empty-web-project/</b></code>.</p>
      <p>Take a look at some configuration samples <a 
      href="#Scenarios">here</a>.</p>
    </section>
    <section name="What is needed?">
      <p>For creating your project, you must have installed:</p>
      <ul>
        <li>genesis distribution along its dependency libraries.</li>
        <li><a href="http://www.jboss.org/">JBoss</a> server. We recommend a
        3.2.x or 4.0.x release.</li>
        <li>To compile and install the application we recommend
        <a href="http://ant.apache.org/">Apache Ant</a> 1.6.5.</li>
      </ul>
    </section>
    <section name="Configuring a new project">
      <p>You can copy the whole <b>empty-web-project</b> structure to a development
      directory of your choice. The first step to configure a new project is to
      copy the file named <code>build.properties.sample</code> to a new one
      named <code>build.properties</code>. File <code>build.properties</code>
      defines certain proprerties that are project or developer specific. The
      initial content for <code>build.properties.sample</code> is as follows:</p
      >
<source>
## Build properties sample ##

#################################################################################
## The following property must be defined in build.properties with an           #
## appropriate value for the local environment                                  #
jboss.home=/opt/jboss-3.2.7
genesisBasedApplication.name=empty-web-project
genesisBasedApplication.prettyName=Empty Web Project
#################################################################################


#################################################################################
## These properties already have a default value defined in build.xml and only  #
## need to be defined in build.properties if their values are different in your #
## local setup                                                                  #
#genesis.home=../../genesis
#jboss.datasource.jndi.name=java:/DefaultDS
#jboss.datasource.config.xml=${jboss.home}/server/default/deploy/hsqldb-ds.xml
#hibernate.dialect=net.sf.hibernate.dialect.HSQLDialect
#hibernate.version=2.1.8
#hibernate.show.sql=true
#hibernate.session.factory.jndi.name=jboss:/hibernate/SessionFactory
#hibernate.jboss.service.name=HibernateFactory,name=HibernateFactory
#################################################################################
</source>
      <p>At least three properties must be defined:</p>
      <ul>
        <li><code><b>jboss.home</b></code>: Indicates where JBoss 3.2.x or 4.0.x is
        installed</li>
        <li><code><b>genesisBasedApplication.name</b></code>: Choose a name for
        your project, preferably with no spaces in it.</li>
        <li><code><b>genesisBasedApplication.prettyName</b></code>: Defines a
        descriptive name for your project. This name may contain spaces.</li>
      </ul>
      <p>There are other optional properties that have got a default value, but
      may be redefined. Some of them are:</p>
      <ul>
        <li><code><b>genesis.home</b></code>: Indicates where genesis is
        located. Usually this directory will be something like <code><b>&lt;
        SOME_DIRECTORY&gt;/genesis-&lt;version&gt;/genesis</b></code></li>
        <li><code><b>jboss.datasource.config.xml</b></code>: Indicates the JBoss 
        datasource config file location. You can supply another config file that 
        matches your database configuration.</li>
        <li><code><b>hibernate.dialect</b></code>: Indicates what SQL dialect 
        Hibernate will use. If you're going to use any database other than 
        HSQLDB, you must supply the correct dialect. You can find further 
        information about how to configure dialects at the <a 
        href="http://www.hibernate.org/">Hibernate site</a>.
        </li>
      </ul>
      <p>To make understanding easier, let's imagine a cenario for a new genesis
      based project creation:</p>
      <ul>
        <li>We have JBoss 4.0.4.GA installed at <code>C:\servers\jboss-4.0.4.GA</code>
        </li>
        <li>We install genesis dist at <code>C:\projects</code>, what creates a
        <code>C:\projects\genesis-&lt;version&gt;</code> dir.</li>
        <li>The project will be called<b>helloworld</b> and its descriptive name
        will be <b>Hello World</b>.</li>
        <li>The main project class will be <b>exemplo.HelloWorld</b>.</li>
      </ul>
      <p>Our <code><b>build.properties</b></code> file may look like:</p>
<source>
jboss.home=c:/servers/jboss-4.0.4.GA
genesisBasedApplication.name=helloworld
genesisBasedApplication.prettyName=Hello World

genesis.home=c:/projects/genesis-&lt;version&gt;/genesis
</source>
    </section>
    <section name="Developing with genesis">
      <p>There are two source dirs in the project:</p>
      <ul>
        <li><b>&lt;PROJECT_DIR&gt;/modules/web/src</b>: Dir that contains all
        source files related to the web side of your application (servlets, 
        context listeners, and other classes related to the presentation 
        tier).</li>
        <li><b>&lt;PROJECT_DIR&gt;/modules/shared/src</b>: Dir that contains all
        source files that both the web side and the ejb container side will need.
        Generally classes that represent business logic and have
        transactional/remotable methods (<b>Commands</b>) are put there.
        Together with them, we have what we call <b>Databeans</b>, i.e.,
        Hibernate mapped objects, named that way since they go from the view
        layer to the persistence layer.</li>
      </ul>
      <p>Another web dir can be found at 
      <b>&lt;PROJECT_DIR&gt;/modules/web/content</b> and it should contain html, 
      jsp, javascript, pics, xml and other files that usually are part of war 
      files.</p>
      <p>The last dir is <b>&lt;PROJECT_DIR&gt;/modules/web/lib</b>
      where you should put jars related to your web-tier, such as struts.jar 
      (if you are using Struts).</p>
    </section>
    <section name="Compiling and installing your application">
      <p>The project can be compiled and installed on JBoss using <a href=
      "http://ant.apache.org/">Ant</a>.</p>
      <p>To compile and install your application we have the following basic Ant
      targets:</p>
      <ul>
        <li><b>all</b>: Compiles, packages and deploys your application</li>
        <li><b>clean</b>: Deletes all files generated during
        compilation.</li>
        <li><b>clean-build</b>: It does the same as running <code>clean</code> and
        <code>all</code> in sequence.</li>
      </ul>
      <p>The faster way to put your project to run is:
<source>
ant all
&lt;JBOSS_DIR&gt;/bin/run -c &lt;genesisBasedApplication.name&gt;

So, go to your application url, i.e:
http://localhost:8080/&lt;genesisBasedApplication.name&gt;
</source>
      </p>
    </section>
    <section name="Scenarios">
       <p>We have some samples on how to configure an empty project in some scenarios. The samples are shown below:</p>
       <subsection name="WEB Application using MySQL and Struts">
<p><b>build.properties</b> file</p>
<source>
### configure genesis home directory
genesis.home=D:/opensource/genesis-3.0/genesis
  
### configure JBoss home directory
jboss.home=D:/servers/jboss-4.0.4.GA

### set up the location of mysql jdbc driver
jdbc.driver=lib/mysql/mysqlconnector.jar
  
## configure your Database
jboss.datasource.jndi.name=java:/MySqlDS
jboss.datasource.config.xml=conf/mysql-ds.xml
hibernate.dialect=net.sf.hibernate.dialect.MySQLDialect
</source>
<p><b>conf/mysql-ds.xml</b> file</p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!-- $Id$ -->
<!--  Datasource config for MySQL using 3.0.9 available from:
http://www.mysql.com/downloads/api-jdbc-stable.html
-->

<datasources>
  <local-tx-datasource>
    <jndi-name>MySqlDS</jndi-name>
    <connection-url>jdbc:mysql://localhost:3306/mydatabase</connection-url>
    <driver-class>com.mysql.jdbc.Driver</driver-class>
    <user-name>myuser</user-name>
    <password>mypassword</password>
    <exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter</exception-sorter-class-name>
    <!-- should only be used on drivers after 3.22.1 with "ping" support
    <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLValidConnectionChecker</valid-connection-checker-class-name>
    -->
    <!-- sql to call when connection is created
    <new-connection-sql>some arbitrary sql</new-connection-sql>
      -->
    <!-- sql to call on an existing pooled connection when it is obtained from pool - MySQLValidConnectionChecker is preferred for newer drivers
    <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>
      -->

    <!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) -->
    <metadata>
       <type-mapping>mySQL</type-mapping>
    </metadata>
  </local-tx-datasource>
</datasources>
]]>
</source>
<p><b>build.xml</b> file</p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project name="myproject" default="all" basedir="." xmlns:genesis="https://genesis.dev.java.net/nonav/ns/master_build.xml">
  <import file="web_build.xml" />

  <target name="-pre-init">
    <property file="build.properties" />

    <property name="genesisBasedApplication.name" value="myapplication" />
    <property name="genesisBasedApplication.prettyName" value="My Application" />

    <!-- It's not necessary to do any other configuration, you just have to add 
         struts jars to the modules/web/lib folder -->

    <!-- Add jars needed by shared module to the modules/shared/lib folder -->

    <!-- Add jars needed by shared and web module to the lib folder -->
  </target>
</project>
]]>
</source>
       </subsection>
    </section>
  </body>
</document>