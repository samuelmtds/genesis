<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
   <properties>
     <title>Customizing Widget Binding</title>
     <author email="allanjones@dev.java.net">Allan Jones Batista de Castro</author>
   </properties>
   <body>
     <section name="Customizing Widget Binding">
       <p>genesis provides default <code>binding</code> implementation for each
         widget type. That means that each widget type has its own <code>binder</code>
         that determines how is the interaction with the form.
         Each widget <code>binder</code> defines how the values and events of a specific
         widget are passed to the <code>form</code>, and how the values and actions
         of the <code>form</code> are passed to the widget.
       </p>
       <p>genesis defines some interfaces that represents fields and actions of a screen
         that are <i>connected</i> to the form. The interfaces are:
         <ul>
           <li><b><code>BoundAction</code></b>: Represents an UI action that
             is bound to a form method.</li>
           <li><b><code>BoundField</code></b>: Represents an UI field that
             is bound to a form field.</li>
           <li><b><code>BoundDataProvider</code></b>: Represent an UI field 
             that is bound to a form method (data provider) and optionally, to
             a form field that stores the user selection..</li>
         </ul>
       </p>
       <p>Each widget has its own <code>binder</code> that is responsible
          for the creation of <code>BoundAction</code>,
          <code>BoundField</code> and/or <code>BoundDataProvider</code>.
          It's possible to define a custom <code>binder</code> to a specific
          widget type, or to a specific widget.
       </p>
       <p>genesis provides specific <code>binder</code>s for
         Swing components and SWT widgets, that is covered below.
       </p>
       <subsection name="Swing">
         <p>Each component <code>binder</code> should implement 
           <code>net.java.dev.genesis.ui.binding.WidgetBinder</code> interface.
           This interface
           defines methods for creating <code>BoundAction</code>,
           <code>BoundField</code> and <code>BoundDataProvider</code>.
           The abstract class
           <code>net.java.dev.genesis.ui.swing.components.AbstractComponentBinder</code>
           provides a basic implementation with common logic shared by all
           <code>binders</code> (visibility control, enable and disable, widget group).
         </p>
         <p>Below, the commented source code of the default binder used by
           components that inherits <code>javax.swing.AbstractButton</code>
            (<code>JButton</code>, <code>JMenuItem</code>, etc):</p>
<source>
// We recommend to extend <b>AbstractComponentBinder</b> class
public class AbstractButtonComponentBinder extends AbstractComponentBinder {
  
   // The button represents a form action, so, only this method should be implemented.
   // This method takes the binder, the component (the button itself) and the ActionMetadata
   // that represents the action to be executed. A <b>BoundAction</b> that represents the
   // connection between the button and the form must be returned
   public BoundAction bind(SwingBinder binder, Component component,
      ActionMetadata actionMetadata) {
      return new AbstractButtonComponentBoundAction(binder,
         (AbstractButton) component, actionMetadata);
   }

   // Inner class that implements <b>BoundAction</b> and extends
   // AbstractComponentBinder.AbstractBoundMember that has common logic shared
   // by all binders
   public class AbstractButtonComponentBoundAction extends AbstractBoundMember
         implements BoundAction {
      private final AbstractButton component;
      private final ActionMetadata actionMetadata;
      private final ActionListener listener;

      public AbstractButtonComponentBoundAction(SwingBinder binder,
         AbstractButton component, ActionMetadata actionMetadata) {
         super(binder, component);
         this.component = component;
         this.actionMetadata = actionMetadata;
    
         // The <b>ActionListener</b> is added to the button.
         // To use a custom listener, just overrides the
         // <b>createActionListener()</b> method
         this.component.addActionListener(listener = createActionListener());
      }

      protected ActionMetadata getActionMetadata() {
         return actionMetadata;
      }

      protected AbstractButton getComponent() {
         return component;
      }

      protected ActionListener getListener() {
         return listener;
      }

      // <b>ActionListener</b> instantiation.
      protected ActionListener createActionListener() {
         return new ActionListener() {
            public void actionPerformed(ActionEvent event) {

               // Throught the <b>invokeFormAction</b> method,
               // the form action is invoked.
               getBinder().invokeFormAction(getActionMetadata());
            }
         };
      }

      // unbind method. All listeners added to the button
      // must be removed
      public void unbind() {
         if (listener != null) {
            component.removeActionListener(listener);
         }
      }
   }
}
</source>
         <p>To register a new <code>binder</code> for a specific component type,
         use the <code>register(Class,WidgetBinder)</code> method defined in
         <code>net.java.dev.genesis.ui.swing.ComponentBinderRegistryFactory</code> class,
         at your application startup, as shown below:</p>
<source>
public class MyApplication {
  public static void main(String[] args) {
    // StartupHelper initialization 
    ....

    ComponentBinderRegistryFactory.
       getInstance().register(JTable.class, new MyTableBinder());
  }
}
</source>
         <p>To register a new <code>binder</code> for a specific component, use the
         <code>registerWidgetBinder(String,WidgetBinder)</code> method defined in
         <code>net.java.dev.genesis.ui.binding.AbstractBinder</code> class,
           as shown below:</p>
<source>
@ViewHandler
public class SwingView extends JDialog {
   private SwingBinder binder;
   ....
   public SwingView() {
      binder = new SwingBinder(this, new Form());
   }

   public initComponents() {
      JTable tabela = ... // Table creation
      tabela.setName("usersTable");

      binder.registerWidgetBinder("usersTable", new MyTableBinder());
      binder.bind();
   }
}
</source>
       </subsection>
       <subsection name="SWT">
         <p>Each widget <code>binder</code> should implement
           <code>net.java.dev.genesis.ui.binding.WidgetBinder</code> interface, like Swing.
           This interface defines methods for creating <code>BoundAction</code>,
           <code>BoundField</code> and <code>BoundDataProvider</code>.
           The abstract class
           <code>net.java.dev.genesis.ui.swt.widgets.AbstractWidgetBinder</code>
           provides a basic implementation with common logic shared by all
           <code>binders</code> (visibility control, enable and disable, widget group).
         </p>
         <p>Below, the commented source code of the default binder used by all widgets of type 
           <code>org.eclipse.swt.widgets.Text</code>:</p>
<source>
// We recommend to extend <b>AbstractWidgetBinder</b> class
public class TextWidgetBinder extends AbstractWidgetBinder {
   // Whether trim must be used to retrieve the widget text
   private final boolean trim;

   public TextWidgetBinder() {
	   this(true);
   }

   public TextWidgetBinder(boolean trim) {
	   this.trim = trim;
   }
   
   protected boolean isTrim() {
	   return trim;
   }

   // The widget represents a form field, so, only this method should be implemented.
   // This method takes the binder, the widget (the text widget itself) and the FieldMetadata
   // that represents the form field. A <b>BoundField</b> that represents the
   // connection between the widget and the form field must be returned
   public BoundField bind(SWTBinder binder, Widget widget,
      FieldMetadata fieldMetadata) {
      return new TextWidgetBoundField(binder, (Text) widget,
         fieldMetadata);
   }

   // Inner class that implements <b>BoundAction</b> and extends
   // AbstractWidgetBinder.AbstractBoundMember that has common logic shared
   // by all binders
   public class TextWidgetBoundField extends AbstractBoundMember
         implements BoundField {
      private final Text widget;
      private final FieldMetadata fieldMetadata;
      private final FocusListener listener;

      public TextWidgetBoundField(SWTBinder binder,
         Text widget, FieldMetadata fieldMetadata) {
         super(binder, widget);
         this.widget = widget;
         this.fieldMetadata = fieldMetadata;

         // The <b>FocusListener</b> is added to the widget.
         // To use a custom listener, just overrides the
         // <b>createFocusListener()</b> method
         this.widget.addFocusListener(listener = createFocusListener());
      }

      protected Text getWidget() {
         return widget;
      }

      protected FieldMetadata getFieldMetadata() {
         return fieldMetadata;
      }

      protected FocusListener getListener() {
         return listener;
      }

      // <b>FocusListener</b> instatiation
      protected FocusListener createFocusListener() {
         return new FocusAdapter() {
            public void focusLost(FocusEvent event) {

               // Throught the <b>populateForm</b> method,
               // the form field will be populated with the widget value
               getBinder().populateForm(getFieldMetadata(), getValue());
            }
         };
      }

      // Returns the widget value
      protected Object getValue() {
         return isTrim() ? widget.getText().trim() : widget.getText();
      }

      public void setValue(Object value) throws Exception {
         widget.setText(getBinder().getFormatter(fieldMetadata).format(value));
      }

      // unbind method. All listeners added to the widget
      // must be removed
      public void unbind() {
         if (listener != null) {
            widget.removeFocusListener(listener);
         }
      }
   }
}
</source>
         <p>To register a new <code>binder</code> for a specific widget type,
         use the <code>register(Class,WidgetBinder)</code> method defined in
         <code>net.java.dev.genesis.ui.swt.WidgetBinderRegistryFactory</code> class,
           at your application startup, as shown below:</p>
<source>
public class MyApplication {
  public static void main(String[] args) {
    // StartupHelper initialization
    ....

    WidgetBinderRegistryFactory.
       getInstance().register(Combo.class, new MyComboBinder());
  }
}
</source>
         <p>To register a new <code>binder</code> for a specific widget, use the
         <code>registerWidgetBinder(String,WidgetBinder)</code> method defined in
         <code>net.java.dev.genesis.ui.binding.AbstractBinder</code> class,
           as shown below:</p>
<source>
@ViewHandler
public class SWTView {
   private Shell shell;
   private SwingBinder binder;
   ....
   public SwingView() {
      shell = new Shell();
      binder = new SwingBinder(shell, new Form(), this);
   }

   public initComponents() {
      Combo combo = ... // Combo creation
      combo.setData("usersCombo");

      binder.registerWidgetBinder("usersCombo", new MyComboBinder());
      binder.bind();
   }
}
</source>
       </subsection>
     </section>
   </body>
</document>