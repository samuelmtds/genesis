<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Transparent remoting</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro</author>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Transparent remoting">
      <p>Suppose there is a class called <code>SumExample</code> as below:</p>
<source>
 1. public class SumExample {
 2.    public int sum(int a, int b) {
 3.       System.out.println("a = " + a);
 4.       System.out.println("b = " + b);
 5.
 6.       int sum = a + b;
 7.
 8.       System.out.println("a + b = " + sum);
 9.
10.       return sum;
11.    }
12.
13.    public static void main(String[] args) {
14.       System.out.println(new SumExample().sum(2, 2));
15.    }
16. }
</source>
      <p>By running the code, the following output will be printed at the local
      standard output:</p>
<source>
a = 2
b = 2
a + b = 4
4
</source>
      <p>The <code>sum(int, int)</code> method can be turned to a remote one by
      simply adding a <code>@Remotable</code> annotation. The modified code
      would be:</p>
<source>
 1. import net.java.dev.genesis.annotation.Remotable;
 2.
 3. public class RemoteSumExample {
 4.    @Remotable
 5.    public int sum(int a, int b) {
 6.       System.out.println("a = " + a);
 7.       System.out.println("b = " + b);
 8.
 9.       int soma = a + b;
10.
11.       System.out.println("a + b = " + sum);
12.
13.       return sum;
14.    }
15.
16.    public static void main(String[] args) {
17.       System.out.println(new RemoteSumExample().sum(2, 2));
18.    }
19. }
</source>
      <p>By running the new code after starting JBoss, we notice a decrease in 
      the output lines:</p>
<source>
4
</source>
      <p>By watching the JBoss console, it is possible to notice that some 
      messages were printed at the server-side. Why that happened?</p>
      <p>The output seen at the local console is due to the execution of 17th
      line. However, other <code>System.out.println</code> calls from the 6th,
      7th and 11th lines took place inside an annotated method with
      <code>@Remotable</code> and that's why they were executed in a different
      way. Actually the whole <code>sum(int,int)</code> method was executed
      at the server-side. How?</p>
      <p>Methods annotated with <code>@Remotable</code> are intercepted by an 
      aspect (genesis-aspect) that will transport the instance in which the 
      method was called to the server-side, and then this method will be 
      executed there. The result will be sent back to the client-side. This 
      feature is called <b>transparent remoting</b>.</p>
      <subsection name="Restrictions and limitations">
        <p>There are some restrictions on which methods that can be made remote
        in genesis:
          <ul>
            <li>It cannot be abstract</li>
            <li>It cannot be a static method nor manipulate static members</li>
            <li>It cannot be native</li>
            <li>It must be <code>public</code> and declared in a
            <code>public</code> class</li>
          </ul>
        </p>
        <p>The first restriction exists because an abstract method cannot be
        called (however it might be declared as abstract in a superclass). The 
        method cannot be static because static values differ between different 
        JVMs. The last two restrictions are imposed to comply with the EJB 
        specification.</p>
        <p>One last side effect to be aware of is that remote methods do not 
        change the value of local instances variables. We can see an example 
        below:</p>
<source>
 1. import net.java.dev.genesis.annotation.Remotable;
 2.
 3. public class LocalVersusRemote {
 4.    private int value;
 5.
 6.    public void local() {
 7.       value++;
 8.       System.out.println("value in local(): " + value);
 9.    }
10.
11.    @Remotable
12.    public void remote() {
13.       value++;
14.       System.out.println("value in remote(): " + value);
15.    }
16.
17.    public int getValue() {
18.       return value;
19.    }
20.
21.    public static void main(String[] args) {
22.       LocalVersusRemote lvr = new LocalVersusRemote();
23.       lvr.local();
24.       System.out.println("value: " + lvr.getValue());
25.       lvr.remote();
26.       System.out.println("value: " + lvr.getValue());
27.       lvr.local();
28.       System.out.println("value: " + lvr.getValue());
29.    }
30. }
</source>
        <p>The local output will be:</p>
<source>
value in local(): 1
value: 1
value: 1
value in local(): 2
value: 2
</source>
        <p>While the remote output will be:</p>
<source>
value in remote(): 2
</source>
        <p>When the 23rd line is reached, the <code>value</code> variable is 
        locally modified and its content in both the <code>local()</code> method 
        and the 24th line output the same. However, by running the 25th line, the
        <code>lvr</code> instance is sent to the server and the
        <code>remote()</code> method is executed there, modifying the remote
        copy of <code>value</code> from 1 to 2, as shown at the remote console
         - but the local copy is kept unmodified as we can see with the 26th
        line output (local console).</p>
        <p>Therefore, local values are sent to the server but not the other way
        around. The same restriction applies to object references in parameters.
        If it is necessary to get a reference to the modified instance, it must 
        be returned from the annotated method itself.</p>
        <p>To fix the problem above, we can change it to return the modified
        value:</p>
<source>
    @Remotable
    public int remote() {
       valor++;
       System.out.println("value in remote(): " + value);
       return value;
    }

    public void setValue(int value) {
       this.value = value;

    }

    public static void main(String[] args) {
       LocalVersusRemote lvr = new LocalVersusRemote();
       // ...
       lvr.setValue(lvr.remote());
       // ...
    }
</source>
        <p>This might intimidate some developers at first, but this is exactly
        how a Stateless Session Bean (SSB) works, for example. And the behavior
        of non-remote parameters sent through a RMI call is also the same. A
        stateful component model will be implemented in the near future, 
        although experience has shown us that it's not necessary for desktop and 
        web clients, and that the problem can be handled the same way you deal 
        with it when using SSBs or RMI components: returning the modified data 
        in the method call.</p>
      </subsection>
    </section>
  </body>
</document>