<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Populating comboboxes, lists and tables</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro</author>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Populating comboboxes, lists and tables">
      <p>Options available in a combobox may change depending on the input or
      other business rules. A table's content might need to be dynamically 
      filled in response to a user-specified filter criteria, for example. To 
      cope with these situations, there is an annotation called
      <code>@DataProvider</code>, whose syntax is:</p>
<source>
@DataProvider(objectField="objectFieldName",
              indexField="indexFieldName",
              widgetName="widgetName",
              callOnInit=booleanValue
              resetSelection=booleanValue)
</source>
      <p>This annotation may be used in methods returning either a
      <code>java.util.List</code> or an array of <code>Object</code>s. Values
      returned by the method will be used to populate the widget, whether it is
      a combobox, a list or a table.</p>
      <p><code>objectField</code>, if specified, should receive as a parameter 
      the name of a property that will hold the widget's selected instance (or 
      instances, if multiple selection mode is enabled). This property should be 
      of the same type or a superclass of the type returned by the annotated 
      method, an array of this type or a <code>Collection</code>.</p>
      <p><code>indexField</code> is the name of the property that will hold the 
      indexes for the selected elements on the widget. It must be an 
      <code>int</code> or an <code>Integer</code>, an array of one of these
      types or a <code>Collection</code>.</p>
      <p>If <code>widgetName</code> is used, its value must be the name of the
      widget - table, combobox or list - that will receive the data provided by 
      the annotated method. For Thinlet, <code>widgetName</code> must be the
      value of the <code>name</code> property of a widget defined by the view
      xml. For Swing, <code>widgetName</code> must be equal to the value 
      returned by the <code>getName()</code> method of the target 
      <code>Component</code> instance. For SWT, <code>widgetName</code>
      must be equal to the value returned by the <code>getData()</code> method 
      of the target <code>Widget</code> instance.</p>
      <p><b>At least one of these three properties must be informed</b>.</p>
      <p>The <code>name</code> of the widget that will populated by a 
      <code>@DataProvider</code> is equal to the value of the first property 
      that has been informed, in the following order: <code>widgetName</code>, 
      <code>objectField</code>, <code>indexField</code>.</p>
      <p>As mentioned earlier, both <code>objectField</code> and
      <code>indexField</code> take as a parameter the name of a property whose
      type might be a bean, an array or a <code>Collection</code>. Let's
      examine when to use each type in relation to the selection mode:</p>
      <subsection name="Single selection mode">
        <table>
          <tr>
            <th>Return type</th>
            <th>objectField</th>
            <th>indexField</th>
          </tr>
          <tr>
            <td><code>java.util.List</code> or object array</td>
            <td>Any class (primitive types not allowed)</td>
            <td><code>Integer</code> or <code>int</code></td>
          </tr>
        </table>
      </subsection>
      <subsection name="Multiple selection">
        <table>
          <tr>
            <th>Return type</th>
            <th>objectField</th>
            <th>indexField</th>
          </tr>
          <tr>
            <td><code>java.util.List</code> or object array</td>
            <td>Array or <code>Collection</code> of any class
            (primitive types not allowed)</td>
            <td>Array of <code>Integer</code>s (or
            <code>int</code>s) or <code>Collection</code> of
            <code>Integer</code>s</td>
          </tr>
        </table>
      </subsection>
      <p>An example of how to use this annotation is shown below:</p>
<source>
public class State {
   private String acronym;
   private String description;

   // getters and setters for properties
}
</source>
<source>
@Form
public class DataProviderFormExample {
   private State state;

   public State getState() {
      return state;
   }

   public void setState(State state) {
      this.state = state;
   }

   @DataProvider(objectField="state")
   public List populateStates() {
      // returns a Collection containing State instances
   }

   // ...
}
</source>
      <p>Considering the source code above for the form class, let's see a few 
      examples using the UI technologies supported by genesis and a few 
      widgets:</p>
      <p><b>Thinlet</b>
        <ul>
          <li><a href="#ThinletComboBox">ComboBox</a></li>
          <li><a href="#ThinletList">List</a></li>
          <li><a href="#ThinletTable">Table</a></li>
        </ul>
      </p>
      <p><b>Swing</b>
        <ul>
          <li><a href="#SwingComboBox">ComboBox</a></li>
          <li><a href="#SwingList">List</a></li>
          <li><a href="#SwingTable">Table</a></li>
        </ul>
      </p>
      <p><b>SWT</b>
        <ul>
          <li><a href="#SWTComboBox">ComboBox</a></li>
          <li><a href="#SWTList">List</a></li>
          <li><a href="#SWTTable">Table</a></li>
        </ul>
      </p>
      <subsection name="Thinlet">
        <h5><a name="ThinletComboBox">ComboBox</a></h5>
<source>
<![CDATA[
<panel gap="5">
   <label text="State:" />
   <combobox name="state" property="key=acronym;value=description" />
</panel>
]]>
</source>
          <p>Above we can see the interface xml that displays a
          <code>label</code> and a <code>combobox</code> that will hold states 
          at runtime. The combobox <code>name</code> property is equal to the 
          value of the <code>objectField</code> property in the 
          <code>@DataProvider</code> annotation. A few values can be configured 
          for the combobox <code>property</code> attribute. They are:</p>
          <ul>
            <li><b>key</b>: name of the property of the bean that will be used 
            for populating the component, whose value is unique per instance.
            If that property isn't defined, the value returned
            by <code>System.identityHashCode(Object)</code> is used for common java
            objects, or the value returned by <code>toString()</code> is used for
            enums (<code>java.lang.Enum</code> or 
            <code>net.java.dev.reusablecomponents.lang.Enum</code>).</li>
            <li><b>value</b>: name of the property used for displaying the bean. 
            If that property isn't defined, the registered formatter or the default
            formatter is used.</li>
            <li><b>blank</b>: includes a blank line as the first combobox 
            option. It's not required and its default value is 
            <code>false</code>.</li>
            <li><b>blankLabel</b>: defines the text to be displayed for the 
            blank line. It's not required, its default value is an empty
            <code>String</code> and it's only meaningful when 
            <code>blank=true</code>.</li>
          </ul>
          <p>As defined by <code>objectField</code> value, the
          <code>state</code> property will hold the selected <code>State</code> 
          instance that corresponds to the combobox option chosen by the 
          user.</p>
        <h5><a name="ThinletList">List</a></h5>
<source>
<![CDATA[
<panel gap="5">
   <label text="State:" />
   <list name="state" property="key=acronym;value=description" />
</panel>
]]>
</source>
          <p><code>list</code> configuration requirements and functionality are 
          similar to the <a href="#ThinletComboBox">combobox</a>'s ones.</p>
        <h5><a name="ThinletTable">Table</a></h5>
<source>
<![CDATA[
<panel gap="5">
   <table name="state">
      <header>
         <column name="acronym" text="Acronym" />
         <column name="description" text="Description" />
      </header>
   </table>
</panel>
]]>
</source>
          <p>Requirements for populating a table are slightly different.</p>
          <p>As shown above, we can notice that the table <code>name</code> must 
          be equal to the <code>objectField</code> value (unless
          <code>widgetName</code> is specified). Each row will represent an 
          instance and each column will be filled with the value of the bean 
          property whose name is equal to the column <code>name</code>.</p>
      </subsection>
      <subsection name="Swing">
        <h5><a name="SwingComboBox">ComboBox</a></h5>
<source>
<![CDATA[
private JComboBox stateComboBox;
  ...
  private initComponents() {
     ...
     stateComboBox = new JComboBox();
     stateComboBox.setName("state");
     stateComboBox.putClientProperty(SwingBinder.KEY_PROPERTY, "acronym");
     stateComboBox.putClientProperty(SwingBinder.VALUE_PROPERTY, "description");
     stateComboBox.setRenderer(new KeyValueListCellRenderer(stateComboBox));
  }
]]>
</source>
          <p>Above we can see the source code of an interface that displays a
          <code>combobox</code> that will hold states at runtime. The combobox 
          <code>name</code> (<code>stateComboBox.setName("state")</code>)
          property is equal to the value for the <code>objectField</code> 
          property in annotation <code>@DataProvider</code>. In order to display
          data in the <code>JComboBox</code> correctly, some properties must be
          configured for the component and the renderer should be set to
          <code>net.java.dev.genesis.ui.swing.renderers.KeyValueListCellRenderer</code>.
          This class checks the values configured as properties for this 
          component to determine which bean property should be made visible to 
          users. The properties values can be specified using the 
          <code>JComponent.putClientProperty(Object key, Object value)</code> 
          method. The following values may be used for this kind of widget:</p>
          <ul>
            <li><b>SwingBinder.KEY_PROPERTY</b>: name of the property of the 
            bean that will be used for populating the component, whose value is 
            unique per instance. If that property isn't defined, the value returned
            by <code>System.identityHashCode(Object)</code> is used for common java
            objects, or the value returned by <code>toString()</code> is used for
            enums (<code>java.lang.Enum</code> or 
            <code>net.java.dev.reusablecomponents.lang.Enum</code>).</li>
            <li><b>SwingBinder.VALUE_PROPERTY</b>: name of the property used for displaying the bean. 
            If that property isn't defined, the registered formatter or the default
            formatter is used.</li>
            <li><b>SwingBinder.BLANK_PROPERTY</b>: includes a blank line as the 
            first combobox option. It's not required and its default value is 
            <code>false</code>.</li>
            <li><b>SwingBinder.BLANK_LABEL_PROPERTY</b>: defines the text to be 
            displayed for the blank line. It's not required, its default value 
            is an empty <code>String</code> and it's only meaningful when 
            <code>blank=true</code>.</li>
          </ul>
          <p>As defined by <code>objectField</code> value, the
          <code>state</code> property will hold the selected <code>State</code> 
          instance that corresponds to the combobox option chosen by the 
          user.</p>
          <p>To make it easier to build the widget, the static methods exposed
          by <code>net.java.dev.genesis.ui.swing.factory.SwingFactory</code> may
          be used. The equivalent code for building and configuring the 
          <code>JComboBox</code> instance would be:</p>
<source>
<![CDATA[
private SwingBinder binder;
private JComboBox stateComboBox;
  ...
  private initComponents() {
     ...
     stateComboBox = SwingFactory.createComboBox(binder, "state", "acronym", "description");
  }
]]>
</source>
          <p>In the above snippet, a <code>JComboBox</code> is built supplying 
          as parameters the binder instance, the component name, the key 
          property name (<code>SwingBinder.KEY_PROPERTY</code>) and the 
          value property name (<code>SwingBinder.VALUE_PROPERTY</code>).</p>
        <h5><a name="SwingList">List</a></h5>
<source>
<![CDATA[
private JList stateList;
  ...
  private initComponents() {
     ...
     stateList = new JList();
     stateList.setName("state");
     stateList.putClientProperty(SwingBinder.KEY_PROPERTY, "acronym");
     stateList.putClientProperty(SwingBinder.VALUE_PROPERTY, "description");
     stateList.setCellRenderer(new KeyValueListCellRenderer(stateList));
  }
]]>
</source>
          <p><code>JList</code> configuration requirements and functionality are 
          similar to the <a href="#SwingComboBox">JComboBox</a>'s ones.</p>
        <h5><a name="SwingTable">Table</a></h5>
<source>
<![CDATA[
private JTable stateTable;
  ...
  private initComponents() {
     ...

     TableColumnModel columnModel = new DefaultTableColumnModel();
     TableModel model = new DefaultTableModel();

     TableColumn acronymColumn = new TableColumn(0);
     acronymColumn.setIdentifier("acronym");
     acronymColumn.setHeaderValue("Acronym");
     columnModel.addColumn(acronymColumn);

     TableColumn descriptionColumn = new TableColumn(1);
     descriptionColumn.setIdentifier("description");
     descriptionColumn.setHeaderValue("Description");
     columnModel.addColumn(descriptionColumn);

     stateTable = new JTable(model, columnModel);
     stateTable.setName("state");
  }
]]>
</source>
          <p>Requirements for populating a table are slightly different.</p>
          <p>As shown above, we can notice that the table name 
          (<code>stateTable.setName("state")</code>) must 
          be equal to the <code>objectField</code> value (unless
          <code>widgetName</code> is specified). Each row will represent an 
          instance and each column will be filled with the value of the bean 
          property whose name is equal to the column <code>identifier</code>
          (eg: <code>descriptionColumn.setIdentifier("description")</code>). 
          It's possible to define column identifiers easier using the
          <code>putClientProperty</code> method:</p>
<source>
<![CDATA[
private JTable stateTable;
  ...
  private initComponents() {
     ...
     stateTable = new JTable(new DefaultTableModel(new String[] {"Acronym", "Description"}, 0));
     stateTable.setName("state");
     stateTable.putClientProperty(SwingBinder.COLUMN_NAMES, new String[] {"acronym", "description"});
  }
]]>
</source>
          <p>To make it easier to build the widget, the static methods exposed
          by <code>net.java.dev.genesis.ui.swing.factory.SwingFactory</code> may
          be used. The equivalent code for building and configuring the 
          <code>JTable</code> instance would be:</p>
<source>
<![CDATA[
private SwingBinder binder;
private JTable stateTable;
  ...
  private initComponents() {
     ...
     stateTable = SwingFactory.createTable(binder, "state",
          new String[] {"acronym", "description" },
          new String[] {"Acronym", "Description" });
  }
]]>
</source>
          <p>In the above snippet, a <code>JTable</code> is built supplying 
          as parameters the binder instance, the component name, an array of
          each column's <code>identifier</code> and an array of each column's 
          display name.</p>
      </subsection>
      <subsection name="SWT">
        <h5><a name="SWTComboBox">ComboBox</a></h5>
<source>
<![CDATA[
private Combo stateComboBox;
  ...
  private initComponents() {
     ...
     stateComboBox = new Combo(shell, SWT.NONE);
     stateComboBox.setData("state");
     stateComboBox.setData(SWTBinder.KEY_PROPERTY, "acronym");
     stateComboBox.setData(SWTBinder.VALUE_PROPERTY, "description");
  }
]]>
</source>
          <p>Above we can see the source code of an interface that displays a
          <code>combobox</code> that will hold states at runtime. The combobox 
          name (<code>stateComboBox.setData("state")</code>) is equal to the 
          value for the <code>objectField</code> property in annotation 
          <code>@DataProvider</code>. In order to display data in the 
          <code>Combo</code> correctly, some properties must be configured for 
          the component. Values configured as properties for this component are 
          checked to determine which bean property should be made visible to 
          users. Property values can be specified using the 
          <code>Widget.setData(Object key, Object value)</code> 
          method. The following values may be used for this kind of widget:</p>
          <ul>
            <li><b>SWTBinder.KEY_PROPERTY</b>: name of the property of the 
            bean that will be used for populating the component, whose value is 
            unique per instance. If that property isn't defined, the value returned
            by <code>System.identityHashCode(Object)</code> is used for common java
            objects, or the value returned by <code>toString()</code> is used for
            enums (<code>java.lang.Enum</code> or 
            <code>net.java.dev.reusablecomponents.lang.Enum</code>).</li>
            <li><b>SWTBinder.VALUE_PROPERTY</b>: name of the property used for 
            displaying the bean. If that property isn't defined, the registered
            formatter or the default formatter is used.</li>
            <li><b>SWTBinder.BLANK_PROPERTY</b>: includes a blank line as the 
            first combobox option. It's not required and its default value is 
            <code>false</code>.</li>
            <li><b>SWTBinder.BLANK_LABEL_PROPERTY</b>: defines the text to be 
            displayed for the blank line. It's not required, its default value 
            is an empty <code>String</code> and it's only meaningful when 
            <code>blank=true</code>.</li>
          </ul>
          <p>As defined by <code>objectField</code> value, the
          <code>state</code> property will hold the selected <code>State</code> 
          instance that corresponds to the combobox option chosen by the 
          user.</p>
        <h5><a name="SWTList">List</a></h5>
<source>
<![CDATA[
private List stateList;
  ...
  private initComponents() {
     ...
     stateList = new List(shell, SWT.NONE);
     stateList.setData("state");
     stateList.setData(SwingBinder.KEY_PROPERTY, "acronym");
     stateList.setData(SwingBinder.VALUE_PROPERTY, "description");
  }
]]>
</source>
          <p><code>List</code> configuration requirements and functionality are 
          similar to the <a href="#SWTComboBox">ComboBox</a>'s ones.</p>
        <h5><a name="SWTTable">Table</a></h5>
<source>
<![CDATA[
private Table stateTable;
  ...
  private initComponents() {
     ...

     Table stateTable = new Table(shell, SWT.NONE);
     stateTable.setData("state");
     stateTable.setHeaderVisible(true);

     TableColumn acronymColumn = new TableColumn(stateTable, SWT.NONE);
     acronymColumn.setData(SWTBinder.TABLE_COLUMN_IDENTIFIER, "acronym");
     acronymColumn.setText("Acronym");
     acronymColumn.setWidth(100);

     TableColumn descriptionColumn = new TableColumn(stateTable, SWT.NONE);
     descriptionColumn.setData(SWTBinder.TABLE_COLUMN_IDENTIFIER, "description");
     descriptionColumn.setText("Description");
     descriptionColumn.setWidth(200);
  }
]]>
</source>
          <p>Requirements for populating a table are slightly different.</p>
          <p>As shown above, we can notice that the table name 
          (<code>stateTable.setData("state")</code>) must be equal to the 
          <code>objectField</code> value (unless <code>widgetName</code> is 
          specified). Each row will represent an instance and each column will 
          be filled with the value of the bean property whose name is equal to 
          the column <code>SWTBinder.TABLE_COLUMN_IDENTIFIER</code>
          (eg: <code>descriptionColumn.setData(SWTBinder.TABLE_COLUMN_IDENTIFIER, 
          "description")</code>). It's possible to define column identifiers 
          easier using the <code>setData</code> method of the table:</p>
<source>
<![CDATA[
private Table stateTable;
  ...
  private initComponents() {
     ...
     Table stateTable = new Table(shell, SWT.NONE);
     stateTable.setData("state");
     stateTable.setData(SWTBinder.COLUMN_NAMES, new String[] {"acronym", "description"});
     stateTable.setHeaderVisible(true);

     TableColumn acronymColumn = new TableColumn(stateTable, SWT.NONE);
     acronymColumn.setText("Acronym");
     acronymColumn.setWidth(100);

     TableColumn descriptionColumn = new TableColumn(stateTable, SWT.NONE);
     descriptionColumn.setText("Description");
     descriptionColumn.setWidth(200);
  }
]]>
</source>
      </subsection>
    </section>
    <section name="Understanding callOnInit and resetSelection">
      <p>A variation in the way this annotation behaves happens when the 
      <code>callOnInit</code> property is used. Imagine that the previously 
      shown combobox and table should not be filled at the dialog startup. In 
      this case, the annotation should be rewritten as follows:</p>
<source>
   // ...

   @DataProvider(objectField="state", callOnInit=false)
   public List populateStates() {
      // returns a Collection containing State instances
   }

   // ...
</source>
      <p>This way, at dialog startup, the combobox, list and table
      widgets will be empty. In order to populate them, the <code>@CallWhen</code> 
      annotation could be used together with <code>@DataProvider</code> to 
      indicate when a table/list/combo will be automatically populated. 
      <code>@Action</code> can also be used in these methods if they need to be 
      invoked when a button (such as a Search button) is pressed and, when it is
      used, <code>@EnabledWhen</code> and <code>@VisibleWhen</code> are allowed
      as well.</p>
      <p><code>resetSelection</code> determines whether selected elements will
      be unselected when the method is invoked. This is the default behaviour,
      i.e., if this property has no value, it is considered to be 
      <code>true</code>. When its value is <code>false</code>, the selection is 
      kept relative to the <b>position</b> of the itens, what makes this feature
      more useful when something is being added to the end of the
      <code>java.util.List</code> instance or array each time the method gets
      executed.</p>
      <p>For more information, please take a look at <a 
      href="quick_reference.html#@DataProvider">@DataProvider</a>'s annotation 
      reference.</p>
    </section>
  </body>
</document>