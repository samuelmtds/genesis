<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Empty project structure</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="Configuring your project on Eclipse">
       <p>Learn how to configure your project in <a 
       href="ide_eclipse_empty_project.html">Eclipse</a> or in <a 
      href="ide_netbeans_empty_project.html">NetBeans</a>.</p>
    </section>
    <section name="How to start?">
      <p>genesis was conceived having as a goal to make development easier and
      faster. In order to allow someone to use it in an easier and faster way,
      we made available a whole empty project structure, so you just need to
      code your own classes. All compilation and installation processes are
      already configured in this empty project.</p>
      <p>It's extremely important you have already read genesis docs and
      understood its concepts and features. Before start coding, please read the 
      <a href="documentation_intro.html">User Manual</a>.</p>
      <p>The empty project structure is called <code>empty-project</code> and 
      it comes with genesis-empty-project distribution or genesis-all 
      distribution. This structure can be found in dir
      <code><b>&lt;GENESIS_DISTRIBUTION&gt;/samples/empty-project/</b></code>.</p>
      <p>Take a look at some configuration samples <a 
      href="#Scenarios">here</a></p>
    </section>
    <section name="What is needed?">
      <p>For creating your project, you must have installed:</p>
      <ul>
        <li>genesis distribution along its dependency libraries.</li>
        <li><a href="http://www.jboss.org/">JBoss</a> server. We recommend some
        release in the 3.2.x, 4.0.x or 4.2.x series.</li>
        <li>To compile and install the application we recommend <a href=
        "http://ant.apache.org/">Apache Ant</a> 1.7.0.</li>
      </ul>
      <p><b>It is not necessary to use the empty-project structure if you are 
      just planning to use genesis binding. Just import <a 
      href="binding_jars.html"><code>genesis-client</code> jars and its 
      dependencies</a> as part of your project and create a resource file named 
      <code>messages.properties</code> at the root of your jar file configured 
      as described in the <a 
      href="configuring_messages.html">documentation</a>.</b></p>
    </section>
    <section name="Configuring a new project">
      <p>You can copy the whole <b>empty-project</b> structure to a development
      directory of your choice (if you do that, don't forget to configure 
      <code>genesis.home</code> properly in <code>build.properties</code> to 
      point to this new location). The first step to configure a new project is 
      copying the file named <code>build.properties.sample</code> to a new one
      named <code>build.properties</code>. <code>build.properties</code>
      defines certain properties that are developer specific. The
      initial content for <code>build.properties.sample</code> is as follows:</p>
<source>
## Developer specific properties sample ##
#################################################################################
## Use these properties for running the sample in LOCAL or REMOTE MODE          
jboss.home=/opt/jboss-4.2.0.GA


#################################################################################
## Use these properties for running the sample in LOCAL MODE ONLY               
#remote.mode=false
#jdbc.driver=target/hsqldb.jar


#################################################################################
## Use these properties for running the sample in REMOTE MODE ONLY              
#local.mode=false
#jboss.home=/opt/jboss-4.2.0.GA

#################################################################################
## These properties already have a default value defined in build.xml and only  
## need to be defined in build.properties if their values are different in your 
## local setup                                                                  
#genesis.home=../../genesis
#jboss.provider.url=jnp://localhost
#webstart.server=localhost
#webstart.port=8080
</source>
      <p>There is one main property in the file:</p>
      <ul>
        <li><code><b>jboss.home</b></code>: Points to the location where JBoss
        is installed. It is required only if your application will be run 
        remotely. To run in local mode, this property is ignored.</li>
      </ul>
      <p>There are other optional properties that have got a default value, but
      may be redefined. Some of them are:</p>
      <ul>
        <li><code><b>genesis.home</b></code>: Indicates where genesis is
        located. Usually this directory will be something like
        <code><b>&lt;SOME_DIRECTORY&gt;/genesis-&lt;version&gt;/genesis</b></code></li>
      </ul>
      <p><code>project.properties</code> defines certain properties that are project
      specific. The initial content for <code>project.properties</code> is as follows:</p>
<source>
## Project specific properties ##

#################################################################################
## The following property must be defined in project.properties with an appropriate
## value for your environment
genesisBasedApplication.name=empty-project
genesisBasedApplication.mainClass=net.java.dev.genesis.emptyproject.MyGenesisApp
genesisBasedApplication.prettyName=Empty Project
local.mode=true


#################################################################################
## If your project uses Java 5 or later and needs to compile
## javadoc annotations, uncomment the following line
#force.annotation=true


#################################################################################
## Script jars not used by default. If you want to use one of them, 
## comment the specific line and change aop.xml to refer to it. Java 6 or later
## doesn't need javascript jars.
use.beanshell=false
use.el=false
use.jxpath=false
#use.javascript=false


#################################################################################
## Uncomment a line if you don't use the UI technology it refers to and
## want the build process to ignore its jars
#use.thinlet=false
#use.swing=false
#use.swt=false


#################################################################################
## Use these properties for running the sample in LOCAL MODE ONLY               
#remote.mode=false
#jdbc.driver=target/hsqldb.jar


#################################################################################
## If you want to turn off validation generation, uncomment the following 
## property:
#validation.generate.files=false


#################################################################################
##	If you want to turn off hibernate files generation, such as hibernate.cfg.xml,
## jboss-service.xml, and *.hbm.xml, uncomment the following property:
#hibernate.generate.files=false


#################################################################################
## These properties already have a default value defined in build.xml and only  
## need to be defined in build.properties if their values are different in your 
## local setup                                                                  
#jboss.provider.url=jnp://localhost
#jboss.datasource.jndi.name=java:/DefaultDS
#jboss.datasource.config.xml=${jboss.home}/server/default/deploy/hsqldb-ds.xml
#webstart.server=localhost
#webstart.port=8080
#build.dir=dist/useradmin.war/application
#jdbc.driver=dist/useradmin.war/application/hsqldb.jar
#jdbc.connection.url=jdbc:hsqldb:genesis/useradmin
#jdbc.driver.class=org.hsqldb.jdbcDriver
#jdbc.username=sa
#jdbc.password=
#hibernate.dialect=net.sf.hibernate.dialect.HSQLDialect
#hibernate.version=2.1.8
#hibernate.show.sql=true
#hibernate.session.factory.jndi.name=jboss:/hibernate/SessionFactory
#hibernate.jboss.service.name=HibernateFactory,name=HibernateFactory
</source>
      <p>There are three main properties in the file:</p>
      <ul>
        <li><code><b>genesisBasedApplication.name</b></code>: Choose a name for
        your project, preferably with no spaces in it.</li>
        <li><code><b>genesisBasedApplication.mainClass</b></code>: Defines the
        full qualified name of the project's main class (the class that has a
        <code>main</code> method defined for execution).</li>
        <li><code><b>genesisBasedApplication.prettyName</b></code>: Defines a
        descriptive name for your project. This name may contain spaces.</li>
      </ul>
      <p>There are other optional properties that have got a default value, but
      may be redefined. Some of them are:</p>
      <ul>
        <li><code><b>jboss.datasource.config.xml</b></code>: Indicates the JBoss 
        datasource config file location. You can supply another config file that 
        matches your database configuration.</li>
        <li><code><b>hibernate.dialect</b></code>: Indicates what SQL dialect 
        Hibernate will use. If you're going to use any database other than 
        HSQLDB, you must supply the correct dialect. You can find further 
        information about how to configure dialects at the <a 
        href="http://www.hibernate.org/">Hibernate site</a>.
        </li>
      </ul>
      <p>To make understanding easier, let's imagine a 'scenario for creating a
      new  genesis-based project:</p>
      <ul>
        <li>We have JBoss 4.2.0 installed at <code>C:\servers\jboss-4.2.0.GA</code>
        </li>
        <li>We install genesis dist at <code>C:\projects</code>, what creates a
        <code>C:\projects\genesis-&lt;version&gt;</code> dir.</li>
        <li>The project will be called<b>helloworld</b> and its descriptive name
        will be <b>Hello World</b>.</li>
        <li>The main project class will be <b>exemplo.HelloWorld</b>.</li>
      </ul>
      <p>Our <code><b>build.properties</b></code> file may look like:</p>
<source>
jboss.home=c:/servers/jboss-4.2.0.GA
genesis.home=c:/projects/genesis-&lt;version&gt;/genesis
</source>
      <p>And our <code><b>project.properties</b></code> file may look like:</p>
<source>
genesisBasedApplication.name=helloworld
genesisBasedApplication.mainClass=exemplo.HelloWorld
genesisBasedApplication.prettyName=Hello World
</source>
    </section>
    <section name="Developing with genesis">
      <p>There are two source dirs in the project:</p>
      <ul>
        <li><b>&lt;PROJECT_DIR&gt;/modules/client/src</b>: Dir that contains all
        source files related to the client side of your application (forms,
        views, xmls, etc.).</li>
        <li><b>&lt;PROJECT_DIR&gt;/modules/shared/src</b>: Dir that contains all
        source files that both the client side and the server side will need.
        Generally classes that represent business logic and have
        transactional/remotable methods (<b>Commands</b>) are put there.
        Together with them, we should put all Hibernate mapped classes.</li>
      </ul>
      <p>It is possible to create folders with libraries required by each 
      module:</p>
      <ul>
        <li><b>&lt;PROJECT_DIR&gt;/modules/client/lib</b>: Dir that contains all
        jars required to compile and run the client module.</li>
        <li><b>&lt;PROJECT_DIR&gt;/modules/shared/lib</b>: Dir that contains all
        jars required to compile and run the shared module</li>
        <li><b>&lt;PROJECT_DIR&gt;/lib</b>: Dir that contains all jars required
        to compile and run all modules</li>
      </ul>
      <p>In the client side source dir, a few source files are already available
      to make development easier. They are:</p>
      <ul>
        <li><b>message.properties</b>: It has every name/value pair for your
        application and it is used for i18n. This file already contains a set of
        values used by genesis, so it is only necessary to expand this set as
        your project gets developed.</li>
        <li><b>validator-rules.xml</b>: Defines all validators used by your
        project, as the Struts <code>validator</code> does. It is not necessary
        to change this file, unless your project needs new validators - whose
        implementation should be available on this same source dir.</li>
        <li><b>META-INF/local-aop.xml</b> and <b>META-INF/remote-aop.xml</b>: 
        Files defining all aspects applied to the system (the first for local
        execution and the second one for remote execution). In practice, it's 
        not necessary to change this file, unless you
        need/want to tune some aspects' parameters or add new aspects to the 
        application.</li>
        <li><b>net/java/dev/genesis/emptyproject/MyGenesisApp.java</b>: A file
        that does nothing besides using <code>StartupHelper</code> for initialization.
        This is your project's main file and you should implement your project 
        by adding code to it. As mentioned before, you can define which main 
        class to use by just changing <code>build.properties</code>. Therefore, 
        you can delete this file if you want to use another one.</li>
      </ul>
      <p>We have a few sample projects that show how genesis development is done
      and use the same structure proposed by this empty project. Analyzing these
      samples may solve some questions, besides teaching you best practices for
      developing with genesis. The main sample is called <b>useradmin</b> and
      shows how to use most genesis features. Its documentation can be found <a
      href="useradmin_sample.html">here</a>.</p>
    </section>
    <section name="Compiling and installing your application">
      <p>The project can be compiled and installed on JBoss using <a href=
      "http://ant.apache.org/">Ant</a>.</p>
      <p>To compile and install your application we have the following basic Ant
      targets:</p>
      <ul>
        <li><b>all</b>: Compiles, packages and deploys your application</li>
        <li><b>clean</b>: Deletes all files generated during
        compilation.</li>
        <li><b>clean-build</b>: It does the same as running <code>clean</code> and
        <code>all</code> in sequence.</li>
        <li><b>all.with.webstart</b>: The same as running
        <code>all</code> plus some required tasks to run your application
        using Java WebStart.</li>
        <li><b>run:local</b>: Starts your application in local mode. Your 
        application must be already compiled (use <code>all</code> to compile 
        it).</li>
        <li><b>run:debug-local</b>: Does the same as <code>run:local</code>, but
        also open a debug port for your application, so it is possible to debug
        your code inside your IDE by connecting to it. The default debug port is
        defined by the <code>debug.port</code> property and its default value is
        10000</li>
        <li><b>run:remote</b>: Starts your application in remote mode. It is 
        necessary that your application is compiled and jars have been built and 
        deployed on JBoss. Obviously, the server must be running.</li>
        <li><b>run:debug-remote</b>: Does the same as <code>run:remote</code>, 
        but also open a debug port for your application. The explanation for 
        <code>run:debug-local</code> also applies to it. Keep in mind that the
        application also makes remote calls to the server, so remote methods
        execute there. Therefore, breakpoints will not be hit if they are 
        located in a remote call stack. To stop at them, you must run your 
        application server in debug mode and connect to it.</li>
      </ul>
      <p>The fastest way to run your project is:</p>
<source>
ant all
&lt;JBOSS_DIR&gt;/bin/run -c &lt;genesisBasedApplication.name&gt;
ant run:remote
</source>
      <p>To configure your project to use SWT, read the instructions
      <a href="configuring_swt.html">here</a></p>
    </section>
    <section name="Scenarios">
       <p>Let's examine some samples of how to configure an empty project in 
       common scenarios. The samples are shown below:</p>
       <subsection name="Local Application using MySQL and JGoodies">
<p><b>build.properties</b> file</p>
<source>
### configure genesis home directory
genesis.home=D:/opensource/genesis-3.0/genesis
</source>
<p><b>project.properties</b> file</p>
<source>
## IMPORTANT: Add JGoodies jars to the modules/client/lib folder

### general configuration
genesisBasedApplication.name=myapplication
genesisBasedApplication.mainClass=mypackage.MyMainClass
genesisBasedApplication.prettyName=My Application
local.mode=true
remote.mode=false

### set up the location of mysql jdbc driver
jdbc.driver=lib/mysql/mysqlconnector.jar
  
## configure your Database
jdbc.connection.url=jdbc:mysql://localhost:3306/mydatabase
jdbc.driver.class=com.mysql.jdbc.Driver
jdbc.username=myuser
jdbc.password=mypassword
hibernate.dialect=net.sf.hibernate.dialect.MySQLDialect

## Thinlet and SWT are not required for your project
use.thinlet=false
use.swt=false

## If you're using Javascript as the script language,
## Beanshell, EL and JXPath are not required for your project
use.beanshell=false
use.el=false
use.jxpath=false
</source>
      <p>To run your project, type:
<source>
ant all
ant run:local
</source>
      </p>
       </subsection>
       <subsection name="Remote Application using MySQL and JFreeReport">
<p><b>build.properties</b> file</p>
<source>
### configure genesis home directory
genesis.home=D:/opensource/genesis-3.0/genesis
  
### configure JBoss home directory
jboss.home=D:/servers/jboss-4.2.0.GA
</source>
<p><b>conf/mysql-ds.xml</b> file</p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!--  Datasource config for MySQL using 3.0.9 available from:
http://www.mysql.com/downloads/api-jdbc-stable.html
-->

<datasources>
  <local-tx-datasource>
    <jndi-name>MySqlDS</jndi-name>
    <connection-url>jdbc:mysql://localhost:3306/mydatabase</connection-url>
    <driver-class>com.mysql.jdbc.Driver</driver-class>
    <user-name>myuser</user-name>
    <password>mypassword</password>
    <exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter</exception-sorter-class-name>
    <!-- should only be used on drivers after 3.22.1 with "ping" support
    <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLValidConnectionChecker</valid-connection-checker-class-name>
    -->
    <!-- sql to call when connection is created
    <new-connection-sql>some arbitrary sql</new-connection-sql>
      -->
    <!-- sql to call on an existing pooled connection when it is obtained from pool - MySQLValidConnectionChecker is preferred for newer drivers
    <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>
      -->

    <!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) -->
    <metadata>
       <type-mapping>mySQL</type-mapping>
    </metadata>
  </local-tx-datasource>
</datasources>
]]>
</source>
<p><b>project.properties</b> file</p>
<source>
## IMPORTANT: Add JFreeReport jars to the modules/client/lib folder

### general configuration
genesisBasedApplication.name=myapplication
genesisBasedApplication.mainClass=mypackage.MyMainClass
genesisBasedApplication.prettyName=My Application
local.mode=false
remote.mode=true

### set up the location of mysql jdbc driver
jdbc.driver=lib/mysql/mysqlconnector.jar
  
## configure your Database
jboss.datasource.jndi.name=java:/MySqlDS
jboss.datasource.config.xml=conf/mysql-ds.xml
hibernate.dialect=net.sf.hibernate.dialect.MySQLDialect

## If you're using Javascript as script language,
## Beanshell, EL and JXPath are not necessary for your project
use.beanshell=false
use.el=false
use.jxpath=false
</source>
      <p>To run your project, type:
<source>
ant all
D:\servers\jboss-4.2.0.GA\bin\run -c myapplication
ant run:remote
</source>
      </p>
      <p>To run your project through Java Web Start:
<source>
ant all.with.webstart
D:\servers\jboss-4.2.0.GA\bin\run -c myapplication
Go to <a href="http://localhost:8080/myapplication">http://localhost:8080/myapplication</a>
</source>
      </p>
       </subsection>
       <subsection name="Local and Remote Application using MySQL, JGoodies and Joda">
<p><b>build.properties</b> file</p>
<source>
### configure genesis home directory
genesis.home=D:/opensource/genesis-3.0/genesis
  
### configure JBoss home directory
jboss.home=D:/servers/jboss-4.2.0.GA
</source>
<p><b>conf/mysql-ds.xml</b> file</p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!--  Datasource config for MySQL using 3.0.9 available from:
http://www.mysql.com/downloads/api-jdbc-stable.html
-->

<datasources>
  <local-tx-datasource>
    <jndi-name>MySqlDS</jndi-name>
    <connection-url>jdbc:mysql://localhost:3306/meudatabase</connection-url>
    <driver-class>com.mysql.jdbc.Driver</driver-class>
    <user-name>myuser</user-name>
    <password>mypassword</password>
    <exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter</exception-sorter-class-name>
    <!-- should only be used on drivers after 3.22.1 with "ping" support
    <valid-connection-checker-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLValidConnectionChecker</valid-connection-checker-class-name>
    -->
    <!-- sql to call when connection is created
    <new-connection-sql>some arbitrary sql</new-connection-sql>
      -->
    <!-- sql to call on an existing pooled connection when it is obtained from pool - MySQLValidConnectionChecker is preferred for newer drivers
    <check-valid-connection-sql>some arbitrary sql</check-valid-connection-sql>
      -->

    <!-- corresponding type-mapping in the standardjbosscmp-jdbc.xml (optional) -->
    <metadata>
       <type-mapping>mySQL</type-mapping>
    </metadata>
  </local-tx-datasource>
</datasources>
]]>
</source>
<p><b>project.properties</b> file</p>
<source>
## IMPORTANT: Add JGoodies jars to the modules/client/lib folder
## IMPORTANT: Add Joda jars to the lib folder
##       (It will be available both to the shared and the client modules)

### general configuration
genesisBasedApplication.name=myapplication
genesisBasedApplication.mainClass=mypackage.MyMainClass
genesisBasedApplication.prettyName=My Application
local.mode=true
remote.mode=true
  
### set up the location of mysql jdbc driver
jdbc.driver=lib/mysql/mysqlconnector.jar
  
## configure your Database
jdbc.connection.url=jdbc:mysql://localhost:3306/mydatabase
jdbc.driver.class=com.mysql.jdbc.Driver
jdbc.username=myuser
jdbc.password=mypassword
jboss.datasource.jndi.name=java:/MySqlDS
jboss.datasource.config.xml=conf/mysql-ds.xml
hibernate.dialect=net.sf.hibernate.dialect.MySQLDialect

## Thinlet and SWT are not required for your project
use.thinlet=false
use.swt=false

## If you're using Javascript as script language,
## Beanshell, EL and JXPath are not necessary to your project
use.beanshell=false
use.el=false
use.jxpath=false
</source>
      <p>To run your project in local mode, type:
<source>
ant all
ant run:local
</source>
      </p>
      <p>To run your project in remote mode, type:
<source>
ant all
D:\servers\jboss-4.2.0.GA\bin\run -c myapplication
ant run:remote
</source>
      </p>
      <p>To run your project through Java Web Start:
<source>
ant all.with.webstart
D:\servers\jboss-4.2.0.GA\bin\run -c myapplication
Go to <a href="http://localhost:8080/minhaaplicacao">http://localhost:8080/myapplication</a>
</source>
      </p>
       </subsection>
    </section>
  </body>
</document>