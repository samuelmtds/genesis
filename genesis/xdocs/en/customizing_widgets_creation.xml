<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Customizing how components are created</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro</author>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
   <p>This is a Thinlet specific functionality.</p>
    <section name="Customizing how components are created">
      <p>Starting from release 2.3, it is possible to customize how componentes
      are created by using the 
      <code>net.java.dev.genesis.ui.thinlet.WidgetFactory</code> interface and 
      its related support classes. It is possible to do so based on either the
      class of the data for which the widget will be created or for a specific
      widget.</p>
      <p>For instance, in order to make both table cells and list and comboboxes 
      itens right-aligned when their content is a <code>java.lang.Number</code>
      class, an instance of <code>WidgetFactory</code> should be registered in
      <code>net.java.dev.genesis.ui.thinlet.WidgetFactoryRegistry</code> 
      before any code that creates widgets is executed. This can be done as 
      shown below:</p>
<source>
public class NumberWidgetFactory extends DefaultWidgetFactory {
   public Object create(BaseThinlet thinlet, String name, String value,
         Object bean, BaseThinlet.ItemType type) {
      Object widget = super.create(thinlet, name, value, bean, type);
      Thinlet.setChoice(widget, BaseThinlet.ALIGNMENT, BaseThinlet.RIGHT);
      return widget;
   }
}
</source>
<source>
// Code for registering the instance, probably at the main(String[]) method
WidgetFactoryRegistry.getInstance().register(Number.class, new NumberWidgetFactory());
</source>
      <p>As shown above, most implementations of <code>WidgetFactory</code> will
      extend <code>DefaultWidgetFactory</code>, a class that implements the 
      basic behaviour used by genesis. The arguments used as parameters for 
      invoking the
      <code>create(BaseThinlet, String, String, Object, BaseThinlet.ItemType)</code>
      method are, in order:</p>
      <ul>
         <li><b>thinlet</b>: the instance of the <code>BaseThinlet</code> 
         subclass the widget will be added to.</li>
         <li><b>name</b>: property value to be used as the component name. It 
         might be ignored, but that is usually not advisable.</li>
         <li><b>value</b>: the text value to be used in the component. It 
         might be ignored, but that is usually not advisable.</li>
         <li><b>property</b>: the property that has been formatted to produce 
         the <code>value</code> argument. It might be useful in some specific 
         cases, such as when creating a tooltip based on another property of a
         bean.</li>
         <li><b>type</b>: the type of the widget to be created, according to the
         enum <code>BaseThinlet.ItemType</code>.</li>
      </ul>
      <p>In order to use an instance of <code>WidgetFactory</code> to create 
      some specific widget, it should be registered in the 
      <code>ThinletBinder</code> instance by invoking the 
      <code>registerWidgetFactory(String,WidgetFactory)</code> method, using the
      same naming rule explained in the <a href="formatting.html">Formatting</a> 
      section, as shown below:</p>
<source>
<![CDATA[
<panel gap="5">
   <table name="widget">
      <header>
         <column name="regularProperty" text="Regular" />
         <column name="specificProperty" text="Specific" />
      </header>
   </table>
</panel>
]]>
</source>
<source>
ThinletBinder binder = prepareBinder(form);
binder.registerWidgetFactory("widget.specificProperty", new NumberWidgetFactory());
binder.bind();
</source>
    </section>
  </body>
</document>
