<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Working with conditions</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro</author>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Working with conditions">
      <p>A powerful concept in genesis is support for conditions. This supprt
      allows implementation of a variety of features, such as controlling the
      enabled state of a widget, its visibility, automatically clearing fields
      and automatically calling a method. All these things are done
      declaratively on the form, with no need to deal with the graphical API
      used for views.</p>
      <subsection name="Enabling and disabling components">
        <p>It's fairly common in UI development situations when a certain field
        or button can only be enabled when a certain condition is true. In order
        to simplify these cases, genesis has an annotation called
        <code>@EnabledWhen</code>. This annotation may be used in attributes and
        actions. A practical usage example is shown below:</p>
<source>
@Form
public class EnabledWhenFormExample {
   private boolean married;
   private String spouseName;

   public boolean isMarried() {
      return married;
   }

   public void setMarried(boolean married) {
      this.married = married;
   }

   @EnabledWhen("form.married")
   public String getSpouseName() {
      return spouseName;
   }

   public void setSpouseName(String spouseName) {
      this.spouseName = spouseName;
   }
}
</source>
        <p>In the example above, only when the widget representing property
        <code>married</code> has a value of <code>true</code> it will be
        possible to enter the spouse's name.</p>
      </subsection>
      <subsection name="Controlling visibility">
        <p>It's possible to hide or show widgets conditionally using the
        <code>@VisibleWhen</code> annotation . Its syntax is similar to the one
        for <code>@EnabledWhen</code> and it also may be used to annotate
        attributes and actions. A usage example in an action is shown below:</p>
<source>
@Form
public class VisibleWhenFormExample {
   private int dependantNumber;

   public int getDependantNumber() {
      return dependantNumber;
   }

   public void setDependantNumber(int dependantNumber) {
      this.dependantNumber = dependantNumber;
   }

   @Action
   @VisibleWhen("dependantNumber > 0")
   public void calculateAdditionalTaxes() {
      // ...
   }

   // ...
}
</source>
        <p>The button representing <code>calculateAdditionalTaxes()</code> will
        be visible only when <code>dependantNumber</code> is greater than zero.
        </p>
      </subsection>
      <subsection name="Widget groups">
        <p>In many cases, certain operations need to be executed for a group
        of widgets. An example of this situation is to make a whole group
        visible or enabled. To accomplish that, let's see a pratical example. Below,
        we have the same user interface coded in Thinlet and Swing:</p>
<source>
<![CDATA[
...
<label text="Current Date:" font="bold"/>
<panel width="10" height="1" />
<textfield name="currentDate" />
...
]]>
</source>
<source>
<![CDATA[
//..
getContentPane().setLayout(new GridLayout(1, 2, 10, 0));

JLabel currentDateLabel = new JLabel();
currentDateLabel.setText("Current Date:");
getContentPane().add(currentDateLabel);

JTextField currentDate = new javax.swing.JTextField();
currentDate.setName("currentDate");
getContentPane().add(currentDate);

//..
]]>
</source>

        <p>In the interface above, the developer intention is to show the field
        "Current Date" under certain conditions. To make this happen, the
        <code>@VisibleWhen</code> annotation is used as the following
        code shows:</p>
<source>
@VisibleWhen("certainConditions")
public Date getCurrentDate() {
   ...
}
</source>
        <p>However, in this case, what happens is that only the
        (<code>textfield</code>/<code>JTextField</code>) will become invisible (in case those
        conditions are not satisfied). Notice that the
        <code>label</code>/<code>JLabel</code>
        and the <code>panel</code> (used for spacing in Thinlet) will not become
        invisible - this clearly is not what was originally intented. All three
        controls should follow just the same conditions for visibility.</p>
        <p>To make this occur, we need to use the <code>widgetGoup</code>
        property of the <code>textfield</code> thinlet xml attribute - see
        the following usage:</p>
<source>
<![CDATA[
...
<label name="currentDateLabel" text="Current Date:" font="bold"/>
<panel name="currentDateSpace" width="10" height="1" />
<textfield name="currentDate"
      property="widgetGroup=currentDateLabel,currentDateSpace"/>
...
]]>
</source>
        <p>Notice that the widgets <code>label</code> and <code>panel</code>
        are now named and referred inside the <code>widgetGroup</code>,
        separated by a comma.</p>
        <p>In Swing, we must define a <code>clientProperty</code> 
        <code>SwingBinder.WIDGET_GROUP_PROPERTY</code> as below:</p>
<source>
<![CDATA[
//..
getContentPane().setLayout(new GridLayout(1, 2, 10, 0));

JLabel currentDateLabel = currentDateLabel = new JLabel();
currentDateLabel.setName("currentDateLabel");
currentDateLabel.setText("Data Corrente:");
getContentPane().add(currentDateLabel);

JTextField currentDate = new javax.swing.JTextField();
currentDate.setName("currentDate");
currentDate.putClientProperty(SwingBinder.WIDGET_GROUP_PROPERTY, "currentDateLabel");
getContentPane().add(currentDate);

//..
]]>
</source>
        <p>Notice that the value of <code>clientProperty</code> is the 
        <code>name</code> of <code>JLabel</code>. If there are
        more than one component, their names should be separated by comma,
        or use a <code>String</code> array.
        We can put in <code>clientProperty</code> the component itself or
        a collection or array of components, as below:</p>
<source>
//..
getContentPane().setLayout(new GridLayout(1, 2, 10, 0));

JLabel currentDateLabel = currentDateLabel = new JLabel();
currentDateLabel.setName("currentDateLabel");
currentDateLabel.setText("Data Corrente:");
getContentPane().add(currentDateLabel);

JTextField currentDate = new javax.swing.JTextField();
currentDate.setName("currentDate");
currentDate.putClientProperty(SwingBinder.WIDGET_GROUP_PROPERTY, <b>currentDateLabel</b>);
getContentPane().add(currentDate);

//..
</source>
        <p>Besides the regular widgetGroup property, there are two more
        specific properties: <code>enabledWidgetGroup</code>
        and <code>visibleWidgetGroup</code>. They define different widget
        groups that will follow enable/disable and visible/invisible rules.
        Those properties will mostly be used because the group of widgets in
        each case is different. For example:</p>
<source>
<![CDATA[
...
<label name="clientLabel" text="Client:" font="bold"/>
<panel name="clientSpace1" width="10" height="1" />
<textfield name="clientCode" ... />
<panel name="clientSpace2" width="10" height="1" />
<textfield name="clientName"
      property="enabledWidgetGroup=clientCode;
            visibleWidgetGroup=clientLabel,clientSpace1,
                               clientCode,clientSpace2"/>
...
]]>
</source>
        <p>This way, enabling/disabling rule will only affect
        <code>clientCode</code> and <code>clientName</code> widgets only.
        On another hand, visibility rule will affect the whole group, including
        the label and all panels for spacing.</p>
        <p>In Swing, we use 
        <code>SwingBinder.ENABLED_GROUP_PROPERTY</code> and
        <code>SwingBinder.VISIBLE_GROUP_PROPERTY</code>
        as <code>clientProperty</code>.</p>
      </subsection>
      <subsection name="Clearing field content">
        <p>Under many conditions it is necessary to clean field content. genesis
        can do that automatically for the programmer through the
        <code>@ClearOn</code> annotation. Although its syntax is similar to
        <code>@EnabledWhen</code> and <code>@VisibleWhen</code> one's, this
        annotation may only be used for attributes and not for actions (since
        actions do not have content). A previous example may be modified to be
        more accurate:</p>
<source>
@Form
public class ClearOnFormExample {
   private boolean married;
   private String spouseName;

   public boolean isMarried() {
      return married;
   }

   public void setMarried(boolean married) {
      this.married = married;
   }

   @EnabledWhen("form.married")
   @ClearOn("!form.married")
   public String getSpouseName() {
      return spouseName;
   }

   public void setSpouseName(String spouseName) {
      this.spouseName = spouseName;
   }
}
</source>
        <p>When property <code>married</code> is <code>false</code>,
        <code>spouseName</code> will be automatically reset to
        <code>null</code>.</p>
        <p>The value used for resetting is defined by <code>@EmptyValue</code>.
        This annotation should be used for the attribute whose empty value is
        being specified. Its syntax is:</p>
<source>
@EmptyValue("value")
</source>
        <p>If <code>@EmptyValue</code> is not specified, a default value is used
        instead - <code>false</code> for booleans, zero for numeric types and
        <code>null</code> otherwise.</p>
        <p>The annotation <code>@ClearOn</code> can be used together with
        <code>@DataProvider</code> annotation. The DataProviders widgets will
        be cleaned and the form properties that store selected values will be
        automatically reset to <code>null</code> when script condition is satisfied.
        See the following usage:</p>
<source>
   @DataProvider(objectField="state")
   @ClearOn("&lt;some script condition&gt;")
   public List populateStates() {
      ...
   }
</source>
      </subsection>
      <subsection name="Automatically invoking methods">
        <p>Some methods need to be called every time certain conditions are
        true. Instead of forcing programmers to do that manually - what can lead
        to the so-called "spaghetti" code -, genesis defines the
        <code>@CallWhen</code> annotation. With a syntax similar to previous
        annotations, this one may be only used for actions and not for
        attributes.</p>
        <p>A previous example can be modified to show how to use this annotation
        in practice:</p>
<source>
@Form
public class CallWhenFormExample {
   private int dependantNumber;

   public int getDependantNumber() {
      return dependantNumber;
   }

   public void setDependantNumber(int dependantNumber) {
      this.dependantNumber = dependantNumber;
   }

   @Action
   @CallWhen("form.dependantNumber > 0")
   public void calculateAdditionalTaxes() {
      // ...
   }
}
</source>
        <p>Differently from the original <code>@VisibleWhen</code> example,
        <code>calculateAdditionalTaxes()</code> will be invoked automatically by
        genesis whenever <code>dependantNumber</code> is greater than zero.</p>
      </subsection>
      <subsection name="Declaring conditions">
        <p>Although all anotations that have script conditions as arguments are
        capable of handling any type of expression, certain conditions may be
        used repeatedly in the code or as part of another expression. Due to
        that, genesis makes it possible to declare these conditions and export
        them as variables that may be referenced in other points of the code.
        The annotation <code>@Condition</code> is used to declare a condition,
        whose syntax is:</p>
<source>
@Condition("conditionName=scriptExpression")
</source>
        <p>The variable named <code>conditionName</code> is exported in order to
        represent the expression <code>scriptExpression</code> in other points
        in the code. As every other script variable, when it's used on a
        expression its name should be preceeded by <code>$</code>. In the
        example above, the variable should be referenced in a conditional
        expression as <code>$conditionName</code>.</p>
        <p>This annotation may be used at class level, in an attribute getter or
        in a method annotated as <code>@Action</code>. Its scope will always be
        class-wide, no matter where it's declared. Obviously, this annotation is
        useful only when used together with another conditional annotation that
        references the exported variable, as the ones mentioned below.</p>
      </subsection>
    </section>
    <section name="Determining if a field is empty">
      <p>In order to perform or not to perform some operations, genesis needs to
      determine whether a field is empty. Besides that, the fact a field is
      filled or not is usually as a way to define a condition for some genesis'
      annotations. Interface <code>EmptyResolver</code>, defined on
      <code>net.java.dev.genesis.resolvers</code> is used for that.</p>
      <p>This interface exposes a single method <code>isEmpty(Object)</code>,
      that returns a <code>boolean</code>. To specify which
      <code>EmptyResolver</code> to use for a certain attribute,
      annotation <code>@EmptyResolver</code> can be used. Its syntax is:</p>
<source>
@EmptyResolver(value=&lt;classThatImplementsInterface&gt;,
               properties=&lt;attributes&gt;)
</source>
      <p>It is not necessary to actually insert a line break when defining the
      annotation; it's ok to separate class name from attributes with a space.
      </p>
      <p>In order to avoid being required to specify which
      <code>EmptyResolver</code> implementation should be used for every
      attribute in each form in an application, genesis has a mechanism for
      determining which implementation to use based on the type of an attribute.
      Class <code>EmptyResolverRegistry</code> keeps a registry of default
      <code>EmptyResolver</code> implementations per class. The following
      implementations are initially set up:</p>
      <ul>
        <li><code>MapEmptyResolver</code> is registered for
        <code>java.util.Map</code> instances. It considers as empty null
        instances or the ones that return <code>true</code> for
        <code>isEmpty()</code>.</li>
        <li><code>CollectionEmptyResolver</code> is the default implementation
        for <code>java.util.Collection</code>. It uses the same principle that
        <code>MapEmptyResolver</code> does in order to determine whether an
        instance is empty or not.</li>
        <li>The default implementation for <code>String</code> is
        <code>StringEmptyResolver</code>. Instances considered empty are the
        ones that are null or that have a zero length after spaces are removed,
        i.e., <code>s == null || s.trim().length() == 0</code>.</li>
        <li>For remaining cases, a <code>DefaultEmptyResolver</code> instance is
        registered. This implementation considers as empty null instances or
        zero-element arrays.</li>
      </ul>
      <p>These default implementations should be satisfactory for most cases. As
      an example of how customization might be done, let's consider how to use
      the annotation in a form attribute for which empty spaces are actually
      relevant:</p>
<source>
@EmptyResolver(properties="trim=false")
public String getAttribute() {
   return attribute;
}
</source>
      <p>Since <code>String</code> already has a registered default
      <code>EmptyResolver</code> instance, <code>StringEmptyResolver</code>, and
      this implementation exposes an attribute that allows one to configure
      whether spaces should be removed or not, it's not necessary to specify the
      name of the interface implementation class and it's enough to define
      property <code>trim</code> as <code>false</code>. If it wasn't possible to
      configure the default instance, another implementation could be used
      instead as following:</p>
<source>
@EmptyResolver(com.company.package.EmptyResolverImplementation.class)
public String getAttribute() {
   return attribute;
}
</source>
      <subsection name="Verifying if a field is empty in conditional
      expressions">
        <p>As already mentioned, it's very common to determine conditions that
        are based on the fact a field is empty or not. genesis exposes script
        auxiliary functions that may be used in conditions in order to make this
        task easier: <code>isEmpty(any)</code> and
        <code>isNotEmpty(any)</code>.</p>
        <p>When the argument is a form property, the <code>EmptyResolver</code>
        instance configured for it - determined as explained above - is used to
        determine the return value. If the argument is a variable or a constant,
        a default <code>EmptyResolver</code> instance for the expression type is
        obtained from <code>EmptyResolverRegistry</code> and used for
        evaluation. These functions may be used with 
        <a href="generic_scripting.html">Javascript</a> as shown below:</p>
<source>
public String getAttribute() {
   return attribute;
}

public void setAttribute(String attribute) {
   this.attribute = attribute;
}

@EnabledWhen("genesis.isNotEmpty('form:attribute')")
public String getDependantAttribute() {
   return dependantAttribute;
}

public void setDependantAttribute(String dependantAttribute) {
   this.dependantAttribute = dependantAttribute;
}
</source>
      </subsection>
    </section>
    <section name="Comparing values">
      <p>Both the framework and developers need sometimes to check if a field
      value has been changed or if its value is equal to some constant or
      another field value. Interface <code>EqualityComparator</code> contained
      in <code>net.java.dev.genesis.equality</code> is implemented by classes
      that are capable of making this decision.</p>
      <p>This interface defines <code>equals(Object,Object)</code> that returns
      a <code>boolean</code> indicating whether compared instances are equals or
      not. The annotation with the same name, <code>@EqualityComparator</code>
      may be used to explicitly define the implementation used for a certain
      attribute. Its syntax is similar to <code>@EmptyResolver</code>'s one:</p>
<source>
@EqualityComparator(value=&lt;classThatImplementsInterface&gt;,
                    properties=&lt;attributes&gt;)
</source>
      <p>Usually it won't be necessary to use this annotation since genesis also
      has a default mechanism for determining which interface implementation
      should be used for a given attribute. The class / implementation map is
      kept by <code>EqualityComparatorRegistry</code>. Default registered
      implementations are:</p>
      <ul>
        <li><code>BigDecimalEqualityComparator</code> considers two
        <code>java.math.BigDecimal</code> instances equals if both are null or
        if <code>compareTo(BigDecimal)</code>'s return for one of them is zero.
        </li>
        <li><code>StringEqualityComparator</code> considers null or zero-length
        trimmed<code>String</code>s equals. They'll also be considered equals if
        <code>s1.trim().equals(s2.trim())</code>.</li>
        <li>Remaining cases are handled by <code>DefaultEqualityComparator</code>,
        that considers two instances to be equals if both are null or if
        <code>o1.equals(o2)</code> returns true.</li>
      </ul>
      <subsection name="Verifying field value changes and doing comparisson in
          conditional expressions">
        <p>Some script functions are exported by genesis in order to help
        developers in common tasks:</p>
        <ul>
          <li><code>hasChanged(property)</code> and
          <code>hasNotChanged(property)</code> verify whether a field value
          has changed or not.</li>
          <li><code>equals(any,any)</code> and
          <code>notEquals(any,any)</code> compare two values - that may be
          constants, form properties or variables - and return the comparisson
          result.</li>
        </ul>
        <p>genesis internally keeps control of fields that have their value
        changed in the current iteraction. This list is checked by functions
        <code>hasChanged(property)</code> and
        <code>hasNotChanged(property)</code>. To determine whether a value
        has been changed or not and to populate this internal list, the
        framework uses the <code>EqualityComparator</code> instance configured
        for the property.</p>
        <p>Functions <code>equals(any,any)</code> and
        <code>notEquals(any,any)</code> also make use of
        <code>EqualityComparator</code> instances to determine their output.
        However, the actual process used for that is a bit more complicated, as
        explained below:</p>
        <ul>
          <li>An instance of <code>EqualityComparator</code> for each parameter
          is determined. If the parameter is a form property, its configured
          implementation will be used. Otherwise, the default implementation
          registered in <code>EqualityComparatorRegistry</code> will be picked
          up.</li>
          <li>If comparators for both parameters are the same, the first one of
          them will be used to do the comparisson.</li>
          <li>If the first parameter type is an instance of the second parameter
          type, its <code>EqualityComparator</code> instance will be used for
          performing the comparisson.</li>
          <li>If the second parameter type is an instance of the second
          parameter type, its <code>EqualityComparator</code> instance will be
          used for performing the comparisson.</li>
          <li>If none of the above conditions is true, <code>false</code> will
          be returned.</li>
        </ul>
        <p>There are examples (using <a href="generic_scripting.html">Javascript</a>)
        of how to use each function pair below:</p>
<source>
public BigDecimal getTax() {
   return tax;
}

public void setTax(BigDecimal tax) {
   this.taxa = tax;
}

@Action
@CallWhen("genesis.hasChanged('form:tax')")
public void recalculateValues() {
   // logic for recalculating
}
</source>
<source>
public BigDecimal getDebt() {
   return debt;
}

public void setDebt(BigDecimal debt) {
   this.debt = debt;
}

public BigDecimal getPaidAmount() {
   return paidAmount;
}

public void setPaidAmount(BigDecimal paidAmount) {
   this.paidAmount = paidAmount;
}

@Action
@CallWhen("genesis.notEquals('form:debt', 'form:paidAmount')")
public void calculateRemainingAmount() {
   // logic for calculating amount
}
</source>
      </subsection>
      <subsection name="Changing the way values are cloned">
         <p>In previous releases, old property values were merely copied as 
         part of form state, what implied in some limitations on how change 
         detecction worked. For example, if the value of a property was a 
         JavaBean and one of its properties was changed, it was not possible to
         detect this change by using <code>genesis.hasChanged('form:property')</code>, 
         since both the previous state copy that genesis hold and the current 
         value would point to the same instance in memory.</p>
         <p>Starting from release 2.3, a new API has been introduced that allows
         to control how genesis generates a copy of the previous value of a 
         property. The <code>net.java.dev.genesis.cloning.Cloner</code> 
         interface has a single <code>clone(Object)</code> method that returns 
         the value genesis is suposed to keep as a copy of the value used as an
         argument to the call. The default implementation of that interface - 
         provided by <code>net.java.dev.genesis.cloning.DefaultCloner</code> - 
         simply returns the value used as a parameter, preserving backwards 
         compatibility.</p>
         <p>Similar to <code>EqualityComparator</code>, there is a registry that
         associates <code>Cloner</code> implementations with the class used in
         the property, <code>net.java.dev.genesis.cloning.ClonerRegistry</code>, 
         as well as an annotation that allows the <code>Cloner</code> 
         implementation to be used to be overridden on a property basis, 
         <code>@Cloner</code>.</p>
         <p>The following code shows how to override the <code>Cloner</code> 
         implementation that is going to be used both globally and for a 
         specific bean property:</p>
<source>
ClonerRegistry.getInstance().register(User.class, new BeanUtilsCloner());
</source>
<source>
@Form
public class ClonerFormExample {
   @Cloner(net.java.dev.genesis.cloning.BeanUtilsCloner.class)
   public User getUser() {
      // ...
   }

   // ...
}
</source>
         <p>The class used in both examples above,  
         <code>net.java.dev.genesis.cloning.BeanUtilsCloner</code>, is the other 
         implementation provided by genesis that clones the value using the 
         Commons BeanUtils API.</p>
      </subsection>
    </section>
  </body>
</document>