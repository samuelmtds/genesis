<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Genesis Distribution</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="Why so many JAR files on genesis distribution?">
      <p>genesis is composed of basically 4 modules: <b>genesis-aspect</b>,
      <b>genesis-client</b>, <b>genesis-shared,</b> and <b>genesis-server</b>.
      </p>
      <p>The concept is:</p>
      <ul>
        <li>One of the genesis modules is only necessary in the server side
        (genesis-server)</li>
        <li>Another genesis module is only necessary in the client ('desktop')
        side (genesis-client)</li>
        <li>The last genesis module is needed in both the server side, as well
        in the 'desktop' client side (genesis-shared)</li>
      </ul>
      <p>The last module is an additional module for the client 'desktop' side,
      the genesis-aspect.</p>
      <p>So a genesis based application needs to have in the application server
      the JAR files for genesis-server and genesis-shared modules as
      dependencies. In the client side, the dependencies will be the JAR files
      for the genesis-client, genesis-shared, and genesis-aspect.</p>
      <p>Let's see a more detailed explanation for each module:</p>
      <ul>
        <li><a href="#genesis-server">genesis-server</a></li>
        <li><a href="#genesis-client">genesis-client</a></li>
        <li><a href="#genesis-shared">genesis-shared</a></li>
        <li><a href="#genesis-aspect">genesis-aspect</a></li>
      </ul>
    </section>
    <section name="genesis-server">
      <p>The <b>genesis-server</b> module is the smaller and has only one file
      in the genesis distribution:</p>
<source>
genesis-server-&lt;version&gt;.jar
</source>
      <p>In this module we hold the implementation of a single Stateless Session
      named <code>CommandExecutorEJB</code>. This is the Session Bean
      responsible for all executions of remote methods in an application. All
      object that have remote methods are transfered to this Stateless Session
      Bean, and the remote method is executed through reflection by the Session
      Bean.</p>
      <p>The <code>CommandExecutorEJB</code> bean has basically two methods for
      execution of your application remote methods:</p>
<source>
public Object executeTransaction(Object o, String methodName,
                                 String[] classNames, Object[] args);
public Object executeQuery(Object o, String methodName,
                           String[] classNames, Object[] args);
</source>
      <p>The main difference between them is that the first method requires an
      open transaction, and the other does not.</p>
      <p>Another class,
      <code>net.java.dev.genesis.ejb.hibernate.EJBHibernateTransactionalInjector
      </code>, implements the interface
      <code>net.java.dev.genesis.command.TransactionalInjector</code>. genesis
      is ready to work with <a href="http://www.hibernate.org/">Hibernate</a> as
      a persistence engine. For this reason, it is included in the framework an
      standard implementation of <code>TransactionalInjector</code> that is
      responsible for the injection of the Hibernate session and transaction
      control. This is responsible for commiting the transaction in a
      transactional method that executes successfully, or otherwise rolling it
      back if a failure happens.</p>
      <p>The <b>genesis-server</b> module is completely transparent for
      developers and there's no reason to deal with it unless you need to use a
      different persistent engine that not Hibernate. If this is necessary, then
      all that is needed is provide another implementation of the
      <code>TransactionalInjector</code> interface.</p>
    </section>
    <section name="genesis-client">
      <p>The <b>genesis-client</b> module is the largest module of all genesis,
      and has one file in the distribution:</p>
<source>
genesis-client-&lt;version&gt;.jar
</source>
      <p>In this module, we have all the implementation of the visual UI
      infrastructure of the framework. In this version of genesis, we have 
      UI functionality for
      <a href="http://thinlet.sourceforge.net/">Thinlet</a> framework and
      <a href="http://java.sun.com/products/jfc/">Swing</a>.</p>
      <p>This module includes classes for on screen data format, data conversion
      features, and other that are needed in the UI side of the application. </p
      >
    </section>
    <section name="genesis-shared">
      <p>The <b>genesis-shared</b> module is the one needed in both sides of the
      application, server and client sides. It has two distribution files:</p>
<source>
genesis-shared-&lt;version&gt;.jar
genesis-shared-annotated-&lt;version&gt;.jar
</source>
      <p>This two files have exactly the <b>same</b> classes and the only
      difference is that the file
      <code>genesis-shared-annotated-&lt;version&gt;.jar</code> was compiled and
      annotated. This means that the classes were, after compilation, pos-
      compiled to insert information about the annotations (for example:
      <code>@Remotable, @Transactional, @Criteria</code>).</p>
      <p>For a developer, the difference is that the file
      <code>genesis-shared-&lt;version&gt;.jar</code> has to be in the server
      side of an application, while the
      <code>genesis-shared-annotated-&lt;version&gt;.jar</code> has to be
      included in the client side.</p>
    </section>
    <section name="genesis-aspect">
      <p>The <b>genesis-aspect</b> module is orthogonal to the application. No
      other module depends of this one (there are no import of this module
      classes in other modules). There are two files in this module:</p>
<source>
genesis-aspect-&lt;version&gt;.jar
genesis-aspect-annotated-&lt;version&gt;.jar
</source>
      <p>As the module genesis-shared, this two files have the <b>same</b>
      classes, and the only difference is that the file
      <code>genesis-aspect-annotated-&lt;version&gt;.jar</code> was both
      compiled and annotated.</p>
      <p>The module genesis-aspect has all aspects responsible for the genesis
      <b>magic</b>. There are aspects responsible for intercepting the method
      calls methods annotated as remote and then execute then remotely. Other
      aspects are used to treat metadata from the UI, along many other aspects.
      </p>
      <p>It is generally necessary to use only the
      <code>genesis-aspect-annotated-&lt;version&gt;.jar</code> file from
      genesis distribution, since this has all the aspects already annotated,
      and no configuration is needed. This module will be used only in the
      client side of the application.</p>
    </section>
    <section name="General Information">
      <p>It is important to notice that all classes in the server side are
      normally compiled Java classes, with no bytecode manipulation. In the
      client side however we have classes that are post-compiled, where their
      bytecode have been altered to introduce annotations and manipulations and
      are recompiled by genesis aspects.</p>
      <p>Below we have a list of all files in the genesis distribution, and
      their characteristics:</p>
      <table>
        <tr>
          <th>JAR file</th>
          <th>genesis module</th>
          <th>client side</th>
          <th>server side</th>
          <th>bytecode manipulation</th>
        </tr>
        <tr>
          <td>genesis-server-&lt;version&gt;.jar</td>
          <td>genesis-server</td>
          <td>no</td>
          <td>yes</td>
          <td>no</td>
        </tr>
        <tr>
          <td>genesis-client-&lt;version&gt;.jar</td>
          <td>genesis-client</td>
          <td>yes</td>
          <td>no</td>
          <td>no</td>
        </tr>
        <tr>
          <td>genesis-shared-&lt;version&gt;.jar</td>
          <td>genesis-shared</td>
          <td>no</td>
          <td>yes</td>
          <td>no</td>
        </tr>
        <tr>
          <td>genesis-shared-annotated-&lt;version&gt;.jar</td>
          <td>genesis-shared</td>
          <td>yes</td>
          <td>no</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>genesis-aspect-&lt;version&gt;.jar</td>
          <td>genesis-aspect</td>
          <td>yes</td>
          <td>no</td>
          <td>no</td>
        </tr>
        <tr>
          <td>genesis-aspect-annotated-&lt;version&gt;.jar</td>
          <td>genesis-aspect</td>
          <td>yes</td>
          <td>no</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>genesis-annotation-jdk5-&lt;version&gt;.jar</td>
          <td>genesis-annotation</td>
          <td>Sim</td>
          <td>Sim</td>
          <td>Não</td>
        </tr>
        <tr>
          <td>genesis-annotation-jdk14-&lt;version&gt;.jar</td>
          <td>genesis-annotation</td>
          <td>Sim</td>
          <td>Sim</td>
          <td>Não</td>
        </tr>
      </table>
        <p>The jar file <code>genesis-annotation-jdk5-&lt;version&gt;.jar</code>
          contains Java 5 genesis annotations.
          The jar file <code>genesis-annotation-jdk14-&lt;version&gt;.jar</code>
          contains Java 1.4 equivalent interfaces for compatibility.
          At runtime, the jar file
          <code>genesis-annotation-jdk14-&lt;version&gt;.jar</code> is used
          for better compatibility.</p>
      <p>In genesis distribution we also have a file
      <code>annotation.properties</code> that is used by the annotation compiler
      to identify which annotations in the source code need to be inserted in
      the classes bytecode.</p>
    </section>
  </body>
</document>