<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Annotation quick reference guide</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
    <author email="pmadril@uol.com.br">Pablo Jorge Madril</author>
  </properties>
  <body>
    <section name="Annotation quick reference guide">
      <p>This quick reference guide documents the annotations used by genesis.
      This includes annotations for UI and server components. Examples provided
      with each tag come from <a href="useradmin_sample.html">useradmin</a>
      sample application.</p>
    </section>
    <section name="genesis Annotations">
      <p>genesis annotations are classified by it's scope in:</p>
      <ul>
        <li><b>Class</b>: use before a class definition</li>
        <li><b>Atribute</b>: use before an attribute getter</li>
        <li><b>Method</b>: use before a method definition</li>
      </ul>
      <p>Some annotations are valid in more than one scope.</p>
      <p>
        <table>
          <tr>
            <th>genesis Element</th>
            <th>Scope</th>
            <th>Annotation Tag</th>
          </tr>
          <tr>
            <td rowspan="3">Forms</td>
            <td>Class</td>
            <td>
              <ul>
                <li><a href="#@Condition">@Condition</a></li>
                <li><a href="#@Form">@Form</a></li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Atribute</td>
            <td>
              <ul>
                <li><a href="#@ClearOn">@ClearOn</a></li>
                <li><a href="#@Condition">@Condition</a></li>
                <li><a href="#@EmptyResolver">@EmptyResolver</a></li>
                <li><a href="#@EmptyValue">@EmptyValue</a></li>
                <li><a href="#@EnabledWhen">@EnabledWhen</a></li>
                <li><a href="#@EqualityComparator">@EqualityComparator</a></li>
                <li><a href="#@NotBound">@NotBound</a></li>
                <li><a href="#@VisibleWhen">@VisibleWhen</a></li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Method</td>
            <td>
              <ul>
                <li><a href="#@Action">@Action</a></li>
                <li><a href="#@CallWhen">@CallWhen</a></li>
                <li><a href="#@ClearOn">@ClearOn</a></li>
                <li><a href="#@Condition">@Condition</a></li>
                <li><a href="#@DataProvider">@DataProvider</a></li>
                <li><a href="#@EnabledWhen">@EnabledWhen</a></li>
                <li><a href="#@ValidateBefore">@ValidateBefore</a></li>
                <li><a href="#@VisibleWhen">@VisibleWhen</a></li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>View</td>
            <td>Method</td>
            <td>
              <ul>
                <li><a href="#@BeforeAction">@BeforeAction</a></li>
                <li><a href="#@AfterAction">@AfterAction</a></li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>POJO</td>
            <td>Class</td>
            <td>
              <ul>
                <li><a href="#@ViewHandler">@ViewHandler</a></li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Command</td>
            <td>Method</td>
            <td>
              <ul>
                <li><a href="#@Criteria">@Criteria</a></li>
                <li><a href="#@Remotable">@Remotable</a></li>
                <li><a href="#@Transactional">@Transactional</a></li>
              </ul>
            </td>
          </tr>
        </table>
      </p>
    </section>
    <section name="genesis scripting auxiliary functions">
      <p>genesis add these functions as extensions to JXPath:</p>
      <ul>
        <li>isEmpty(any), isNotEmpty(any)</li>
        <li>equals(any,any), notEquals(any,any)</li>
        <li>hasChanged(field), hasNotChanged(field)
        </li>
      </ul>
      <p>These functions may be applied to all annotations that accept boolean
      scripting expressions as parameters.
      With <a href="generic_scripting.html">JXPath</a>
      the <b>g:</b> prefix identifies the genesis functions' namespace. Core
      JXPath functions don't use any prefix.</p>
      <subsection name="isEmpty(any), isNotEmpty(any)">
        <p>Checks whether a field is empty or not. When the argument is a form
        property, the <code>EmptyResolver</code> instance configured for it is
        used to determine the return value. If the argument is a variable or a constant,
        a default <code>EmptyResolver</code> instance for the expression type is
        obtained from <code>EmptyResolverRegistry</code> and used for
        evaluation.
        </p>
        <p><a href="ui_additional_features.html#Verifying_if_a_field_is_empty_in_conditional_______expressions">More info...</a></p>
        <p>Specific syntax for default supported script languages are shown
        bellow:</p>
        <table>
          <tr>
            <th>Script</th>
            <th>isEmpty</th>
            <th>isNotEmpty</th>
          </tr>
          <tr>
            <th>JXPath</th>
            <td>g:isEmpty(formField)</td>
            <td>g:isNotEmpty(formField)</td>
          </tr>
          <tr>
            <th>JavaScript/Beanshell</th>
            <td>genesis.isEmpty("form:formField")</td>
            <td>genesis.isNotEmpty("form:formField")</td>
          </tr>
          <tr>
            <th>EL</th>
            <td>g:isEmpty("form:formField")</td>
            <td>g:isNotEmpty("form:formField")</td>
          </tr>
        </table>
      </subsection>
      <subsection name="equals(any,any), notEquals(any,any)">
        <p>Checks if a field value is equal to some constant or another field
        value. Uses any <code>@EqualityComparator</code> defined class available
        or a default implementation to make this decision. Accepts numbers,
        strings, fields or script functions as arguments.</p>
        <p>Specific syntax for default supported script languages are shown
        bellow:</p>
        <table>
          <tr>
            <th>Linguagem</th>
            <th>equals</th>
            <th>notEquals</th>
          </tr>
          <tr>
            <th>JXPath</th>
            <td>g:equals(formField, otherField)</td>
            <td>g:notEquals(formField, otherField)</td>
          </tr>
          <tr>
            <th>JavaScript/Beanshell</th>
            <td>genesis.equals("form:formField", "form:otherField")</td>
            <td>genesis.notEquals("form:formField", "form:otherField")</td>
          </tr>
          <tr>
            <th>EL</th>
            <td>g:equals("form:formField", "form:otherField")</td>
            <td>g:notEquals("form:formField", "form:otherField")</td>
          </tr>
        </table>
      </subsection>
      <subsection name="hasChanged(property),
                        hasNotChanged(property)">
        <p>Checks whether a field value has been changed or not. genesis
        internally keeps control of fields that have their value changed in the
        current iteraction using the <code>EqualityComparator</code> instance
        configured for the property.
        </p>
        <p>Specific syntax for default supported script languages are shown
        bellow:</p>
        <table>
          <tr>
            <th>Linguagem</th>
            <th>hasChanged</th>
            <th>hasNotChanged</th>
          </tr>
          <tr>
            <th>JXPath</th>
            <td>g:hasChanged(campoDoForm)</td>
            <td>g:hasNotChanged(campoDoForm)</td>
          </tr>
          <tr>
            <th>javascript ou Beanshell</th>
            <td>genesis.hasChanged("form:campoDoForm")</td>
            <td>genesis.hasNotChanged("form:campoDoForm")</td>
          </tr>
          <tr>
            <th>EL</th>
            <td>g:hasChanged("form:campoDoForm")</td>
            <td>g:hasNotChanged("form:campoDoForm")</td>
          </tr>
        </table>
      </subsection>
        <p><a href="ui_additional_features.html#Verifying_field_value_changes_and_doing_comparisson_in___________conditional_expressions">More info...</a></p>
    </section>
    <section name="Tag Reference">
      <subsection name="@Form">
        <p>Mark this class as a genesis form. genesis forms contain UI logic and
        are not coupled to the graphical API used to display screens. A form is
        just a JavaBean that has annotations that indicate how its properties
        and methods should be handled by a UI.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>None</td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>
  <p>Example (InsertUpdateForm.java):</p>
  <source>
/**
 * <b>@Form</b>
 * @Condition findRoleCondition=g:isNotEmpty(roleCode) and g:hasChanged(roleCode)
 *
 * @genesis.form
 */
public class InsertUpdateForm {
<b>...</b>
  </source>
    <p><a href="ui_basic_concepts.html#Understanding_forms">More info...</a></p>
      </subsection>
      <subsection name="@Condition">
        <p>Names <code>conditionName</code> as a condition variable that is
        exported in order to represent the expression
        <code>jxpathExpression</code> in other points in the code. As every
        other JXPath variable, when it's used on a expression its name should be
        preceeded by <b>$</b> as in <code>$conditionName</code>.</p>
        <p>This annotation may be used at class level, in an attribute getter or
        in a method annotated as <code>@Action</code>. Its scope will always be
        class-wide, no matter where it's declared.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>conditionName</td>
            <td>text of a valid jxpathExpression</td>
            <td>See also <a href="#genesis JXPath auxiliary functions">genesis JXPath auxiliary functions</a></td>
            <td><b>Yes</b></td>
          </tr>
        </table>
  <p>Example (InsertUpdateForm.java):</p>
  <source>
/**
 * @Form
 * <b>@Condition findRoleCondition=g:isNotEmpty(roleCode) and g:hasChanged(roleCode)</b>
 *
 * @genesis.form
 */
public class InsertUpdateForm {
<b>...</b>
   /**
    * @Action
    * @CallWhen <b>$findRoleCondition</b>
    */
   public void findRole() throws Exception {
   <b>...</b>
  </source>
    <p><a href="ui_additional_features.html#Declaring_conditions">More info...</a></p>
      </subsection>
      <subsection name="@NotBound">
        <p>Makes a property unmodifiable and undisplayable by genesis. It may
        be used in property getter methods.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>None</td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>
  <p>Example:</p>
  <source>
/**
 * @Form
 */
public class FormExample {
<b>...</b>
   /**
    * <b>@NotBound</b>
    */
   public String getProperty() {
   <b>...</b>
  </source>
      </subsection>
      <subsection name="@DataProvider">
      <p>This annotation may be used in methods returning either a
      <code>java.util.List</code> or an array. Values returned by the method
      will be used to populate a combo or a list or a table widget.
      <code>objectField</code>, if specified, should receive as a parameter
      the name of a property that will hold the instance selected on the
      widget. This property should be of the same type or a superclass of the
      type returned by the annotated method, an array of this type or a
      <code>List</code>.
      <code>indexField</code> is the property that will hold indexes for the
      selected elements on the widget. It must be an <code>int</code> or an
      <code>Integer</code>, an array of one of these types or a
      <code>List</code>. At least one of these two parameters or
      <code>widgetName</code> must be informed.</p>
      <p>The widget <code>name</code> is equal to the value specified for
      <code>objectField</code> or <code>indexField</code>, if
      <code>widgetName</code> is not specified. When both are specified,
      <code>objectField</code> value must be equal to the widget
      <code>name</code>.
      </p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>objectField</td>
            <td>form's property name (which is also a widgetName, if
            <code>widgetName</code> is not specified)</td>
            <td>Property to be set whenever some content is selected
            and also the name of widget that will be populated with method's
            return if <code>widgetName</code> is not specified</td>
            <td>just in case there is neither <code>indexField</code>
            nor <code>widgetName</code> specified</td>
          </tr>
          <tr>
            <td>indexField</td>
            <td>name of a form's property.
             (also widget's name if neither <code>objectField</code> nor
             <code>widgetName</code> are specified)</td>
            <td>name of a form's property that holds indexes of the selected
            elements on the widget. It must be an <code>int</code> or an
            <code>Integer</code>, an array of one of these types or a
            <code>List</code></td>
            <td>just in case there is neither <code>objectField</code>
            nor <code>widgetName</code> specified</td>
          </tr>
          <tr>
            <td>widgetName</td>
            <td>simply widgetName</td>
            <td>Widget that will be filled with method's data</td>
            <td>just in case there is neither <code>objectField</code>
            nor <code>indexField</code> specified</td>
          </tr>
          <tr>
            <td>callOnInit</td>
            <td>boolean</td>
            <td>Defines whether the annotated method will be invoked on
            binding</td>
            <td>No, default: <code>true</code></td>
          </tr>
          <tr>
            <td>resetSelection</td>
            <td>boolean</td>
            <td>Defines whether the selection will be cleared each time the
            method gets invoked</td>
            <td>No, default: <code>true</code></td>
          </tr>
        </table>
  <p>Example (InsertUpdateForm.java):</p>
  <source>
   /**
    * <b>@DataProvider objectField=country</b>
    */
   public Collection provideCountries() throws Exception {
   <b>...</b>
  </source>
    <p><a href="ui_additional_features.html#Populating_comboboxes__lists_and_tables">
    More info...</a></p>
      </subsection>
      <subsection name="@EnabledWhen">
        <p>Enables a widget upon a certain condition (JXPath expression or <a
        href="#@Condition">@Condition</a> variable) is true. This annotation may
        be used in attributes and actions.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>JXPath boolean expression (or <a href="#@Condition">@Condition</a> variable)</td>
            <td>condition upon which widget is enabled</td>
            <td><b>Yes</b></td>
          </tr>
        </table>
  <p>Example (UsersListForm.java):</p>
  <source>
   /**
    * @Action
    * <b>@EnabledWhen $usersSelected</b>
    */
   public void remove() throws Exception {
   <b>...</b>
  </source>
    <p><a href="ui_additional_features.html#Enabling_and_disabling_components">More info...</a></p>
      </subsection>
      <subsection name="@VisibleWhen">
        <p>Show or hide widgets as result from evaluating a boolean JXPath
        expression. Its syntax is similar to the one for
        <code>@EnabledWhen</code> and it also may be used to annotate attributes
        and actions.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>JXPath boolean expression (or <a href="#@Condition">@Condition</a> variable)</td>
            <td>condition to show or hide the widget</td>
            <td><b>Yes</b></td>
          </tr>
        </table>
  <p>Example (UsersListForm.java):</p>
  <source>
   /**
    * @Action
    * <b>@VisibleWhen pageNumber &gt; 0</b>
    */
   public void previousPage() {
   <b>...</b>
  </source>
    <p><a href="ui_additional_features.html#Controlling_visibility">More info...</a></p>
      </subsection>
      <subsection name="@CallWhen">
        <p>Call the action when the boolean JXPath expression (or <a
        href="#@Condition">@Condition</a>variable) evaluates to true. It can
        only be used for actions (methods with <a href="#@Action">@Action</a>
        annotation) and not for attributes.
        </p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Use</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>JXPath boolean expression (or <a href="#@Condition">@Condition</a> variable)</td>
            <td>@CallWhen g:equals(field3,'abcd') </td>
            <td>if condition evaluates true, call method</td>
            <td><b>Yes</b></td>
          </tr>
        </table>
  <p>Example (InsertUpdateForm.java):</p>
  <source>
   /**
    * @DataProvider objectField=state
    * <b>@CallWhen g:hasChanged(country)</b>
    */
   public Collection provideState() throws Exception {
   <b>...</b>
  </source>
    <p><a href="ui_additional_features.html#Automatically_invoking_methods">More info...</a></p>
      </subsection>
      <subsection name="@ClearOn">
        <p>Cleans field content or DataProvider widget upon a true condition (JXPath boolean expression
        or <a href="#@Condition">@Condition</a> variable). This annotation may
        only be used for attributes or DataProviders, and not for actions (since actions do not
        have content).</p>
        <p>The value used for resetting the field is defined by the <a href="#@EmptyValue">@EmptyValue</a> annotation.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>JXPath boolean expression (or <a href="#@Condition">@Condition</a> variable)</td>
            <td>clean condition</td>
            <td><b>Yes</b></td>
          </tr>
        </table>
  <p>Example (InsertUpdateForm.java):</p>
  <source>
   <b>...</b>
   /**
    * <b>@ClearOn g:isEmpty(roleCode)</b>
    */
   public Role getRole() {
      return role;
   }

   <b>...</b>
  </source>
    <p><a href="ui_additional_features.html#Clearing_field_content">More info...</a></p>
      </subsection>
      <subsection name="@ValidateBefore">
        <p>Support for validation in genesis is implemented using <a
        href="http://jakarta.apache.org/commons/validator/">Commons Validator</a>.</p>
        <p>Annotation <code>@ValidateBefore</code> may be used in actions that
        can only be executed when validation succeeds. May be only used for
        actions (methods with <a href="#@Action">@Action</a>annotation) and not
        for attributes.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>None</td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>
  <p>Example (InsertUpdateForm.java):</p>
  <source>
   <b>...</b>
   /**
    * @Action
    * <b>@ValidateBefore</b>
    */
   public void save() throws Exception {
   <b>...</b>
  </source>
    <p><a href="ui_additional_features.html#Validating_data">More info...</a></p>
      </subsection>
      <subsection name="@EqualityComparator">
        <p>Annotation may be used before form property getters. It identifies
        a class that knows how to compare form element of the same type.
        Its main parameter is the fully qualified class name (package.class)
        that implements the interface
        <code>net.java.dev.genesis.equality.EqualityComparator</code>.
        That class is internally used by <code>g:equals(any,any)</code>
        and <code>g:notEquals(any,any)</code> functions .</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Use</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>Fully qualified class name</td>
            <td>@EqualityComparator package.MyEqualityComparator</td>
            <td>Class name that implements the interface
            <code>EqualityComparator</code>.</td>
            <td><b>Yes, except when properties exist</b></td>
          </tr>
          <tr>
            <td>PropertyName</td>
            <td>A property name of the specified class</td>
            <td>@EqualityComparator package.MyEqualityComparator
                                    nullsAsZero=true</td>
            <td>Attribute name of the class that implements the
            <code>EqualityComparator</code> interface. Might have many
            parameters of this type.</td>
            <td><b>No</b></td>
          </tr>
        </table>
    <p><a href="ui_additional_features.html#Comparing_values">More info...</a></p>
      </subsection>
      <subsection name="@EmptyResolver">
        <p>Annotation may be used before form property getters. It identifies a
        class that knows how to compare elements of the same type. Its main
        parameter is the fully qualified class name (package.class) that
        implements the interface
        <code>net.java.dev.genesis.resolvers.EmptyResolver</code>.
        That class is used internally by <code>g:isEmpty(any)</code> and
        <code>g:isNotEmpty(any)</code> functions.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Use</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>Fully qualified class name</td>
            <td>@EmptyResolver package.MyEmptyResolver</td>
            <td>Class name that implements the
            <code>EmptyResolver</code> interface.</td>
            <td><b>Yes, except when properties exist</b></td>
          </tr>
          <tr>
            <td>PropertyName</td>
            <td>Property name of the specified class</td>
            <td>@EmptyResolver package.MyEmptyResolver
                               zerosAsEmpty=true</td>
            <td>Property name of the class that implements
            <code>EmptyResolver</code> interface. Might have many parameters.
            </td>
            <td><b>No</b></td>
          </tr>
        </table>
    <p><a href="ui_additional_features.html#Determining_if_a_field_is_empty">More info...</a></p>
      </subsection>
      <subsection name="@EmptyValue">
        <p>It specifies the empty value of a field. It's used together with the <a href="#@ClearOn">@ClearOn</a> annotation.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Use</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>Literal value</td>
            <td>@EmptyValue -1</td>
            <td>The value for an empty field</td>
            <td><b>Yes</b></td>
          </tr>
        </table>
    <p><a href="ui_additional_features.html#Clearing_field_content">More info...</a></p>
      </subsection>
      <subsection name="@Action">
        <p>It defines a method as a target of the graphical interface binding.
        The action may represent a button and/or simply a method that is called
        whenever a condition is satisfied. The widget name has to be the same
        as the form method name in order to occur the dynamic binding.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>None</td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>
  <p>Usage example (InsertUpdateForm.java):</p>
  <source>
   <b>...</b>
   /**
    * <b>@Action</b>
    * @ValidateBefore
    */
   public void save() throws Exception {
   <b>...</b>
  </source>
        <p>defines the <b>save</b> method as the target of a button action that
        has a "save" as the its name in the graphical interface.</p>
        <p><a href="ui_basic_concepts.html#Implementing_actions_in_forms_and_views">More info...</a></p>
      </subsection>
      <subsection name="@BeforeAction">
        <p>It may be applied to a view method. Views are classes that extend
        one of the supported graphical interface classes. Currently, a view
        is a class that inherits the <code>BaseThinlet</code> class
        (or <code>BaseDialogThinlet</code> class). The <code>@BeforeAction</code
        > annotation applies to a view method that needs to be executed <b>
        before</b> the <code>@Action</code> annotated method. The method name
        must match the @Action name or this name must be indicated by an
        anonymous parameter.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Use</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>String</td>
            <td>@BeforeAction update</td>
            <td>Name of the form method whose execution will be preceeded
            by this method execution</td>
            <td>Only when the name of the view method does not match
            the form method name</td>
          </tr>
        </table>
  <p>Usage example (InsertUpdateView.java):</p>
  <source>
   <b>...</b>
   /**
    * <b>@BeforeAction</b>
    */
   public void chooseRole() throws Exception {
   <b>...</b>
  </source>
    <p><a href="ui_basic_concepts.html#Using_@BeforeAction">More info...</a></p>
      </subsection>
      <subsection name="@AfterAction">
        <p>It may be applied to a view method. Views are classes that extend
        one of the supported graphical interface classes. Currently, a view
        is a class that inherits the <code>BaseThinlet</code> class
        (or <code>BaseDialogThinlet</code> class). The <code>@AfterAction</code>
        annotation applies to a view method that needs to be executed <b>after
        </b> the <code>@Action</code> annotated method. The method name must
        match the @Action name or this name must be indicated by an anonymous
        parameter.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Use</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>String</td>
            <td>@AfterAction update</td>
            <td>Name of the form method whose execution will be followed
            by this method execution</td>
            <td>Only when the name of the view method does not match
            the form method name</td>
          </tr>
        </table>
  <p>Usage example (InsertUpdateView.java):</p>
  <source>
   <b>...</b>
   /**
    * @AfterAction
    */
   public void save() {
   <b>...</b>
  </source>
    <p><a href="ui_basic_concepts.html#using_@AfterAction">More info...</a></p>
      </subsection>
      <subsection name="@ViewHandler">
        <p>Used in POJOs (Plain Old Java Objects) that contain methods
        annotated with <a href="#@BeforeAction"><code>@BeforeAction</code></a>
        and/or <a href="#@AfterAction"><code>@AfterAction</code></a>.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>None</td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>
  <p>Usage sample</p>
  <source>
/**
 * <b>@ViewHandler</b>
 */
public class ViewHandlerExample {
   /**
    * @BeforeAction
    */
   public boolean remove() {
      <b>...</b>
   }
<b>...</b>
}
  </source>
    <p><a href="ui_additional_features.html#Using_POJOs_to_handle_events">More
    info...</a></p>
      </subsection>
      <subsection name="@Remotable">
        <p>It may be used to annotate business class methods. Methods annotated
        as <code>@Remotable</code> are intercepted by an aspect that transfers
        the instance in which the method has been invoked to the server,
        executing it there and returning the result back to the client. This
        feature is called <b>transparent remoting</b>.</p>
        <p>Only concrete, non-static, non-native public methods can be annotated
        as <code>@Remotable</code>.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>None</td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>
  <p>Usage example (RoleSearchCommand.java):</p>
  <source>
   <b>...</b>
   /**
    * <b>@Remotable</b>
    */
   public List getRoles() throws Exception {
      return getSession().createQuery("from Role").list();
   }
   <b>...</b>
  </source>
    <p><a href="business_component_model.html#Transparent_remoting">More info...</a></p>
      </subsection>
      <subsection name="@Transactional">
        <p>The use of <code>@Transactional</code> automatically applies a
        <code>@Remotable</code> annotation to the method. This way the use of
        only one of these annotation above in a given method is needed. Besides
        maintaining transparent remoting characteristics,
        <code>@Transactional</code> forces the method to be executed inside a
        JTA transaction.</p>
        <p>Any other JTA resources accessed inside its execution will be
        automatically included in the same transaction. The transaction context
        will be propagated to any other method or component invoked by the first
        one <code>@Transactional</code> annotation, without the need of any
        additional coding.</p><p>If the method execution runs as expected, the
        transaction will be committed at the end of the method. In case a
        exception is launched a rollback command will be given and the exception
        will be forwarded to the client-side's code.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>None</td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </table>
  <p>Example (RoleRemoveCommand.java):</p>
  <source>
   <b>...</b>
   /**
    * <b>@Transactional</b>
    */
   public boolean removeRole(final Role role) throws Exception {
   <b>...</b>
  </source>
    <p><a href="business_component_model.html#Transaction_support">More info...</a></p>
      </subsection>
      <subsection name="@Criteria">
        <p>Used in methods that perform dynamic searches, which usually need a
        <code>Criteria</code> instance in order to perform their work. This
        annotation implies that the method is also
        <a href="#@Remotable">@Remotable</a>, keeping transparent remoting
        characteristics. It may only be applied to public, concrete, non-static
        and non-native methods.</p>
        <table>
          <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Description</th>
            <th>Required</th>
          </tr>
          <tr>
            <td>anonymous</td>
            <td>Fully qualified class name</td>
            <td>Hibernate mapped class name</td>
            <td>Required if order-by properties are supplied</td>
          </tr>
          <tr>
            <td>order-by properties</td>
            <td>Comma separated list of order-by properties</td>
            <td>@Criteria mypackage.MyClass order-by=firstProperty,
            secondProperty DESC, thirdProperty ASC</td>
            <td>No</td>
          </tr>
        </table>
<p>Example (UserSearchCommand.java):</p>
  <source>
   <b>...</b>
public class UserSearchCommand extends AbstractHibernateCriteria {
   <b>...</b>
   /**
    * <b>@Criteria net.java.dev.genesis.samples.useradmin.databeans.User
                      order-by=name</b>
    */
   public Page getUsers(final int pageNumber)
   <b>...</b>
  </source>
    <p><a href="business_component_model.html#Dynamic_criteria_searching">More info...</a></p>
      </subsection>
    </section>
  </body>
</document>
