<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Generic Scripting Support</title>
    <author email="lmike@dev.java.net">Liaw Mike Djoesman</author>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="Generic scripting support">
      <p>Scripts are used in genesis to evaluate boolean conditions for
      enabling rules, field visibility etc. The framework has generic support
      for script languages since release 3.0.</p>
      <p>Although the default script language is <code>JXPath</code>,
      it is possible to change this default in a way all forms of an
      application have their script expressions written in a certain script
      language.</p>
      <p>
      <ul>
        <li><a href="#Changing the default script language">
        Changing the default script language</a></li>
        <li><a href="#Defining and using a new script language">
        Defining and using a new script language</a></li>
      </ul>
      </p>

      <subsection name="Changing the default script language">
        <p>The <code>aop.xml</code> file must be modified in order to
        make genesis work with another script language for form
        expressions. That file must have a line similar to the following:</p>
<source>
<![CDATA[
<aspect class="FormMetadataFactoryAspect" />
]]>
</source>
        <p>The line above allow the definition of two parameters like
        the following example:</p>
<source>
<![CDATA[
<aspect class="FormMetadataFactoryAspect" >
   <param name="scriptFactory" value="javascript" />
   <param name="scriptFactoryProperties" value="lang=xyz,time=hh24miss" />
</aspect>
]]>
</source>
        <p>The <code>scriptFactory</code> parameter defines the script
        language itself. The framework already supports several built-in
        script languages - in order to use them, all that is needed is to
        provide one of the following values for this parameter:
        <ul>
          <li>jxpath (default value)</li>
          <li>javascript</li>
          <li>beanshell</li>
          <li>el</li>
        </ul>
        </p>
        <p>The <code>scriptFactoryProperties</code> parameter defines
        properties that the <code>ScriptFactory</code> class may use. The value
        of this parameter is in the <code>propertyName=propertyValue</code>
        form and in cases where more than one property is required, tuples
        should be separated by a comma. For instance, if using
        "beanshell", the <code>BSFScriptFactory</code> class accepts a property
        called "lang". This property will make the following configuration the
        same:</p>
<source>
<![CDATA[
<aspect class="FormMetadataFactoryAspect" >
   <param name="scriptFactory" value="beanshell" />
   <param name="scriptFactoryProperties" value="lang=javascript" />
</aspect>
]]>
</source>
<source>
<![CDATA[
<aspect class="FormMetadataFactoryAspect" >
   <param name="scriptFactory" value="javascript" />
</aspect>
]]>
</source>
      </subsection>
      <subsection name="Defining and using a new script language">
        <p>genesis allows the developer to extend its scripting support - in
        this case, developers could make genesis support a new scripting
        language. To do this, all that is needed is to create a new class that
        implements the <code>net.java.dev.genesis.script.ScriptFactory</code>
        interface. For instance:</p>
<source>
package com.company.genesis.script;

import net.java.dev.genesis.script.Script;
import net.java.dev.genesis.script.ScriptFactory;

public class MyScriptFactory implements ScriptFactory {
   public Script newScript() {
      return new MyScript();
   }
}
</source>
        <p>In this case, the <code>aop.xml</code> file must be changed so that
        the value of the <code>scriptFactory</code> parameter for the
        <code>FormControllerFactoryAspect</code> aspect is the full
        qualified class name of the implementation, like the following
        example:</p>
<source>
<![CDATA[
<aspect class="FormMetadataFactoryAspect" >
   <param name="scriptFactory" value="com.company.genesis.script.MyScriptFactory" />
   ...
</aspect>
]]>
</source>
        <p>Back to <code>MyScriptFactory</code> code, we note that it defines
        a method that should return a
        <code>net.java.dev.genesis.script.Script</code> instance. Here is an
        example of how <code>MyScript</code> could look like:</p>
<source>
package com.company.genesis.script;

import net.java.dev.genesis.script.Script;
import net.java.dev.genesis.script.ScriptContext;
import net.java.dev.genesis.script.ScriptExpression;

public class MyScript implements Script {
   public ScriptContext newContext(Object root) {
      return new MyScriptContext(root);
   }
   public ScriptExpression compile(String expression) {
      return new MyScriptExpression(expression);
   }
}
</source>
        <p>In the same way, the above class has two methods - one of them will
        return a class that implements
        <code>net.java.dev.genesis.script.ScriptContext</code> and the other
        one, a class that will extend
        <code>net.java.dev.genesis.script.ScriptExpression</code>:</p>
        <ul>
          <li><code>ScriptContext</code> is a class that represents the
          context of a <code>Form</code> - it will have access to variables
          (named conditions), the form itself, built-in genesis functions
          (such as isEmpty, hasChanged, equals, etc) and built-in functions
          specific to each scripting language.</li>
          <li><code>ScriptExpression</code> represents an abstraction of
          an expression in the given scripting language.</li>
        </ul>
        <p>These are the only steps needed for genesis to support a new script
        language.</p>
      </subsection>
    </section>
  </body>
</document>
