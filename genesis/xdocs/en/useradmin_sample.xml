<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Sample application - useradmin</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="Installing the useradmin sample">
      <p>Installing the  <code>useradmin</code> sample is a simple task.
      <code>useradmin</code> distribution can be found in the full distribution
      or the full binary distribution genesis packages that can be found
      <a href="https://genesis.dev.java.net/servlets/ProjectDocumentList?folderID=2342&amp;expandFolder=2342&amp;folderID=1756">here</a>.
      Distributions for all samples
      are already setup to be run with the <a href="http://www.jboss.org/">JBoss
      </a> application server, an open-source free server. This does not mean
      genesis only runs on this server; genesis was developed in a J2EE
      compatible way.</p>
      <p>There are 4 simple steps necessary to install the useradmin sample:</p>
      <ol>
        <li>Download and install <a href=
        "http://www.jboss.org/">JBoss</a> application server. It is recommended
        to use its latest 3.2.x release.</li>
        <li>In dir <code>&lt;JBOSS_DIR&gt;/server</code>, copy the <code>default
        </code> dir to a new dir called <code>useradmin</code>. In practice,
        there'll be a <code>&lt;JBOSS_DIR&gt;/server/useradmin</code> directory
        that will be identical to the
        <code>&lt;JBOSS_DIR&gt;/server/default</code> dir.</li>
        <li>Run the ant scripts to deploy the example 
        <a href="#Running the useradmin sample">(as instructed later in 
        this document)</a>. These scripts are distributed together with 
        genesis.</li>
        <li>Start the JBoss server <a href="#Running the useradmin sample">
        (as instructed later in this document)</a>.</li>
      </ol>
      <p>After installing and starting JBoss, we can run the sample by accessing
      a Java Web start link or by using the ant scripts to run the sample
      application <a href="#Running the useradmin sample">
        (as instructed later in this document)</a>.</p>
    </section>
    <section name="useradmin sample's purpose">
      <p>useradmin sample's purpose is to demonstrate to users genesis major
      features and also shows the transparent remoting, cause just with the
      same source code, it's possible to run the sample using either 
      remote calls or local calls.</p>
      <p>The sample has two source code dirs: the directory
      <code>&lt;GENESIS_DIST&gt;/samples/useradmin/modules/client/src
      </code> and the directory
      <code>&lt;GENESIS_DIST&gt;/samples/useradmin/modules/shared/src
      </code> that contain the client module and the client/server shared module
      each.</p>
      <p>The client module source dir contains sets comprised of three source
      files: one for the form, one for the UI xml (Thinlet xml) and one for the
      view definition. For example, let's consider the initial useradmin screen:
      </p>
      <ul>
        <li><code><b>user-list.xml</b></code>: Thinlet xml file that describes
        how UI components are arranged on the screen. Component names match
        field names and method names in the form.</li>
        <li><code><b>UserListForm.java</b></code>: Java class whose fields keep
        data displayed on the screen and whose methods are screen actions.</li>
        <li><code><b>UserListView.java</b></code>: Java class responsible for
        the screen, where the UI dimensions are defined, which UI xml file to
        use and that <code>binds</code> a form to a view. Other auxiliary
        methods may be defined by this class in order to allow other screens to
        be open or to programatically invoke a form action.</li>
      </ul>
      <p>The shared module source dir contains the source files that implement
      business logic (commands) and others that are Hibernate mapped classes
      (databeans). A command example is
      <code>net.java.dev.genesis.samples.useradmin.business.UserCreateCommand
      </code>:</p>
<source>
public class UserCreateCommand extends AbstractHibernateCommand {

   /**
    * @Transactional
    */
   public Serializable createUser(final User user) throws Exception {
      return getSession().save(user);
   }


}
</source>
      <p>This example shows how simple and straight commands can be. The command
      shown above has just a transactional method that persists a user in the
      database. Transaction commit/rollback is automatically hanlded by genesis.
      </p>
      <p>As a databean example, let's examine
      <code>net.java.dev.genesis.samples.useradmin.databeans.User</code>, a
      class that represents a User entity mapped to a table using XDoclet tags:
      </p>
<source>
/**
 * @hibernate.class
 *
 * @hibernate.query name="User.findByRole"
 *          query="from User u where u.role.code = :roleCode"
 */
public class User implements Serializable {
   private Long id;
   private String name;
   private String login;
   private String password;
   private String email;
   private Date birthday;
   private String address;
   private Role role;
   private Country country;
   private State state;

   /**
    * @hibernate.property
    */
   public Date getBirthday() {
      return birthday;
   }

   public void setBirthday(Date birthday) {
      this.birthday = birthday;
   }

   /**
    * @hibernate.property
    type="net.java.dev.genesis.samples.useradmin.databeans.CountryType"
    */
   public Country getCountry() {
      return country;
   }

   public void setCountry(Country country) {
      this.country = country;
   }

   /**
    * @hibernate.property
    */
   public String getEmail() {
      return email;
   }

   public void setEmail(String email) {
      this.email = email;
   }

   /**
    * @hibernate.property
    */
   public String getAddress() {
      return address;
   }

   public void setAddress(String address) {
      this.address = address;
   }

   /**
    * @hibernate.many-to-one
    */
   public Role getRole() {
      return role;
   }

   public void setRole(Role role) {
      this.role = role;
   }

   /**
    * @hibernate.id generator-class="increment"
    */
   public Long getId() {
      return id;
   }

   public void setId(Long id) {
      this.id = id;
   }

   /**
    * @hibernate.property
    */
   public String getLogin() {
      return login;
   }

   public void setLogin(String login) {
      this.login = login;
   }

   /**
    * @hibernate.property
    */
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }

   /**
    * @hibernate.property
    */
   public String getPassword() {
      return password;
   }

   public void setPassword(String password) {
      this.password = password;
   }

   /**
    * @hibernate.property
    type="net.java.dev.genesis.samples.useradmin.databeans.StateType"
    */
   public State getState() {
      return state;
   }

   public void setState(State state) {
      this.state = state;
   }
}
</source>
      <p>A databean is JavaBean compliant class, i.e., one that exposes
      properties through getters and setters. It doesn't have to implement any
      interface nor to extend any abstract class. It is convenient to implement
      <code>java.io.Serializable</code> so the class can be used as a parameter
      or as a return value for a remote call.</p>
    </section>
    <section name="Running the useradmin sample">
      <p>To run this sample, ant scripts have been provided in order to perfom
      this task. To use those scripts, execute the following steps:</p>
      <ul>
        <li>Make a copy the <code>buid.properties.sample</code> file and 
        rename it to <code>build.properties</code></li>
        <li>Edit the new <code>build.properties</code> file in order to modify
        or comment the properties according to your execution environment.</li>
        <li>Within command line, run the ant script by just typing: <code>
        ant</code> (the default ant task <code>useradmin:all.with.webstart
        </code> will be executed). This command will initiate the compiling 
        and deploying process which will install this sample application inside 
        "useradmin" directory create by the JBoss instalation process 
        ealier.</li>
        <li>Once the instalation process has finished, JBoss server can be
        started by the following command:         
        <code>&lt;JBOSS_DIRECTORY&gt;/bin/run -c useradmin</code></li>
        <li>After JBoss has started, this sample can be executed by accessing
        <a href="http://localhost:8080/useradmin/">
        http://localhost:8080/useradmin/</a> URL. Through this page, the link
        will activate the application download and run it using Java Web
        Start technology.</li>
        <li>Another option to run this sample is to use an ant task with
        the following command: <code>ant useradmin:run.remote</code>. This
        command will run the useradmin sample with remote calls to the JBoss
        server</li>
        <li>It's also possible to execute this sample with local calls 
        configuration only - i.e. the sample will not use the JBoss server in
        anyway. In order to perfom this, use the following command:
        <code>ant useradmin:run.local</code></li>
      </ul>      
      <p>This sample goal is to demonstrate how a project might be structured
      and how to use genesis features. It's recommended to start new genesis-
      based projects by using the <a href="empty_project.html">empty project</a>
      as a start point and use this sample as a refenrece.</p>
    </section>
  </body>
</document>