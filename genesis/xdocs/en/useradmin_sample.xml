<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Sample application - useradmin</title>
    <author email="allanjones@dev.java.net">Allan Jones Batista de Castro
    </author>
  </properties>
  <body>
    <section name="Installing the useradmin sample">
      <p>Installing the  <code>useradmin</code> sample is a simple task.
      <code>useradmin</code> distribution can be found in the <a href="#TODO:
      broken link">full ditribution</a> or the <a href="#TODO: broken link">full
      binary distribution</a> genesis packages. Distributions for all samples
      are already setup to be run with the <a href="http://www.jboss.org/">JBoss
      </a> application server, an open-source free server. This does not mean
      genesis only runs on this server; genesis was developed in a J2EE
      compatible way.</p>
      <p>There are 4 simple steps necessary to install the useradmin sample:</p>
      <ol>
        <li>Download and install <a href=
        "http://www.jboss.org/">JBoss</a> application server. It is recommended
        to use its latest 3.2.x release.</li>
        <li>In dir <code>&lt;JBOSS_DIR&gt;/server</code>, copy the <code>default
        </code> dir to a new dir called <code>useradmin</code>. In practice,
        there'll be a <code>&lt;JBOSS_DIR&gt;/server/useradmin</code> directory
        that will be identical to the
        <code>&lt;JBOSS_DIR&gt;/server/default</code> dir.</li>
        <li>Copy all files and directories located on
        <code>&lt;GENESIS_DIST&gt;/samples/useradmin/dist</code> and the file
        named
        <code>&lt;GENESIS_DIST&gt;/genesis/dist/genesis-server-&lt;version&gt;
        .jar</code>to the <code>&lt;JBOSS_DIR&gt;/server/useradmin/deploy</code>
        dir.</li>
        <li>Start the JBoss server instance by executing
        <code>&lt;JBOSS_DIR&gt;/bin/run -c useradmin</code>.</li>
      </ol>
      <p>After installing and starting JBoss, we can run the sample by accessing
      <a href="http://localhost:8080/useradmin/">
      http://localhost:8080/useradmin/</a>. By clicking on the link available on
      this page, using Java Web Start technology, the sample will be downloaded,
      installed and executed in the end-user machine.</p>
    </section>
    <section name="useradmin sample's purpose">
      <p>useradmin sample's purpose is to demonstrate to users genesis major
      features.</p>
      <p>The sample has two source code dirs: the directory
      <code>&lt;GENESIS_DIST&gt;/samples/useradmin/modules/client/src
      </code> and the directory
      <code>&lt;GENESIS_DIST&gt;/samples/useradmin/modules/shared/src
      </code> that contain the client module and the client/server shared module
      each.</p>
      <p>The client module source dir contains sets comprised of three source
      files: one for the form, one for the UI xml (Thinlet xml) and one for the
      view definition. For example, let's consider the initial useradmin screen:
      </p>
      <ul>
        <li><code><b>user-list.xml</b></code>: Thinlet xml file that describes
        how UI components are arranged on the screen. Component names match
        field names and method names in the form.</li>
        <li><code><b>UserListForm.java</b></code>: Java class whose fields keep
        data displayed on the screen and whose methods are screen actions.</li>
        <li><code><b>UserListView.java</b></code>: Java class responsible for
        the screen, where the UI dimensions are defined, which UI xml file to
        use and that <code>binds</code> a form to a view. Other auxiliary
        methods may be defined by this class in order to allow other screens to
        be open or to programatically invoke a form action.</li>
      </ul>
      <p>The shared module source dir contains the source files that implement
      business logic (commands) and others that are Hibernate mapped classes
      (databeans). A command example is
      <code>net.java.dev.genesis.samples.useradmin.business.UserCreateCommand
      </code>:</p>
<source>
public class UserCreateCommand extends AbstractHibernateCommand {

   /**
    * @Transactional
    */
   public Serializable createUser(final User user) throws Exception {
      return getSession().save(user);
   }


}
</source>
      <p>This example shows how simple and straight commands can be. The command
      shown above has just a transactional method that persists a user in the
      database. Transaction commit/rollback is automatically hanlded by genesis.
      </p>
      <p>As a databean example, let's examine
      <code>net.java.dev.genesis.samples.useradmin.databeans.User</code>, a
      class that represents a User entity mapped to a table using XDoclet tags:
      </p>
<source>
/**
 * @hibernate.class
 *
 * @hibernate.query name="User.findByRole"
 *          query="from User u where u.role.code = :roleCode"
 */
public class User implements Serializable {
   private Long id;
   private String name;
   private String login;
   private String password;
   private String email;
   private Date birthday;
   private String address;
   private Role role;
   private Country country;
   private State state;

   /**
    * @hibernate.property
    */
   public Date getBirthday() {
      return birthday;
   }

   public void setBirthday(Date birthday) {
      this.birthday = birthday;
   }

   /**
    * @hibernate.property
    type="net.java.dev.genesis.samples.useradmin.databeans.CountryType"
    */
   public Country getCountry() {
      return country;
   }

   public void setCountry(Country country) {
      this.country = country;
   }

   /**
    * @hibernate.property
    */
   public String getEmail() {
      return email;
   }

   public void setEmail(String email) {
      this.email = email;
   }

   /**
    * @hibernate.property
    */
   public String getAddress() {
      return address;
   }

   public void setAddress(String address) {
      this.address = address;
   }

   /**
    * @hibernate.many-to-one
    */
   public Role getRole() {
      return role;
   }

   public void setRole(Role role) {
      this.role = role;
   }

   /**
    * @hibernate.id generator-class="increment"
    */
   public Long getId() {
      return id;
   }

   public void setId(Long id) {
      this.id = id;
   }

   /**
    * @hibernate.property
    */
   public String getLogin() {
      return login;
   }

   public void setLogin(String login) {
      this.login = login;
   }

   /**
    * @hibernate.property
    */
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }

   /**
    * @hibernate.property
    */
   public String getPassword() {
      return password;
   }

   public void setPassword(String password) {
      this.password = password;
   }

   /**
    * @hibernate.property
    type="net.java.dev.genesis.samples.useradmin.databeans.StateType"
    */
   public State getState() {
      return state;
   }

   public void setState(State state) {
      this.state = state;
   }
}
</source>
      <p>A databean is JavaBean compliant class, i.e., one that exposes
      properties through getters and setters. It doesn't have to implement any
      interface nor to extend any abstract class. It is convenient to implement
      <code>java.io.Serializable</code> so the class can be used as a parameter
      or as a return value for a remote call.</p>
      <p>This sample goal is to demonstrate how a project might be structured
      and how to use genesis features. It's recommended to start new genesis-
      based projects by using the <a href="empty_project.html">empty project</a>
      as a start point and use this sample as a refenrece.</p>
    </section>
  </body>
</document>