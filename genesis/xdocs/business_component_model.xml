<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Modelo de componentes de negócio</title>
    <author email="mister__m@dev.java.net">Michael Nascimento Santos</author>
  </properties>
  <body>
    <section name="Modelo de componentes de negócio">
      <p><b>TODO: configurar todos os exemplos em um sample e atualizar
      documento com instruções de execução; completar feature list.</b></p>
      <p>O modelo de componentes de negócio do genesis é bastante simples de ser
      compreendido. Os seguintes conceitos e/ou características dele são
      abordados abaixo:
      <ul>
        <li><a href="#Remotabilidade transparente">Remotabilidade transparente
        </a></li>
        <li><a href="#Suporte a transações">Suporte a transações
        </a></li>
        <li><a href="#Integração com o Hibernate">Integração com o Hibernate
        </a></li>
        <li><a href="#Paginação">Paginação
        </a></li>
      </ul>
      </p>
    </section>
    <section name="Remotabilidade transparente">
      <p>Suponhamos que exista um componente chamado <code>ExemploSoma</code>
      como abaixo:</p>
      <source>
 1. public class ExemploSoma {
 2.    public int soma(int a, int b) {
 3.       System.out.println("a = " + a);
 4.       System.out.println("b = " + b);
 5.
 6.       int soma = a + b;
 7.
 8.       System.out.println("a + b = " + soma);
 9.
10.       return soma;
11.    }
12.
13.    public static void main(String[] args) {
14.       System.out.println(new ExemploSoma().soma(2, 2));
15.    }
16. }</source>
      <p>Ao executar esse código, a seguinte saída é impressa no console local:
      </p>
      <source>
a = 2
b = 2
a + b = 4
4</source>
      <p>Pode-se tornar o método <code>soma(int, int)</code> remoto apenas por
      se acrescentar a anotação <code>@Remotable</code>. O código
      modificado ficaria da seguinte forma:</p>
      <source>
 1. public class ExemploSomaRemota {
 2.    /**
 3.     * @Remotable
 4.     */
 5.    public int soma(int a, int b) {
 6.       System.out.println("a = " + a);
 7.       System.out.println("b = " + b);
 8.
 9.       int soma = a + b;
10.
11.       System.out.println("a + b = " + soma);
12.
13.       return soma;
14.    }
15.
16.    public static void main(String[] args) {
17.       System.out.println(new ExemploSomaRemota().soma(2, 2));
18.    }
19. }</source>
      <p>Executando-se o novo código com o JBoss iniciado, observa-se uma
      redução na saída no console
      local:</p>
      <source>
4</source>
      <p>Ao observar o console do JBoss, pode-se notar que as mensagens
      anteriores foram impressas no servidor. Por que isso acontece?</p>
      <p>A saída observada no console local equivale ao resultado da execução
      da linha 17. Porém, as outras instruções de <code>System.out.println</code
      > das linhas 6, 7 e 11 encontram-se dentro de um método anotado como <code
      >@Remotable</code> e por isso são executadas de forma diferente. Na
      verdade, todo o método <code>soma(int,int)</code> passou a ser executado
      no servidor. Como?</p>
      <p>Métodos anotados com <code>@Remotable</code> são interceptados através
      de um aspecto (genesis-aspect) que transfere a instância em que o método
      foi invocado para o servidor, executando-o ali e transferindo o resultado
      de volta para o cliente. Essa característica é chamada de
      <b>remotabilidade transparente</b>.</p>
      <subsection name="Restrições e limitações">
        <p>Existem algumas restrições básicas para que um método possa ser
        remoto no genesis:
        <ul>
          <li>Não pode ser abstrato</li>
          <li>Não pode ser estático nem manipular membros estáticos</li>
          <li>Não pode ser nativo</li>
          <li>Deve ser <code>public</code> e estar em uma classe
          <code>public</code></li>
        </ul>
        </p>
        <p>A primeira existe porque um método abstrato não pode ser invocado
        (ele pode ser abstrato na superclasse, no entanto). O método não pode
        ser estático pela simples razão que valores estáticos divergem entre
        JVMs, enquanto a instância pode ser transferida para o servidor durante
        cada execução. As duas últimas restrições existem apenas para manter
        compatibilidade com a especificação EJB.</p>
        <p>Um último efeito colateral a ser notado é que variáveis de instância
        atualizadas em métodos remotos não afetam seus valores locais. Abaixo
        vemos um breve exemplo disso:</p>
        <source>
 1. public class LocalVersusRemoto {
 2.    private int valor;
 3.
 4.    public void local() {
 5.       valor++;
 6.       System.out.println("valor em local(): " + valor);
 7.    }
 8.
 9.    /**
10.     * @Remotable
11.     */
12.    public void remoto() {
13.       valor++;
14.       System.out.println("valor em remoto(): " + valor);
15.    }
16.
17.    public int getValor() {
18.       return valor;
19.    }
20.
21.    public static void main(String[] args) {
22.       LocalVersusRemoto lvr = new LocalVersusRemoto();
23.       lvr.local();
24.       System.out.println("valor: " + lvr.getValor());
25.       lvr.remoto();
26.       System.out.println("valor: " + lvr.getValor());
27.       lvr.local();
28.       System.out.println("valor: " + lvr.getValor());
29.    }
30. }</source>
        <p>A saída no console local é:</p>
        <source>
valor em local(): 1
valor: 1
valor: 1
valor em local(): 2
valor: 2</source>
        <p>enquanto no console remoto é:</p>
        <source>
valor em remoto(): 2</source>
        <p>Ao se executar a linha 23, a variável <code>valor</code> é modificada
        localmente e seu conteúdo tanto dentro do método <code>local()</code>
        como o impresso na linha 24 são os mesmos. Porém, ao se executar a linha
        25 a instância <code>lvr</code> é transferida para o servidor e o método
        <code>remoto()</code> é executado nela, alterando a cópia remota de
        <code>valor</code> de 1 para 2, conforme exibido no console remoto,
        mantendo, no entanto, sua cópia local intacta como notamos na linha 26
        (console local).</p>
        <p>De modo que valores locais são transferidos para o servidor, mas não
        ao contrário. O mesmo se aplica a objetos passados como parâmetros. Se
        quiser obter a cópia modificada do servidor retorne diretamente a partir
        do método anotado como <code>@Remotable</code>.</p>
      </subsection>
    </section>
    <section name="Suporte a transações">
      <p>Para executar um método dentro de uma transação, basta usar a anotação
      <code>@Transactional</code> de forma similar ao uso de <code>@Remotable
      </code>, como abaixo:</p>
      <source>
/**
 * @Transactional
 */
public void metodoTransacional() {
   // codigo do metodo
}</source>
      <p>O uso de <code>@Transactional</code> automaticamente implica em tornar
      um método <code>@Remotable</code>, de modo que o uso de apenas uma dessas
      anotações por método é necessário. Além de manter as características de
      remotabilidade transparente, <code>@Transactional</code> faz com que o
      método seja executado dentro de uma transação JTA. Quaisquer recursos
      transacionais que sejam acessados durante sua execução e tenham suporte a
      JTA serão automaticamente incluídos na transação.</p>
      <p>Se a execução do método transcorrer normalmente, a transação será
      automaticamente comitada ao final. Caso seja lançada qualquer exceção
      haverá rollback automático das alterações e a exceção será propagada
      diretamente ao código cliente.</p>
    </section>
    <section name="Integração com o Hibernate">
      <p>O genesis provê uma ótima integração com o Hibernate para os
      componentes de negócio. Atualmente, para tirar proveito dela, a classe
      deve implementar a interface <code>
      net.java.dev.genesis.command.hibernate.HibernateCommand</code> diretamente
      ou através de introduction. Futuramente essa limitação será removida,
      provavelmente na versão 0.3.</p>
      <p>Essa interface expõe o método <code>setSession(Session)</code> que é
      invocado automaticamente pelo framework no servidor antes da execução de
      cada método remoto injetando uma sessão válida e após com o valor <code>
      null</code>, para liberar a referência. Para facilitar o uso dessa
      integração na maior parte dos casos, é provida uma classe, <code>
      net.java.dev.genesis.command.hibernate.AbstractHibernateCommand</code> que
      implementa a interface e possui métodos úteis como <code>getSession()
      </code>.</p>
      <p>Abaixo temos um exemplo de como utilizar essa integração num componente
      de negócios:</p>
      <source>
public class ExemploIntegracaoHibernate extends AbstractHibernateCommand {
   /**
    * @Remotable
    */
   public Collection getTodos() throws HibernateException {
      return getSession().createQuery("from ClasseMapeada").list();
   }
}</source>
      <p>Como o exemplo acima mostra, utilizar o Hibernate em conjunto com suas
      classes de negócio é bastante simples e direto.</p>
    </section>
    <section name="Paginação">
      <p></p>
    </section>
  </body>
</document>